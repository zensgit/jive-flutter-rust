Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/error.rs:1:
 //! API错误处理模块
 
-use axum::{http::StatusCode, response::{IntoResponse, Response}, Json};
+use axum::{
+    http::StatusCode,
+    response::{IntoResponse, Response},
+    Json,
+};
 use serde::{Deserialize, Serialize};
 
 /// API错误类型
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/error.rs:38:
 
 impl ApiErrorResponse {
     pub fn new(code: impl Into<String>, msg: impl Into<String>) -> Self {
-        Self { error_code: code.into(), message: msg.into(), retry_after: None }
+        Self {
+            error_code: code.into(),
+            message: msg.into(),
+            retry_after: None,
+        }
     }
     pub fn with_retry_after(mut self, sec: u64) -> Self {
         self.retry_after = Some(sec);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/error.rs:107:
     fn from(err: sqlx::Error) -> Self {
         match err {
             sqlx::Error::RowNotFound => ApiError::NotFound("Resource not found".to_string()),
-            sqlx::Error::Database(db_err) => {
-                ApiError::DatabaseError(db_err.message().to_string())
-            }
+            sqlx::Error::Database(db_err) => ApiError::DatabaseError(db_err.message().to_string()),
             _ => ApiError::DatabaseError(err.to_string()),
         }
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/audit_handler.rs:36:
     if ctx.family_id != family_id {
         return Err(StatusCode::FORBIDDEN);
     }
-    
+
     // Check permission
-    if ctx.require_permission(crate::models::permission::Permission::ViewAuditLog).is_err() {
+    if ctx
+        .require_permission(crate::models::permission::Permission::ViewAuditLog)
+        .is_err()
+    {
         return Err(StatusCode::FORBIDDEN);
     }
-    
+
     let service = AuditService::new(pool.clone());
-    
+
     let filter = AuditLogFilter {
         family_id: Some(family_id),
         user_id: query.user_id,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/audit_handler.rs:57:
         limit: query.limit,
         offset: query.offset,
     };
-    
+
     match service.get_audit_logs(filter).await {
         Ok(logs) => Ok(Json(ApiResponse::success(logs))),
         Err(e) => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/audit_handler.rs:107:
             RETURNING 1
         )
         SELECT COUNT(*) FROM del
-        "#
+        "#,
     )
     .bind(family_id)
     .bind(days)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/audit_handler.rs:117:
     .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
 
     // Log this cleanup operation into audit trail (best-effort)
-    let _ = AuditService::new(pool.clone()).log_action(
-        family_id,
-        ctx.user_id,
-        crate::models::audit::CreateAuditLogRequest {
-            action: crate::models::audit::AuditAction::Delete,
-            entity_type: "audit_logs".to_string(),
-            entity_id: None,
-            old_values: None,
-            new_values: Some(serde_json::json!({
-                "older_than_days": days,
-                "limit": limit,
-                "deleted": deleted,
-            })),
-        },
-        None,
-        None,
-    ).await;
+    let _ = AuditService::new(pool.clone())
+        .log_action(
+            family_id,
+            ctx.user_id,
+            crate::models::audit::CreateAuditLogRequest {
+                action: crate::models::audit::AuditAction::Delete,
+                entity_type: "audit_logs".to_string(),
+                entity_id: None,
+                old_values: None,
+                new_values: Some(serde_json::json!({
+                    "older_than_days": days,
+                    "limit": limit,
+                    "deleted": deleted,
+                })),
+            },
+            None,
+            None,
+        )
+        .await;
 
     Ok(Json(ApiResponse::success(serde_json::json!({
         "deleted": deleted,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/audit_handler.rs:158:
     if ctx.family_id != family_id {
         return Err(StatusCode::FORBIDDEN);
     }
-    
+
     // Check permission
-    if ctx.require_permission(crate::models::permission::Permission::ViewAuditLog).is_err() {
+    if ctx
+        .require_permission(crate::models::permission::Permission::ViewAuditLog)
+        .is_err()
+    {
         return Err(StatusCode::FORBIDDEN);
     }
-    
+
     let service = AuditService::new(pool.clone());
-    
-    match service.export_audit_report(family_id, query.from_date, query.to_date).await {
-        Ok(csv) => {
-            Ok(Response::builder()
-                .status(StatusCode::OK)
-                .header(header::CONTENT_TYPE, "text/csv")
-                .header(
-                    header::CONTENT_DISPOSITION,
-                    format!("attachment; filename=\"audit_log_{}_{}.csv\"", 
-                        query.from_date.format("%Y%m%d"),
-                        query.to_date.format("%Y%m%d")
-                    )
-                )
-                .body(csv.into())
-                .unwrap())
-        },
+
+    match service
+        .export_audit_report(family_id, query.from_date, query.to_date)
+        .await
+    {
+        Ok(csv) => Ok(Response::builder()
+            .status(StatusCode::OK)
+            .header(header::CONTENT_TYPE, "text/csv")
+            .header(
+                header::CONTENT_DISPOSITION,
+                format!(
+                    "attachment; filename=\"audit_log_{}_{}.csv\"",
+                    query.from_date.format("%Y%m%d"),
+                    query.to_date.format("%Y%m%d")
+                ),
+            )
+            .body(csv.into())
+            .unwrap()),
         Err(e) => {
             eprintln!("Error exporting audit logs: {:?}", e);
             Err(StatusCode::INTERNAL_SERVER_ERROR)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:2:
 //! 认证相关API处理器
 //! 提供用户注册、登录、令牌刷新等功能
 
-use axum::{
-    extract::State,
-    http::StatusCode,
-    response::Json,
-    Extension,
+use argon2::{
+    password_hash::{rand_core::OsRng, PasswordHash, PasswordHasher, PasswordVerifier, SaltString},
+    Argon2,
 };
+use axum::{extract::State, http::StatusCode, response::Json, Extension};
+use chrono::{DateTime, Utc};
 use serde::{Deserialize, Serialize};
 use serde_json::Value;
 use sqlx::PgPool;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:14:
 use uuid::Uuid;
-use chrono::{DateTime, Utc};
-use argon2::{
-    password_hash::{rand_core::OsRng, PasswordHash, PasswordHasher, PasswordVerifier, SaltString},
-    Argon2,
-};
 
+use super::family_handler::{ApiError as FamilyApiError, ApiResponse};
 use crate::auth::{Claims, LoginRequest, LoginResponse, RegisterRequest, RegisterResponse};
 use crate::error::{ApiError, ApiResult};
 use crate::services::AuthService;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:24:
-use super::family_handler::{ApiResponse, ApiError as FamilyApiError};
 
 /// 用户模型
 #[derive(Debug, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:48:
     let (final_email, username_opt) = if input.contains('@') {
         (input.clone(), None)
     } else {
-        (format!("{}@noemail.local", input.to_lowercase()), Some(input.clone()))
+        (
+            format!("{}@noemail.local", input.to_lowercase()),
+            Some(input.clone()),
+        )
     };
 
     let auth_service = AuthService::new(pool.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:58:
         name: Some(req.name.clone()),
         username: username_opt,
     };
-    
+
     match auth_service.register_with_family(register_req).await {
         Ok(user_ctx) => {
             // Generate JWT token
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:65:
             let token = crate::auth::generate_jwt(user_ctx.user_id, user_ctx.current_family_id)?;
-            
+
             Ok(Json(RegisterResponse {
                 user_id: user_ctx.user_id,
                 email: user_ctx.email,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:70:
                 token,
             }))
-        },
-        Err(e) => {
-            Err(ApiError::BadRequest(format!("Registration failed: {:?}", e)))
         }
+        Err(e) => Err(ApiError::BadRequest(format!(
+            "Registration failed: {:?}",
+            e
+        ))),
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:86:
     let (final_email, username_opt) = if input.contains('@') {
         (input.clone(), None)
     } else {
-        (format!("{}@noemail.local", input.to_lowercase()), Some(input.clone()))
+        (
+            format!("{}@noemail.local", input.to_lowercase()),
+            Some(input.clone()),
+        )
     };
-    
+
     // 检查邮箱是否已存在
-    let existing = sqlx::query(
-        "SELECT id FROM users WHERE LOWER(email) = LOWER($1)"
-    )
-    .bind(&final_email)
-    .fetch_optional(&pool)
-    .await
-    .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+    let existing = sqlx::query("SELECT id FROM users WHERE LOWER(email) = LOWER($1)")
+        .bind(&final_email)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+
     if existing.is_some() {
         return Err(ApiError::BadRequest("Email already registered".to_string()));
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:104:
-    
+
     // 若为用户名注册，校验用户名唯一
     if let Some(ref username) = username_opt {
-        let existing_username = sqlx::query(
-            "SELECT id FROM users WHERE LOWER(username) = LOWER($1)"
-        )
-        .bind(username)
-        .fetch_optional(&pool)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let existing_username =
+            sqlx::query("SELECT id FROM users WHERE LOWER(username) = LOWER($1)")
+                .bind(username)
+                .fetch_optional(&pool)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
         if existing_username.is_some() {
             return Err(ApiError::BadRequest("Username already taken".to_string()));
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:117:
     }
-    
+
     // 生成密码哈希
     let salt = SaltString::generate(&mut OsRng);
     let argon2 = Argon2::default();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:123:
         .hash_password(req.password.as_bytes(), &salt)
         .map_err(|_| ApiError::InternalServerError)?
         .to_string();
-    
+
     // 创建用户与家庭的 ID
     let user_id = Uuid::new_v4();
     let family_id = Uuid::new_v4();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:130:
-    
+
     // 开始事务
-    let mut tx = pool.begin().await
+    let mut tx = pool
+        .begin()
+        .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 先创建用户（避免 families.owner_id 外键约束失败）
     tracing::info!(target: "auth_register", user_id = %user_id, family_id = %family_id, email = %final_email, "Creating user then family with owner_id");
     sqlx::query(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:143:
             $1, $2, $3, $4, $5, $6,
             true, false, NOW(), NOW()
         )
-        "#
+        "#,
     )
     .bind(user_id)
     .bind(&final_email)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:161:
         r#"
         INSERT INTO families (id, name, owner_id, created_at, updated_at)
         VALUES ($1, $2, $3, NOW(), NOW())
-        "#
+        "#,
     )
     .bind(family_id)
     .bind(format!("{}'s Family", req.name))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:169:
     .execute(&mut *tx)
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 创建默认账本（标记 is_default，记录创建者）
     let ledger_id = Uuid::new_v4();
     sqlx::query(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:184:
     .execute(&mut *tx)
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 绑定用户的当前家庭并提交事务
     tracing::info!(target: "auth_register", user_id = %user_id, family_id = %family_id, "Binding current_family_id and committing");
     sqlx::query("UPDATE users SET current_family_id = $1 WHERE id = $2")
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:195:
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
     // 提交事务
-    tx.commit().await
+    tx.commit()
+        .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 生成JWT令牌
     let claims = Claims::new(user_id, final_email.clone(), Some(family_id));
     let token = claims.to_token()?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:204:
-    
+
     Ok(Json(RegisterResponse {
         user_id,
         email: final_email,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:231:
                    created_at, updated_at
             FROM users
             WHERE LOWER(email) = LOWER($1)
-            "#
+            "#,
         )
         .bind(&login_input)
         .fetch_optional(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:245:
                    created_at, updated_at
             FROM users
             WHERE LOWER(username) = LOWER($1)
-            "#
+            "#,
         )
         .bind(&login_input)
         .fetch_optional(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:253:
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?
     }
     .ok_or(ApiError::Unauthorized)?;
-    
+
     use sqlx::Row;
     let user = User {
-        id: row.try_get("id").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
-        email: row.try_get("email").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        id: row
+            .try_get("id")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        email: row
+            .try_get("email")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
         name: row.try_get("name").unwrap_or_else(|_| "".to_string()),
-        password_hash: row.try_get("password_hash").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        password_hash: row
+            .try_get("password_hash")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
         family_id: None, // Will fetch from family_members table if needed
         is_active: row.try_get("is_active").unwrap_or(true),
         is_verified: row.try_get("email_verified").unwrap_or(false),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:266:
         last_login_at: row.try_get("last_login_at").ok(),
-        created_at: row.try_get("created_at").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
-        updated_at: row.try_get("updated_at").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        created_at: row
+            .try_get("created_at")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        updated_at: row
+            .try_get("updated_at")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
     };
-    
+
     // 检查用户状态
     if !user.is_active {
         return Err(ApiError::Forbidden);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:274:
     }
-    
+
     // 验证密码
-    println!("DEBUG: Attempting to verify password for user: {}", user.email);
-    println!("DEBUG: Password hash from DB: {}", &user.password_hash[..50.min(user.password_hash.len())]);
-    
-    let parsed_hash = PasswordHash::new(&user.password_hash)
-        .map_err(|e| {
-            println!("DEBUG: Failed to parse password hash: {:?}", e);
-            ApiError::InternalServerError
-        })?;
-    
+    println!(
+        "DEBUG: Attempting to verify password for user: {}",
+        user.email
+    );
+    println!(
+        "DEBUG: Password hash from DB: {}",
+        &user.password_hash[..50.min(user.password_hash.len())]
+    );
+
+    let parsed_hash = PasswordHash::new(&user.password_hash).map_err(|e| {
+        println!("DEBUG: Failed to parse password hash: {:?}", e);
+        ApiError::InternalServerError
+    })?;
+
     let argon2 = Argon2::default();
     argon2
         .verify_password(req.password.as_bytes(), &parsed_hash)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:290:
             println!("DEBUG: Password verification failed: {:?}", e);
             ApiError::Unauthorized
         })?;
-    
+
     // 获取用户的family_id（如果有）
-    let family_row = sqlx::query(
-        "SELECT family_id FROM family_members WHERE user_id = $1 LIMIT 1"
-    )
-    .bind(user.id)
-    .fetch_optional(&pool)
-    .await
-    .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+    let family_row = sqlx::query("SELECT family_id FROM family_members WHERE user_id = $1 LIMIT 1")
+        .bind(user.id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+
     let family_id = if let Some(row) = family_row {
         row.try_get("family_id").ok()
     } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:306:
         None
     };
-    
+
     // 更新最后登录时间
-    sqlx::query(
-        "UPDATE users SET last_login_at = NOW() WHERE id = $1"
-    )
-    .bind(user.id)
-    .execute(&pool)
-    .await
-    .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+    sqlx::query("UPDATE users SET last_login_at = NOW() WHERE id = $1")
+        .bind(user.id)
+        .execute(&pool)
+        .await
+        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+
     // 生成JWT令牌
     let claims = Claims::new(user.id, user.email.clone(), family_id);
     let token = claims.to_token()?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:321:
-    
+
     // 构建用户响应对象以兼容Flutter
     let user_response = serde_json::json!({
         "id": user.id.to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:332:
         "created_at": user.created_at.to_rfc3339(),
         "updated_at": user.updated_at.to_rfc3339(),
     });
-    
+
     // 返回兼容Flutter的响应格式 - 包含完整的user对象
     let response = serde_json::json!({
         "success": true,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:339:
         "token": token,
         "user": user_response,
         "user_id": user.id,
-        "email": user.email, 
+        "email": user.email,
         "family_id": family_id,
     });
-    
+
     Ok(Json(response))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:352:
     State(pool): State<PgPool>,
 ) -> ApiResult<Json<LoginResponse>> {
     let user_id = claims.user_id()?;
-    
+
     // 验证用户是否仍然有效
     let user = sqlx::query("SELECT email, current_family_id, is_active FROM users WHERE id = $1")
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:360:
         .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?
         .ok_or(ApiError::Unauthorized)?;
-    
+
     use sqlx::Row;
-    
+
     let is_active: bool = user.try_get("is_active").unwrap_or(false);
     if !is_active {
         return Err(ApiError::Forbidden);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:369:
     }
-    
-    let email: String = user.try_get("email").map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+
+    let email: String = user
+        .try_get("email")
+        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
     let family_id: Option<Uuid> = user.try_get("current_family_id").ok();
-    
+
     // 生成新令牌
     let new_claims = Claims::new(user_id, email.clone(), family_id);
     let token = new_claims.to_token()?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:377:
-    
+
     Ok(Json(LoginResponse {
         token,
         user_id,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:389:
     State(pool): State<PgPool>,
 ) -> ApiResult<Json<UserProfile>> {
     let user_id = claims.user_id()?;
-    
+
     let user = sqlx::query(
         r#"
         SELECT u.*, f.name as family_name
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:396:
         FROM users u
         LEFT JOIN families f ON u.current_family_id = f.id
         WHERE u.id = $1
-        "#
+        "#,
     )
     .bind(user_id)
     .fetch_optional(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:403:
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?
     .ok_or(ApiError::NotFound("User not found".to_string()))?;
-    
+
     use sqlx::Row;
-    
+
     Ok(Json(UserProfile {
-        id: user.try_get("id").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
-        email: user.try_get("email").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
-        name: user.try_get("full_name").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        id: user
+            .try_get("id")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        email: user
+            .try_get("email")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        name: user
+            .try_get("full_name")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
         family_id: user.try_get("current_family_id").ok(),
         family_name: user.try_get("family_name").ok(),
         is_verified: user.try_get("email_verified").unwrap_or(false),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:416:
-        created_at: user.try_get("created_at").map_err(|e| ApiError::DatabaseError(e.to_string()))?,
+        created_at: user
+            .try_get("created_at")
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?,
     }))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:424:
     Json(req): Json<UpdateUserRequest>,
 ) -> ApiResult<StatusCode> {
     let user_id = claims.user_id()?;
-    
+
     if let Some(name) = req.name {
-        sqlx::query(
-            "UPDATE users SET full_name = $1, updated_at = NOW() WHERE id = $2"
-        )
-        .bind(name)
-        .bind(user_id)
-        .execute(&pool)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        sqlx::query("UPDATE users SET full_name = $1, updated_at = NOW() WHERE id = $2")
+            .bind(name)
+            .bind(user_id)
+            .execute(&pool)
+            .await
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
     }
-    
+
     Ok(StatusCode::OK)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:446:
     Json(req): Json<ChangePasswordRequest>,
 ) -> ApiResult<StatusCode> {
     let user_id = claims.user_id()?;
-    
+
     // 获取当前密码哈希
     let row = sqlx::query("SELECT password_hash FROM users WHERE id = $1")
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:453:
         .fetch_one(&pool)
         .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     use sqlx::Row;
-    let current_hash: String = row.try_get("password_hash")
+    let current_hash: String = row
+        .try_get("password_hash")
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 验证旧密码
-    let parsed_hash = PasswordHash::new(&current_hash)
-        .map_err(|_| ApiError::InternalServerError)?;
-    
+    let parsed_hash =
+        PasswordHash::new(&current_hash).map_err(|_| ApiError::InternalServerError)?;
+
     let argon2 = Argon2::default();
     argon2
         .verify_password(req.old_password.as_bytes(), &parsed_hash)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:468:
         .map_err(|_| ApiError::Unauthorized)?;
-    
+
     // 生成新密码哈希
     let salt = SaltString::generate(&mut OsRng);
     let new_hash = argon2
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:473:
         .hash_password(req.new_password.as_bytes(), &salt)
         .map_err(|_| ApiError::InternalServerError)?
         .to_string();
-    
+
     // 更新密码
-    sqlx::query(
-        "UPDATE users SET password_hash = $1, updated_at = NOW() WHERE id = $2"
-    )
-    .bind(new_hash)
-    .bind(user_id)
-    .execute(&pool)
-    .await
-    .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+    sqlx::query("UPDATE users SET password_hash = $1, updated_at = NOW() WHERE id = $2")
+        .bind(new_hash)
+        .bind(user_id)
+        .execute(&pool)
+        .await
+        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+
     Ok(StatusCode::OK)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:492:
     State(pool): State<PgPool>,
     Extension(user_id): Extension<Uuid>,
 ) -> ApiResult<Json<crate::services::auth_service::UserContext>> {
-    
     let auth_service = AuthService::new(pool);
-    
+
     match auth_service.get_user_context(user_id).await {
         Ok(context) => Ok(Json(context)),
-        Err(_e) => {
-            Err(ApiError::InternalServerError)
-        }
+        Err(_e) => Err(ApiError::InternalServerError),
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:545:
         Ok(id) => id,
         Err(_) => return Err(StatusCode::UNAUTHORIZED),
     };
-    
+
     if !request.confirm_delete {
         return Ok(Json(ApiResponse::<()> {
             success: false,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:558:
             timestamp: chrono::Utc::now(),
         }));
     }
-    
+
     // Verify the code first
     if let Some(redis_conn) = redis {
         let verification_service = crate::services::VerificationService::new(Some(redis_conn));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:565:
-        
-        match verification_service.verify_code(
-            &user_id.to_string(),
-            "delete_user",
-            &request.verification_code
-        ).await {
-            Ok(true) => {
-                // Code is valid, proceed with account deletion
-            let mut tx = pool.begin().await.map_err(|e| {
-                eprintln!("Database error: {:?}", e);
-                StatusCode::INTERNAL_SERVER_ERROR
-            })?;
-            
-            // Check if user owns any families
-            let owned_families: i64 = sqlx::query_scalar(
-                "SELECT COUNT(*) FROM family_members WHERE user_id = $1 AND role = 'owner'"
+
+        match verification_service
+            .verify_code(
+                &user_id.to_string(),
+                "delete_user",
+                &request.verification_code,
             )
-            .bind(user_id)
-            .fetch_one(&mut *tx)
             .await
-            .map_err(|e| {
-                eprintln!("Database error: {:?}", e);
-                StatusCode::INTERNAL_SERVER_ERROR
-            })?;
-            
-            if owned_families > 0 {
-                return Ok(Json(ApiResponse::<()> {
-                    success: false,
-                    data: None,
-                    error: Some(FamilyApiError {
-                        code: "OWNS_FAMILIES".to_string(),
-                        message: "请先转让或删除您拥有的家庭后再删除账户".to_string(),
-                        details: None,
-                    }),
-                    timestamp: chrono::Utc::now(),
-                }));
-            }
-            
-            // Remove user from all families
-            sqlx::query("DELETE FROM family_members WHERE user_id = $1")
-                .bind(user_id)
-                .execute(&mut *tx)
-                .await
-                .map_err(|e| {
+        {
+            Ok(true) => {
+                // Code is valid, proceed with account deletion
+                let mut tx = pool.begin().await.map_err(|e| {
                     eprintln!("Database error: {:?}", e);
                     StatusCode::INTERNAL_SERVER_ERROR
                 })?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:612:
-            
-            // Delete user account
-            sqlx::query("DELETE FROM users WHERE id = $1")
+
+                // Check if user owns any families
+                let owned_families: i64 = sqlx::query_scalar(
+                    "SELECT COUNT(*) FROM family_members WHERE user_id = $1 AND role = 'owner'",
+                )
                 .bind(user_id)
-                .execute(&mut *tx)
+                .fetch_one(&mut *tx)
                 .await
                 .map_err(|e| {
                     eprintln!("Database error: {:?}", e);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:620:
                     StatusCode::INTERNAL_SERVER_ERROR
                 })?;
-            
-            tx.commit().await.map_err(|e| {
-                eprintln!("Database error: {:?}", e);
-                StatusCode::INTERNAL_SERVER_ERROR
-            })?;
-            
-            Ok(Json(ApiResponse::success(())))
+
+                if owned_families > 0 {
+                    return Ok(Json(ApiResponse::<()> {
+                        success: false,
+                        data: None,
+                        error: Some(FamilyApiError {
+                            code: "OWNS_FAMILIES".to_string(),
+                            message: "请先转让或删除您拥有的家庭后再删除账户".to_string(),
+                            details: None,
+                        }),
+                        timestamp: chrono::Utc::now(),
+                    }));
+                }
+
+                // Remove user from all families
+                sqlx::query("DELETE FROM family_members WHERE user_id = $1")
+                    .bind(user_id)
+                    .execute(&mut *tx)
+                    .await
+                    .map_err(|e| {
+                        eprintln!("Database error: {:?}", e);
+                        StatusCode::INTERNAL_SERVER_ERROR
+                    })?;
+
+                // Delete user account
+                sqlx::query("DELETE FROM users WHERE id = $1")
+                    .bind(user_id)
+                    .execute(&mut *tx)
+                    .await
+                    .map_err(|e| {
+                        eprintln!("Database error: {:?}", e);
+                        StatusCode::INTERNAL_SERVER_ERROR
+                    })?;
+
+                tx.commit().await.map_err(|e| {
+                    eprintln!("Database error: {:?}", e);
+                    StatusCode::INTERNAL_SERVER_ERROR
+                })?;
+
+                Ok(Json(ApiResponse::success(())))
             }
-            Ok(false) => {
-                Ok(Json(ApiResponse::<()> {
-                    success: false,
-                    data: None,
-                    error: Some(FamilyApiError {
-                        code: "INVALID_VERIFICATION_CODE".to_string(),
-                        message: "验证码错误或已过期".to_string(),
-                        details: None,
-                    }),
-                    timestamp: chrono::Utc::now(),
-                }))
-            }
-            Err(_) => {
-                Ok(Json(ApiResponse::<()> {
-                    success: false,
-                    data: None,
-                    error: Some(FamilyApiError {
-                        code: "VERIFICATION_SERVICE_ERROR".to_string(),
-                        message: "验证码服务暂时不可用".to_string(),
-                        details: None,
-                    }),
-                    timestamp: chrono::Utc::now(),
-                }))
-            }
+            Ok(false) => Ok(Json(ApiResponse::<()> {
+                success: false,
+                data: None,
+                error: Some(FamilyApiError {
+                    code: "INVALID_VERIFICATION_CODE".to_string(),
+                    message: "验证码错误或已过期".to_string(),
+                    details: None,
+                }),
+                timestamp: chrono::Utc::now(),
+            })),
+            Err(_) => Ok(Json(ApiResponse::<()> {
+                success: false,
+                data: None,
+                error: Some(FamilyApiError {
+                    code: "VERIFICATION_SERVICE_ERROR".to_string(),
+                    message: "验证码服务暂时不可用".to_string(),
+                    details: None,
+                }),
+                timestamp: chrono::Utc::now(),
+            })),
         }
     } else {
         // Redis not available, skip verification in development
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:659:
             eprintln!("Database error: {:?}", e);
             StatusCode::INTERNAL_SERVER_ERROR
         })?;
-        
+
         // Check if user owns any families
         let owned_families: i64 = sqlx::query_scalar(
-            "SELECT COUNT(*) FROM family_members WHERE user_id = $1 AND role = 'owner'"
+            "SELECT COUNT(*) FROM family_members WHERE user_id = $1 AND role = 'owner'",
         )
         .bind(user_id)
         .fetch_one(&mut *tx)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:671:
             eprintln!("Database error: {:?}", e);
             StatusCode::INTERNAL_SERVER_ERROR
         })?;
-        
+
         if owned_families > 0 {
             return Ok(Json(ApiResponse::<()> {
                 success: false,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:684:
                 timestamp: chrono::Utc::now(),
             }));
         }
-        
+
         // Delete user's data
         sqlx::query("DELETE FROM users WHERE id = $1")
             .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:694:
                 eprintln!("Database error: {:?}", e);
                 StatusCode::INTERNAL_SERVER_ERROR
             })?;
-        
+
         tx.commit().await.map_err(|e| {
             eprintln!("Database error: {:?}", e);
             StatusCode::INTERNAL_SERVER_ERROR
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:701:
         })?;
-        
+
         Ok(Json(ApiResponse::success(())))
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:720:
     Json(req): Json<UpdateAvatarRequest>,
 ) -> ApiResult<Json<ApiResponse<()>>> {
     let user_id = claims.user_id()?;
-    
+
     // Update avatar fields in database
     sqlx::query(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:731:
             avatar_background = $4,
             updated_at = NOW()
         WHERE id = $1
-        "#
+        "#,
     )
     .bind(user_id)
     .bind(&req.avatar_type)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/auth.rs:740:
     .execute(&pool)
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     Ok(Json(ApiResponse::success(())))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/banks.rs:22:
 ) -> ApiResult<Json<Vec<Bank>>> {
     let mut query = QueryBuilder::new(
         "SELECT id, code, name, name_cn, name_en, icon_filename, is_crypto
-         FROM banks WHERE is_active = true"
+         FROM banks WHERE is_active = true",
     );
 
     if let Some(search) = params.search {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:1:
 //! 用户分类管理 API（最小可用版本）
-use axum::{extract::{Path, Query, State}, http::StatusCode, response::Json};
+use axum::{
+    extract::{Path, Query, State},
+    http::StatusCode,
+    response::Json,
+};
 use serde::{Deserialize, Serialize};
 use sqlx::{PgPool, Row};
 use uuid::Uuid;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:46:
 }
 
 #[derive(Debug, Deserialize)]
-pub struct ReorderItem { pub id: Uuid, pub position: i32 }
+pub struct ReorderItem {
+    pub id: Uuid,
+    pub position: i32,
+}
 
 #[derive(Debug, Deserialize)]
-pub struct ReorderRequest { pub items: Vec<ReorderItem> }
+pub struct ReorderRequest {
+    pub items: Vec<ReorderItem>,
+}
 
 pub async fn list_categories(
     claims: Claims,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:56:
     State(pool): State<PgPool>,
     Query(params): Query<ListParams>,
-)-> Result<Json<Vec<CategoryDto>>, StatusCode> {
+) -> Result<Json<Vec<CategoryDto>>, StatusCode> {
     let _user_id = claims.user_id().map_err(|_| StatusCode::UNAUTHORIZED)?;
 
     let mut query = sqlx::QueryBuilder::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:62:
         "SELECT id, ledger_id, name, color, icon, classification, parent_id, position, usage_count, last_used_at \
          FROM categories WHERE is_deleted = false"
     );
-    if let Some(ledger) = params.ledger_id { query.push(" AND ledger_id = ").push_bind(ledger); }
-    if let Some(classif) = params.classification { query.push(" AND classification = ").push_bind(classif); }
+    if let Some(ledger) = params.ledger_id {
+        query.push(" AND ledger_id = ").push_bind(ledger);
+    }
+    if let Some(classif) = params.classification {
+        query.push(" AND classification = ").push_bind(classif);
+    }
     query.push(" ORDER BY parent_id NULLS FIRST, position ASC, LOWER(name)");
 
-    let rows = query.build().fetch_all(&pool).await.map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
+    let rows = query
+        .build()
+        .fetch_all(&pool)
+        .await
+        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
     let mut items = Vec::with_capacity(rows.len());
     for r in rows {
-        items.push(CategoryDto{
+        items.push(CategoryDto {
             id: r.get("id"),
             ledger_id: r.get("ledger_id"),
             name: r.get("name"),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:106:
     .bind(req.parent_id)
     .fetch_one(&pool).await.map_err(|e|{ eprintln!("create_category err: {:?}", e); StatusCode::BAD_REQUEST })?;
 
-    Ok(Json(CategoryDto{
-        id: rec.get("id"), ledger_id: rec.get("ledger_id"), name: rec.get("name"),
-        color: rec.try_get("color").ok(), icon: rec.try_get("icon").ok(), classification: rec.get("classification"),
-        parent_id: rec.try_get("parent_id").ok(), position: rec.try_get("position").unwrap_or(0),
-        usage_count: rec.try_get("usage_count").unwrap_or(0), last_used_at: rec.try_get("last_used_at").ok(),
+    Ok(Json(CategoryDto {
+        id: rec.get("id"),
+        ledger_id: rec.get("ledger_id"),
+        name: rec.get("name"),
+        color: rec.try_get("color").ok(),
+        icon: rec.try_get("icon").ok(),
+        classification: rec.get("classification"),
+        parent_id: rec.try_get("parent_id").ok(),
+        position: rec.try_get("position").unwrap_or(0),
+        usage_count: rec.try_get("usage_count").unwrap_or(0),
+        last_used_at: rec.try_get("last_used_at").ok(),
     }))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:123:
     let _user_id = claims.user_id().map_err(|_| StatusCode::UNAUTHORIZED)?;
 
     let mut qb = sqlx::QueryBuilder::new("UPDATE categories SET updated_at = NOW()");
-    if let Some(name) = req.name { qb.push(", name = ").push_bind(name); }
-    if let Some(color) = req.color { qb.push(", color = ").push_bind(color); }
-    if let Some(icon) = req.icon { qb.push(", icon = ").push_bind(icon); }
-    if let Some(cls) = req.classification { qb.push(", classification = ").push_bind(cls); }
-    if let Some(pid) = req.parent_id { qb.push(", parent_id = ").push_bind(pid); }
+    if let Some(name) = req.name {
+        qb.push(", name = ").push_bind(name);
+    }
+    if let Some(color) = req.color {
+        qb.push(", color = ").push_bind(color);
+    }
+    if let Some(icon) = req.icon {
+        qb.push(", icon = ").push_bind(icon);
+    }
+    if let Some(cls) = req.classification {
+        qb.push(", classification = ").push_bind(cls);
+    }
+    if let Some(pid) = req.parent_id {
+        qb.push(", parent_id = ").push_bind(pid);
+    }
     qb.push(" WHERE id = ").push_bind(id);
-    let res = qb.build().execute(&pool).await.map_err(|_| StatusCode::BAD_REQUEST)?;
-    if res.rows_affected() == 0 { return Err(StatusCode::NOT_FOUND); }
+    let res = qb
+        .build()
+        .execute(&pool)
+        .await
+        .map_err(|_| StatusCode::BAD_REQUEST)?;
+    if res.rows_affected() == 0 {
+        return Err(StatusCode::NOT_FOUND);
+    }
     Ok(StatusCode::NO_CONTENT)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:142:
     let _user_id = claims.user_id().map_err(|_| StatusCode::UNAUTHORIZED)?;
     // MVP: forbid deletion if used
     let in_use: (i64,) = sqlx::query_as("SELECT COUNT(1) FROM transactions WHERE category_id = $1")
-        .bind(id).fetch_one(&pool).await.map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
-    if in_use.0 > 0 { return Err(StatusCode::CONFLICT); }
+        .bind(id)
+        .fetch_one(&pool)
+        .await
+        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
+    if in_use.0 > 0 {
+        return Err(StatusCode::CONFLICT);
+    }
     let res = sqlx::query("UPDATE categories SET is_deleted=true, deleted_at=NOW() WHERE id=$1")
-        .bind(id).execute(&pool).await.map_err(|_| StatusCode::BAD_REQUEST)?;
-    if res.rows_affected() == 0 { return Err(StatusCode::NOT_FOUND); }
+        .bind(id)
+        .execute(&pool)
+        .await
+        .map_err(|_| StatusCode::BAD_REQUEST)?;
+    if res.rows_affected() == 0 {
+        return Err(StatusCode::NOT_FOUND);
+    }
     Ok(StatusCode::NO_CONTENT)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:156:
     Json(req): Json<ReorderRequest>,
 ) -> Result<StatusCode, StatusCode> {
     let _user_id = claims.user_id().map_err(|_| StatusCode::UNAUTHORIZED)?;
-    let mut tx = pool.begin().await.map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
-    for item in req.items { sqlx::query("UPDATE categories SET position=$1, updated_at=NOW() WHERE id=$2").bind(item.position).bind(item.id).execute(&mut *tx).await.map_err(|_| StatusCode::BAD_REQUEST)?; }
-    tx.commit().await.map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
+    let mut tx = pool
+        .begin()
+        .await
+        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
+    for item in req.items {
+        sqlx::query("UPDATE categories SET position=$1, updated_at=NOW() WHERE id=$2")
+            .bind(item.position)
+            .bind(item.id)
+            .execute(&mut *tx)
+            .await
+            .map_err(|_| StatusCode::BAD_REQUEST)?;
+    }
+    tx.commit()
+        .await
+        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
     Ok(StatusCode::NO_CONTENT)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:165:
 #[derive(Debug, Deserialize)]
-pub struct ImportTemplateRequest { pub ledger_id: Uuid, pub template_id: Uuid }
+pub struct ImportTemplateRequest {
+    pub ledger_id: Uuid,
+    pub template_id: Uuid,
+}
 
 pub async fn import_template(
     claims: Claims,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:195:
     .bind::<String>(tpl.get("version"))
     .fetch_one(&pool).await.map_err(|e|{ eprintln!("import_template err: {:?}", e); StatusCode::BAD_REQUEST })?;
 
-    Ok(Json(CategoryDto{
-        id: rec.get("id"), ledger_id: rec.get("ledger_id"), name: rec.get("name"),
-        color: rec.try_get("color").ok(), icon: rec.try_get("icon").ok(), classification: rec.get("classification"),
-        parent_id: rec.try_get("parent_id").ok(), position: rec.try_get("position").unwrap_or(0),
-        usage_count: rec.try_get("usage_count").unwrap_or(0), last_used_at: rec.try_get("last_used_at").ok(),
+    Ok(Json(CategoryDto {
+        id: rec.get("id"),
+        ledger_id: rec.get("ledger_id"),
+        name: rec.get("name"),
+        color: rec.try_get("color").ok(),
+        icon: rec.try_get("icon").ok(),
+        classification: rec.get("classification"),
+        parent_id: rec.try_get("parent_id").ok(),
+        position: rec.try_get("position").unwrap_or(0),
+        usage_count: rec.try_get("usage_count").unwrap_or(0),
+        last_used_at: rec.try_get("last_used_at").ok(),
     }))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:250:
 
 #[derive(Debug, Serialize)]
 #[serde(rename_all = "snake_case")]
-pub enum ImportActionKind { Imported, Updated, Renamed, Skipped, Failed }
+pub enum ImportActionKind {
+    Imported,
+    Updated,
+    Renamed,
+    Skipped,
+    Failed,
+}
 
 #[derive(Debug, Serialize)]
 pub struct ImportActionDetail {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:288:
         items = list;
     } else if let Some(ids) = req.template_ids.clone() {
         // Map template_ids to items without overrides
-        items = ids.into_iter().map(|id| ImportItem { template_id: id, overrides: None }).collect();
+        items = ids
+            .into_iter()
+            .map(|id| ImportItem {
+                template_id: id,
+                overrides: None,
+            })
+            .collect();
     }
-    if items.is_empty() { return Err(StatusCode::BAD_REQUEST); }
+    if items.is_empty() {
+        return Err(StatusCode::BAD_REQUEST);
+    }
 
     // Resolve conflict strategy
     let mut strategy = req.on_conflict.unwrap_or_else(|| "skip".to_string());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:297:
     if let Some(opts) = &req.options {
         if let Some(skip) = opts.get("skip_existing").and_then(|v| v.as_bool()) {
-            if skip { strategy = "skip".to_string(); }
+            if skip {
+                strategy = "skip".to_string();
+            }
         }
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:319:
         };
 
         // Resolve fields with overrides
-        let mut name: String = it.overrides.as_ref().and_then(|o| o.name.clone()).unwrap_or_else(|| tpl.get::<String, _>("name"));
-        let color: Option<String> = it.overrides.as_ref().and_then(|o| o.color.clone()).or_else(|| tpl.try_get("color").ok());
-        let icon: Option<String> = it.overrides.as_ref().and_then(|o| o.icon.clone()).or_else(|| tpl.try_get("icon").ok());
-        let classification: String = it.overrides.as_ref().and_then(|o| o.classification.clone()).unwrap_or_else(|| tpl.get::<String, _>("classification"));
+        let mut name: String = it
+            .overrides
+            .as_ref()
+            .and_then(|o| o.name.clone())
+            .unwrap_or_else(|| tpl.get::<String, _>("name"));
+        let color: Option<String> = it
+            .overrides
+            .as_ref()
+            .and_then(|o| o.color.clone())
+            .or_else(|| tpl.try_get("color").ok());
+        let icon: Option<String> = it
+            .overrides
+            .as_ref()
+            .and_then(|o| o.icon.clone())
+            .or_else(|| tpl.try_get("icon").ok());
+        let classification: String = it
+            .overrides
+            .as_ref()
+            .and_then(|o| o.classification.clone())
+            .unwrap_or_else(|| tpl.get::<String, _>("classification"));
         let parent_id: Option<Uuid> = it.overrides.as_ref().and_then(|o| o.parent_id);
         let template_version: String = tpl.get::<String, _>("version");
         let template_id: Uuid = tpl.get::<Uuid, _>("id");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:335:
 
         if let Some((existing_id,)) = exists {
             match strategy.as_str() {
-                "skip" => { skipped += 1; details.push(ImportActionDetail{ template_id, action: ImportActionKind::Skipped, original_name: name.clone(), final_name: Some(name.clone()), category_id: Some(existing_id), reason: Some("duplicate_name".into()), predicted_name: None, existing_category_id: Some(existing_id), existing_category_name: None, final_classification: Some(classification.clone()), final_parent_id: parent_id }); continue 'outer; }
+                "skip" => {
+                    skipped += 1;
+                    details.push(ImportActionDetail {
+                        template_id,
+                        action: ImportActionKind::Skipped,
+                        original_name: name.clone(),
+                        final_name: Some(name.clone()),
+                        category_id: Some(existing_id),
+                        reason: Some("duplicate_name".into()),
+                        predicted_name: None,
+                        existing_category_id: Some(existing_id),
+                        existing_category_name: None,
+                        final_classification: Some(classification.clone()),
+                        final_parent_id: parent_id,
+                    });
+                    continue 'outer;
+                }
                 "update" => {
                     // Update existing entry fields
                     if !dry_run {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:351:
                         let row = sqlx::query(
                             "SELECT id, ledger_id, name, color, icon, classification, parent_id, position, usage_count, last_used_at FROM categories WHERE id=$1"
                         ).bind(existing_id).fetch_one(&pool).await.map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
-                        result_items.push(CategoryDto{
-                            id: row.get("id"), ledger_id: row.get("ledger_id"), name: row.get("name"),
-                            color: row.try_get("color").ok(), icon: row.try_get("icon").ok(), classification: row.get("classification"),
-                            parent_id: row.try_get("parent_id").ok(), position: row.try_get("position").unwrap_or(0),
-                            usage_count: row.try_get("usage_count").unwrap_or(0), last_used_at: row.try_get("last_used_at").ok(),
+                        result_items.push(CategoryDto {
+                            id: row.get("id"),
+                            ledger_id: row.get("ledger_id"),
+                            name: row.get("name"),
+                            color: row.try_get("color").ok(),
+                            icon: row.try_get("icon").ok(),
+                            classification: row.get("classification"),
+                            parent_id: row.try_get("parent_id").ok(),
+                            position: row.try_get("position").unwrap_or(0),
+                            usage_count: row.try_get("usage_count").unwrap_or(0),
+                            last_used_at: row.try_get("last_used_at").ok(),
                         });
                     }
                     imported += 1; // treat update as success
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:362:
-                    details.push(ImportActionDetail{ template_id, action: ImportActionKind::Updated, original_name: name.clone(), final_name: Some(name.clone()), category_id: Some(existing_id), reason: None, predicted_name: None, existing_category_id: Some(existing_id), existing_category_name: None, final_classification: Some(classification.clone()), final_parent_id: parent_id });
+                    details.push(ImportActionDetail {
+                        template_id,
+                        action: ImportActionKind::Updated,
+                        original_name: name.clone(),
+                        final_name: Some(name.clone()),
+                        category_id: Some(existing_id),
+                        reason: None,
+                        predicted_name: None,
+                        existing_category_id: Some(existing_id),
+                        existing_category_name: None,
+                        final_classification: Some(classification.clone()),
+                        final_parent_id: parent_id,
+                    });
                     continue 'outer;
                 }
                 "rename" => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:371:
                         let taken: Option<(Uuid,)> = sqlx::query_as(
                             "SELECT id FROM categories WHERE ledger_id=$1 AND LOWER(name)=LOWER($2) AND is_deleted=false LIMIT 1"
                         ).bind(req.ledger_id).bind(&candidate).fetch_optional(&pool).await.map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
-                        if taken.is_none() { name = candidate; break; }
+                        if taken.is_none() {
+                            name = candidate;
+                            break;
+                        }
                         suffix += 1;
-                        if suffix > 100 { failed += 1; details.push(ImportActionDetail{ template_id, action: ImportActionKind::Failed, original_name: base.clone(), final_name: None, category_id: None, reason: Some("rename_exhausted".into()), predicted_name: None, existing_category_id: Some(existing_id), existing_category_name: None, final_classification: Some(classification.clone()), final_parent_id: parent_id }); continue 'outer; }
+                        if suffix > 100 {
+                            failed += 1;
+                            details.push(ImportActionDetail {
+                                template_id,
+                                action: ImportActionKind::Failed,
+                                original_name: base.clone(),
+                                final_name: None,
+                                category_id: None,
+                                reason: Some("rename_exhausted".into()),
+                                predicted_name: None,
+                                existing_category_id: Some(existing_id),
+                                existing_category_name: None,
+                                final_classification: Some(classification.clone()),
+                                final_parent_id: parent_id,
+                            });
+                            continue 'outer;
+                        }
                     }
                 }
-                _ => { skipped += 1; continue 'outer; }
+                _ => {
+                    skipped += 1;
+                    continue 'outer;
+                }
             }
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:390:
                    VALUES ($1,$2,$3,$4,$5,$6,$7,
                            COALESCE((SELECT COALESCE(MAX(position),-1)+1 FROM categories WHERE ledger_id=$2 AND parent_id IS NOT DISTINCT FROM $7),0),
                            0,'system',$8,$9)
-                   RETURNING id, ledger_id, name, color, icon, classification, parent_id, position, usage_count, last_used_at"#
+                   RETURNING id, ledger_id, name, color, icon, classification, parent_id, position, usage_count, last_used_at"#,
             ))
         };
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:406:
                     .bind(parent_id)
                     .bind(template_id)
                     .bind(template_version)
-                    .fetch_one(&pool).await
-            },
-            Err(e) => Err(e)
+                    .fetch_one(&pool)
+                    .await
+            }
+            Err(e) => Err(e),
         };
 
         match query_result {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:415:
             Ok(row) => {
-                result_items.push(CategoryDto{
-                    id: row.get("id"), ledger_id: row.get("ledger_id"), name: row.get("name"),
-                    color: row.try_get("color").ok(), icon: row.try_get("icon").ok(), classification: row.get("classification"),
-                    parent_id: row.try_get("parent_id").ok(), position: row.try_get("position").unwrap_or(0),
-                    usage_count: row.try_get("usage_count").unwrap_or(0), last_used_at: row.try_get("last_used_at").ok(),
+                result_items.push(CategoryDto {
+                    id: row.get("id"),
+                    ledger_id: row.get("ledger_id"),
+                    name: row.get("name"),
+                    color: row.try_get("color").ok(),
+                    icon: row.try_get("icon").ok(),
+                    classification: row.get("classification"),
+                    parent_id: row.try_get("parent_id").ok(),
+                    position: row.try_get("position").unwrap_or(0),
+                    usage_count: row.try_get("usage_count").unwrap_or(0),
+                    last_used_at: row.try_get("last_used_at").ok(),
                 });
                 imported += 1;
-                details.push(ImportActionDetail{ template_id, action: if exists.is_some() { ImportActionKind::Renamed } else { ImportActionKind::Imported }, original_name: tpl.get::<String,_>("name"), final_name: Some(name.clone()), category_id: Some(row.get("id")), reason: None, predicted_name: None, existing_category_id: exists.map(|t| t.0), existing_category_name: None, final_classification: Some(classification.clone()), final_parent_id: parent_id });
+                details.push(ImportActionDetail {
+                    template_id,
+                    action: if exists.is_some() {
+                        ImportActionKind::Renamed
+                    } else {
+                        ImportActionKind::Imported
+                    },
+                    original_name: tpl.get::<String, _>("name"),
+                    final_name: Some(name.clone()),
+                    category_id: Some(row.get("id")),
+                    reason: None,
+                    predicted_name: None,
+                    existing_category_id: exists.map(|t| t.0),
+                    existing_category_name: None,
+                    final_classification: Some(classification.clone()),
+                    final_parent_id: parent_id,
+                });
             }
             Err(e) => {
                 if dry_run {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:427:
                     imported += 1;
-                    details.push(ImportActionDetail{ template_id, action: if exists.is_some() { ImportActionKind::Renamed } else { ImportActionKind::Imported }, original_name: tpl.get::<String,_>("name"), final_name: Some(name.clone()), category_id: None, reason: None, predicted_name: if exists.is_some() { Some(name.clone()) } else { None }, existing_category_id: exists.map(|t| t.0), existing_category_name: None, final_classification: Some(classification.clone()), final_parent_id: parent_id });
+                    details.push(ImportActionDetail {
+                        template_id,
+                        action: if exists.is_some() {
+                            ImportActionKind::Renamed
+                        } else {
+                            ImportActionKind::Imported
+                        },
+                        original_name: tpl.get::<String, _>("name"),
+                        final_name: Some(name.clone()),
+                        category_id: None,
+                        reason: None,
+                        predicted_name: if exists.is_some() {
+                            Some(name.clone())
+                        } else {
+                            None
+                        },
+                        existing_category_id: exists.map(|t| t.0),
+                        existing_category_name: None,
+                        final_classification: Some(classification.clone()),
+                        final_parent_id: parent_id,
+                    });
                 } else {
                     eprintln!("batch_import insert error: {:?}", e);
                     failed += 1;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:432:
-                    details.push(ImportActionDetail{ template_id, action: ImportActionKind::Failed, original_name: name.clone(), final_name: None, category_id: None, reason: Some("insert_error".into()), predicted_name: None, existing_category_id: exists.map(|t| t.0), existing_category_name: None, final_classification: Some(classification.clone()), final_parent_id: parent_id });
+                    details.push(ImportActionDetail {
+                        template_id,
+                        action: ImportActionKind::Failed,
+                        original_name: name.clone(),
+                        final_name: None,
+                        category_id: None,
+                        reason: Some("insert_error".into()),
+                        predicted_name: None,
+                        existing_category_id: exists.map(|t| t.0),
+                        existing_category_name: None,
+                        final_classification: Some(classification.clone()),
+                        final_parent_id: parent_id,
+                    });
                 }
             }
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/category_handler.rs:436:
     }
 
-    Ok(Json(BatchImportResult{ imported, skipped, failed, categories: result_items, details }))
+    Ok(Json(BatchImportResult {
+        imported,
+        skipped,
+        failed,
+        categories: result_items,
+        details,
+    }))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:1:
+use axum::body::Body;
 use axum::{
     extract::{Query, State},
-    response::{IntoResponse, Json, Response},
     http::{HeaderMap, HeaderValue, StatusCode},
+    response::{IntoResponse, Json, Response},
 };
-use axum::body::Body;
 use chrono::NaiveDate;
 use rust_decimal::Decimal;
 use serde::{Deserialize, Serialize};
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:11:
 // use uuid::Uuid; // 未使用
 use std::collections::HashMap;
 
+use super::family_handler::ApiResponse;
 use crate::auth::Claims;
 use crate::error::{ApiError, ApiResult};
-use crate::services::{CurrencyService, ExchangeRate, FamilyCurrencySettings};
-use crate::services::currency_service::{UpdateCurrencySettingsRequest, AddExchangeRateRequest, CurrencyPreference};
+use crate::services::currency_service::{
+    AddExchangeRateRequest, CurrencyPreference, UpdateCurrencySettingsRequest,
+};
 use crate::services::currency_service::{ClearManualRateRequest, ClearManualRatesBatchRequest};
-use super::family_handler::ApiResponse;
+use crate::services::{CurrencyService, ExchangeRate, FamilyCurrencySettings};
 
 /// 获取所有支持的货币
 pub async fn get_supported_currencies(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:33:
     .map_err(|_| ApiError::InternalServerError)?;
 
     let mut current_etag = etag_row.max_ts.unwrap_or_else(|| "0".to_string());
-    if current_etag.is_empty() { current_etag = "0".to_string(); }
+    if current_etag.is_empty() {
+        current_etag = "0".to_string();
+    }
     let current_etag_value = format!("W/\"curr-{}\"", current_etag);
 
     if let Some(if_none_match) = headers.get("if-none-match").and_then(|v| v.to_str().ok()) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:55:
 
     let body = Json(ApiResponse::success(currencies));
     let mut resp = body.into_response();
-    resp.headers_mut().insert("ETag", HeaderValue::from_str(&current_etag_value).unwrap());
+    resp.headers_mut()
+        .insert("ETag", HeaderValue::from_str(&current_etag_value).unwrap());
     Ok(resp)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:66:
 ) -> ApiResult<Json<ApiResponse<Vec<CurrencyPreference>>>> {
     let user_id = claims.user_id()?;
     let service = CurrencyService::new(pool);
-    
-    let preferences = service.get_user_currency_preferences(user_id).await
+
+    let preferences = service
+        .get_user_currency_preferences(user_id)
+        .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(preferences)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:87:
 ) -> ApiResult<Json<ApiResponse<()>>> {
     let user_id = claims.user_id()?;
     let service = CurrencyService::new(pool);
-    
-    service.set_user_currency_preferences(user_id, req.currencies, req.primary_currency)
+
+    service
+        .set_user_currency_preferences(user_id, req.currencies, req.primary_currency)
         .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(())))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:100:
     State(pool): State<PgPool>,
     claims: Claims,
 ) -> ApiResult<Json<ApiResponse<FamilyCurrencySettings>>> {
-    let family_id = claims.family_id
+    let family_id = claims
+        .family_id
         .ok_or_else(|| ApiError::BadRequest("No family selected".to_string()))?;
-    
+
     let service = CurrencyService::new(pool);
-    let settings = service.get_family_currency_settings(family_id).await
+    let settings = service
+        .get_family_currency_settings(family_id)
+        .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(settings)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:116:
     claims: Claims,
     Json(req): Json<UpdateCurrencySettingsRequest>,
 ) -> ApiResult<Json<ApiResponse<FamilyCurrencySettings>>> {
-    let family_id = claims.family_id
+    let family_id = claims
+        .family_id
         .ok_or_else(|| ApiError::BadRequest("No family selected".to_string()))?;
-    
+
     let service = CurrencyService::new(pool);
-    let settings = service.update_family_currency_settings(family_id, req).await
+    let settings = service
+        .update_family_currency_settings(family_id, req)
+        .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(settings)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:139:
     Query(query): Query<GetExchangeRateQuery>,
 ) -> ApiResult<Json<ApiResponse<ExchangeRateResponse>>> {
     let service = CurrencyService::new(pool);
-    let rate = service.get_exchange_rate(&query.from, &query.to, query.date).await
+    let rate = service
+        .get_exchange_rate(&query.from, &query.to, query.date)
+        .await
         .map_err(|_e| ApiError::NotFound("Exchange rate not found".to_string()))?;
-    
+
     Ok(Json(ApiResponse::success(ExchangeRateResponse {
         from_currency: query.from,
         to_currency: query.to,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:148:
         rate,
-        date: query.date.unwrap_or_else(|| chrono::Utc::now().date_naive()),
+        date: query
+            .date
+            .unwrap_or_else(|| chrono::Utc::now().date_naive()),
     })))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:171:
     Json(req): Json<GetBatchExchangeRatesRequest>,
 ) -> ApiResult<Json<ApiResponse<HashMap<String, Decimal>>>> {
     let service = CurrencyService::new(pool);
-    let rates = service.get_exchange_rates(&req.base_currency, req.target_currencies, req.date)
+    let rates = service
+        .get_exchange_rates(&req.base_currency, req.target_currencies, req.date)
         .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(rates)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:185:
     Json(req): Json<AddExchangeRateRequest>,
 ) -> ApiResult<Json<ApiResponse<ExchangeRate>>> {
     let service = CurrencyService::new(pool);
-    let rate = service.add_exchange_rate(req).await
+    let rate = service
+        .add_exchange_rate(req)
+        .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(rate)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:214:
     Json(req): Json<ClearManualRatesBatchRequest>,
 ) -> ApiResult<Json<ApiResponse<serde_json::Value>>> {
     let service = CurrencyService::new(pool);
-    let affected = service.clear_manual_rates_batch(req).await
+    let affected = service
+        .clear_manual_rates_batch(req)
+        .await
         .map_err(|_e| ApiError::InternalServerError)?;
     Ok(Json(ApiResponse::success(serde_json::json!({
         "message": "Manual rates cleared",
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:245:
     Json(req): Json<ConvertAmountRequest>,
 ) -> ApiResult<Json<ApiResponse<ConvertAmountResponse>>> {
     let service = CurrencyService::new(pool.clone());
-    
+
     // 获取汇率
-    let rate = service.get_exchange_rate(&req.from_currency, &req.to_currency, req.date)
+    let rate = service
+        .get_exchange_rate(&req.from_currency, &req.to_currency, req.date)
         .await
         .map_err(|_e| ApiError::NotFound("Exchange rate not found".to_string()))?;
-    
+
     // 获取货币信息以确定小数位数
-    let currencies = service.get_supported_currencies().await
+    let currencies = service
+        .get_supported_currencies()
+        .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
-    let from_currency_info = currencies.iter()
+
+    let from_currency_info = currencies
+        .iter()
         .find(|c| c.code == req.from_currency)
         .ok_or_else(|| ApiError::NotFound("From currency not found".to_string()))?;
-    
-    let to_currency_info = currencies.iter()
+
+    let to_currency_info = currencies
+        .iter()
         .find(|c| c.code == req.to_currency)
         .ok_or_else(|| ApiError::NotFound("To currency not found".to_string()))?;
-    
+
     // 进行转换
     let converted = service.convert_amount(
         req.amount,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:270:
         from_currency_info.decimal_places,
         to_currency_info.decimal_places,
     );
-    
+
     Ok(Json(ApiResponse::success(ConvertAmountResponse {
         original_amount: req.amount,
         converted_amount: converted,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:294:
 ) -> ApiResult<Json<ApiResponse<Vec<ExchangeRate>>>> {
     let service = CurrencyService::new(pool);
     let days = query.days.unwrap_or(30);
-    
-    let history = service.get_exchange_rate_history(&query.from, &query.to, days)
+
+    let history = service
+        .get_exchange_rate_history(&query.from, &query.to, days)
         .await
         .map_err(|_e| ApiError::InternalServerError)?;
-    
+
     Ok(Json(ApiResponse::success(history)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:339:
             name: "美元/日元".to_string(),
         },
     ];
-    
+
     Ok(Json(ApiResponse::success(pairs)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler.rs:356:
     _claims: Claims, // 需要管理员权限
 ) -> ApiResult<Json<ApiResponse<()>>> {
     let service = CurrencyService::new(pool);
-    
+
     // 为主要货币刷新汇率
     let base_currencies = vec!["CNY", "USD", "EUR"];
-    
+
     for base in base_currencies {
-        service.fetch_latest_rates(base).await
+        service
+            .fetch_latest_rates(base)
+            .await
             .map_err(|_e| ApiError::InternalServerError)?;
     }
-    
+
     Ok(Json(ApiResponse::success(())))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:4:
 };
 use chrono::Utc;
 use rust_decimal::Decimal;
-use serde::{Deserialize, Serialize};
 use serde::de::{self, Deserializer, SeqAccess, Visitor};
+use serde::{Deserialize, Serialize};
 use sqlx::{PgPool, Row};
 use std::collections::HashMap;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:12:
+use super::family_handler::ApiResponse;
 use crate::auth::Claims;
 use crate::error::{ApiError, ApiResult};
-use crate::services::{CurrencyService};
+use crate::services::currency_service::CurrencyPreference;
 use crate::services::exchange_rate_api::ExchangeRateApiService;
-use crate::services::currency_service::{CurrencyPreference};
-use super::family_handler::ApiResponse;
+use crate::services::CurrencyService;
 
 /// Enhanced Currency model with all fields needed by Flutter
 #[derive(Debug, Serialize, Deserialize, Clone)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:68:
     .fetch_all(&pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     let mut fiat_currencies = Vec::new();
     let mut crypto_currencies = Vec::new();
-    
+
     for row in rows {
         let currency = Currency {
             code: row.code.clone(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:85:
             flag: row.flag,
             exchange_rate: None, // Will be populated separately if needed
         };
-        
+
         if currency.is_crypto {
             crypto_currencies.push(currency);
         } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:92:
             fiat_currencies.push(currency);
         }
     }
-    
+
     Ok(Json(ApiResponse::success(CurrenciesResponse {
         fiat_currencies,
         crypto_currencies,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:111:
     claims: Claims,
 ) -> ApiResult<Json<ApiResponse<UserCurrencySettings>>> {
     let user_id = claims.user_id()?;
-    
+
     // Get user preferences
     let service = CurrencyService::new(pool.clone());
-    let preferences = service.get_user_currency_preferences(user_id).await
+    let preferences = service
+        .get_user_currency_preferences(user_id)
+        .await
         .map_err(|_| ApiError::InternalServerError)?;
-    
+
     // Get user settings from database or use defaults
     let settings = sqlx::query!(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:135:
     .fetch_optional(&pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     let settings = if let Some(settings) = settings {
         UserCurrencySettings {
             multi_currency_enabled: settings.multi_currency_enabled.unwrap_or(false),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:142:
             crypto_enabled: settings.crypto_enabled.unwrap_or(false),
             base_currency: settings.base_currency.unwrap_or_else(|| "USD".to_string()),
-            selected_currencies: settings.selected_currencies.unwrap_or_else(|| vec!["USD".to_string(), "CNY".to_string()]),
+            selected_currencies: settings
+                .selected_currencies
+                .unwrap_or_else(|| vec!["USD".to_string(), "CNY".to_string()]),
             show_currency_code: settings.show_currency_code.unwrap_or(true),
             show_currency_symbol: settings.show_currency_symbol.unwrap_or(false),
             preferences,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:158:
             preferences,
         }
     };
-    
+
     Ok(Json(ApiResponse::success(settings)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:179:
     Json(req): Json<UpdateUserCurrencySettingsRequest>,
 ) -> ApiResult<Json<ApiResponse<UserCurrencySettings>>> {
     let user_id = claims.user_id()?;
-    
+
     // Upsert user settings
     sqlx::query!(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:212:
     .execute(&pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     // Return updated settings
     get_user_currency_settings(State(pool), claims).await
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:223:
     Query(query): Query<RealtimeRatesQuery>,
 ) -> ApiResult<Json<ApiResponse<RealtimeRatesResponse>>> {
     let base_currency = query.base_currency.unwrap_or_else(|| "USD".to_string());
-    
+
     // Check if we have recent rates (within 15 minutes)
     let recent_rates = sqlx::query(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:241:
     .fetch_all(&pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     let mut rates = HashMap::new();
     let mut last_updated: Option<chrono::NaiveDateTime> = None;
-    
+
     for row in recent_rates {
         let to_currency: String = row.get("to_currency");
         let rate: Decimal = row.get("rate");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:255:
             last_updated = Some(created_naive);
         }
     }
-    
+
     // If no recent rates or not enough currencies, fetch from external API
     if rates.is_empty() || (query.force_refresh.unwrap_or(false)) {
         // TODO: Implement external API integration
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:265:
             last_updated = Some(Utc::now().naive_utc());
         }
     }
-    
+
     Ok(Json(ApiResponse::success(RealtimeRatesResponse {
         base_currency,
         rates,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:384:
 ) -> ApiResult<Json<ApiResponse<DetailedRatesResponse>>> {
     let mut api = ExchangeRateApiService::new();
     let base = req.base_currency.to_uppercase();
-    let targets: Vec<String> = req.target_currencies
+    let targets: Vec<String> = req
+        .target_currencies
         .into_iter()
         .map(|s| s.to_uppercase())
         .filter(|c| c != &base)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:403:
     // Fetch fiat rates for base if needed
     if !base_is_crypto {
         // Merge per-target from providers in priority order, so missing ones are filled by next providers
-        let order_env = std::env::var("FIAT_PROVIDER_ORDER").unwrap_or_else(|_| "exchangerate-api,frankfurter,fxrates".to_string());
+        let order_env = std::env::var("FIAT_PROVIDER_ORDER")
+            .unwrap_or_else(|_| "exchangerate-api,frankfurter,fxrates".to_string());
         let providers: Vec<String> = order_env
             .split(',')
             .map(|s| s.trim().to_lowercase())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:411:
             .collect();
 
         // Accumulator for merged rates and a map to track source per currency
-        let mut merged: std::collections::HashMap<String, rust_decimal::Decimal> = std::collections::HashMap::new();
+        let mut merged: std::collections::HashMap<String, rust_decimal::Decimal> =
+            std::collections::HashMap::new();
         // Source map lives outside for later access
 
         // Determine which targets are fiat (we only need fiat->fiat rates here)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:423:
         }
 
         for p in providers {
-            if fiat_targets.is_empty() { break; }
+            if fiat_targets.is_empty() {
+                break;
+            }
             if let Ok((rmap, src)) = api.fetch_fiat_rates_from(&p, &base).await {
-                for t in fiat_targets.clone() { // iterate over a snapshot to allow removal
+                for t in fiat_targets.clone() {
+                    // iterate over a snapshot to allow removal
                     if let Some(val) = rmap.get(&t) {
                         // fill only if not already present
                         if !merged.contains_key(&t) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:447:
                         if !merged.contains_key(t) {
                             merged.insert(t.clone(), *val);
                             // use cached source if available; otherwise mark as "fiat"
-                            let src = api.cached_fiat_source(&base).unwrap_or_else(|| "fiat".to_string());
+                            let src = api
+                                .cached_fiat_source(&base)
+                                .unwrap_or_else(|| "fiat".to_string());
                             fiat_source_map.insert(t.clone(), src);
                         }
                     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:473:
                     // Try to get per-currency provider label if available; otherwise fall back to cached/global
                     let provider = match fiat_source_map.get(tgt) {
                         Some(p) => p.clone(),
-                        None => api.cached_fiat_source(&base).unwrap_or_else(|| "fiat".to_string()),
+                        None => api
+                            .cached_fiat_source(&base)
+                            .unwrap_or_else(|| "fiat".to_string()),
                     };
                     Some((*rate, provider))
-                } else { None }
-            } else { None }
+                } else {
+                    None
+                }
+            } else {
+                None
+            }
         } else if base_is_crypto && !tgt_is_crypto {
             // crypto -> fiat: need price(base, tgt)
             // fetch crypto price of base in target fiat; if not supported, use USD cross
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:484:
             // First try target directly
             let codes = vec![base.as_str()];
             if let Ok(prices) = api.fetch_crypto_prices(codes.clone(), tgt).await {
-                let provider = api.cached_crypto_source(&[base.as_str()], tgt.as_str()).unwrap_or_else(|| "crypto".to_string());
+                let provider = api
+                    .cached_crypto_source(&[base.as_str()], tgt.as_str())
+                    .unwrap_or_else(|| "crypto".to_string());
                 prices.get(&base).map(|price| (*price, provider))
             } else {
                 // fallback via USD: price(base, USD) and fiat USD->tgt
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:493:
                         crypto_prices_cache = Some((p.clone(), "coingecko".to_string()));
                     }
                 }
-                if let (Some((ref cp, _)), Some((ref fr, ref provider))) = (&crypto_prices_cache, &fiat_rates) {
+                if let (Some((ref cp, _)), Some((ref fr, ref provider))) =
+                    (&crypto_prices_cache, &fiat_rates)
+                {
                     if let (Some(p_base_usd), Some(usd_to_tgt)) = (cp.get(&base), fr.get(tgt)) {
                         Some((*p_base_usd * *usd_to_tgt, provider.clone()))
-                    } else { None }
-                } else { None }
+                    } else {
+                        None
+                    }
+                } else {
+                    None
+                }
             }
         } else if !base_is_crypto && tgt_is_crypto {
             // fiat -> crypto: need price(tgt, base), then invert: 1 base = (1/price) tgt
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:504:
             let codes = vec![tgt.as_str()];
             if let Ok(prices) = api.fetch_crypto_prices(codes.clone(), &base).await {
-                let provider = api.cached_crypto_source(&[tgt.as_str()], base.as_str()).unwrap_or_else(|| "crypto".to_string());
-                prices.get(tgt).map(|price| (Decimal::ONE / *price, provider))
+                let provider = api
+                    .cached_crypto_source(&[tgt.as_str()], base.as_str())
+                    .unwrap_or_else(|| "crypto".to_string());
+                prices
+                    .get(tgt)
+                    .map(|price| (Decimal::ONE / *price, provider))
             } else {
                 // fallback via USD
                 if crypto_prices_cache.is_none() {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:512:
                         crypto_prices_cache = Some((p.clone(), "coingecko".to_string()));
                     }
                 }
-                if let (Some((ref cp, _)), Some((ref fr, ref provider))) = (&crypto_prices_cache, &fiat_rates) {
+                if let (Some((ref cp, _)), Some((ref fr, ref provider))) =
+                    (&crypto_prices_cache, &fiat_rates)
+                {
                     if let (Some(p_tgt_usd), Some(usd_to_base)) = (cp.get(tgt), fr.get(&base)) {
                         // price(tgt, base) = p_tgt_usd / usd_to_base; then invert for base->tgt
                         let price_tgt_base = *p_tgt_usd / *usd_to_base;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:519:
                         Some((Decimal::ONE / price_tgt_base, provider.clone()))
-                    } else { None }
-                } else { None }
+                    } else {
+                        None
+                    }
+                } else {
+                    None
+                }
             }
         } else {
             // crypto -> crypto: use USD cross
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:526:
             if let Ok(prices) = api.fetch_crypto_prices(codes.clone(), &usd).await {
                 if let (Some(p_base_usd), Some(p_tgt_usd)) = (prices.get(&base), prices.get(tgt)) {
                     let rate = *p_base_usd / *p_tgt_usd; // 1 base = rate target
-                    let provider = api.cached_crypto_source(&[base.as_str(), tgt.as_str()], "USD").unwrap_or_else(|| "crypto".to_string());
+                    let provider = api
+                        .cached_crypto_source(&[base.as_str(), tgt.as_str()], "USD")
+                        .unwrap_or_else(|| "crypto".to_string());
                     Some((rate, provider))
-                } else { None }
-            } else { None }
+                } else {
+                    None
+                }
+            } else {
+                None
+            }
         };
 
         if let Some((rate, source)) = rate_and_source {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:553:
                 let is_manual: Option<bool> = r.get("is_manual");
                 let mre: Option<chrono::DateTime<Utc>> = r.get("manual_rate_expiry");
                 (is_manual.unwrap_or(false), mre.map(|dt| dt.naive_utc()))
-            } else { (false, None) };
+            } else {
+                (false, None)
+            };
 
-            result.insert(tgt.clone(), DetailedRateItem { rate, source, is_manual, manual_rate_expiry });
+            result.insert(
+                tgt.clone(),
+                DetailedRateItem {
+                    rate,
+                    source,
+                    is_manual,
+                    manual_rate_expiry,
+                },
+            );
         }
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:571:
     Query(query): Query<CryptoPricesQuery>,
 ) -> ApiResult<Json<ApiResponse<CryptoPricesResponse>>> {
     let fiat_currency = query.fiat_currency.unwrap_or_else(|| "USD".to_string());
-    let crypto_codes = query.crypto_codes.unwrap_or_else(|| {
-        vec!["BTC".to_string(), "ETH".to_string(), "USDT".to_string()]
-    });
-    
+    let crypto_codes = query
+        .crypto_codes
+        .unwrap_or_else(|| vec!["BTC".to_string(), "ETH".to_string(), "USDT".to_string()]);
+
     // Get crypto prices from exchange_rates table
     let prices = sqlx::query!(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:594:
     .fetch_all(&pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     let mut crypto_prices = HashMap::new();
     let mut last_updated: Option<chrono::NaiveDateTime> = None;
-    
+
     for row in prices {
         let price = Decimal::ONE / row.price;
         crypto_prices.insert(row.crypto_code, price);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:604:
         // created_at 可能为可空；为空时使用当前时间
-        let created_naive = row
-            .created_at
-            .unwrap_or_else(Utc::now)
-            .naive_utc();
+        let created_naive = row.created_at.unwrap_or_else(Utc::now).naive_utc();
         if last_updated.map(|lu| created_naive > lu).unwrap_or(true) {
             last_updated = Some(created_naive);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:612:
     }
-    
+
     // If no recent prices, return mock data
     if crypto_prices.is_empty() {
         crypto_prices = get_mock_crypto_prices(&fiat_currency);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:617:
         last_updated = Some(Utc::now().naive_utc());
     }
-    
+
     Ok(Json(ApiResponse::success(CryptoPricesResponse {
         fiat_currency,
         prices: crypto_prices,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:631:
     // 支持两种格式：
     // 1) crypto_codes=BTC&crypto_codes=ETH
     // 2) crypto_codes=BTC,ETH
-    #[serde(default, deserialize_with = "deserialize_csv_or_vec")] 
+    #[serde(default, deserialize_with = "deserialize_csv_or_vec")]
     pub crypto_codes: Option<Vec<String>>,
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:669:
             let mut items = Vec::new();
             while let Some(item) = seq.next_element::<String>()? {
                 let s = item.trim();
-                if !s.is_empty() { items.push(s.to_uppercase()); }
+                if !s.is_empty() {
+                    items.push(s.to_uppercase());
+                }
             }
             Ok(if items.is_empty() { None } else { Some(items) })
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:712:
     Json(req): Json<ConvertCurrencyRequest>,
 ) -> ApiResult<Json<ApiResponse<ConvertCurrencyResponse>>> {
     let service = CurrencyService::new(pool.clone());
-    
+
     // Check if either is crypto
     let from_is_crypto = is_crypto_currency(&pool, &req.from).await?;
     let to_is_crypto = is_crypto_currency(&pool, &req.to).await?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:719:
-    
+
     let rate = if from_is_crypto || to_is_crypto {
         // Handle crypto conversion
         get_crypto_rate(&pool, &req.from, &req.to).await?
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:723:
     } else {
         // Regular fiat conversion
-        service.get_exchange_rate(&req.from, &req.to, None).await
+        service
+            .get_exchange_rate(&req.from, &req.to, None)
+            .await
             .map_err(|_| ApiError::NotFound("Exchange rate not found".to_string()))?
     };
-    
+
     let converted_amount = req.amount * rate;
-    
+
     Ok(Json(ApiResponse::success(ConvertCurrencyResponse {
         from: req.from.clone(),
         to: req.to.clone(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:763:
 ) -> ApiResult<Json<ApiResponse<RefreshResponse>>> {
     // TODO: Implement external API calls to update rates
     // For now, just mark as refreshed
-    
+
     let message = format!(
         "Rates refreshed for base currency: {}",
         req.base_currency.unwrap_or_else(|| "USD".to_string())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:770:
     );
-    
+
     Ok(Json(ApiResponse::success(RefreshResponse {
         success: true,
         message,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:792:
 // Helper functions
 
 async fn is_crypto_currency(pool: &PgPool, code: &str) -> ApiResult<bool> {
-    let result = sqlx::query_scalar!(
-        "SELECT is_crypto FROM currencies WHERE code = $1",
-        code
-    )
-    .fetch_optional(pool)
-    .await
-    .map_err(|_| ApiError::InternalServerError)?;
-    
+    let result = sqlx::query_scalar!("SELECT is_crypto FROM currencies WHERE code = $1", code)
+        .fetch_optional(pool)
+        .await
+        .map_err(|_| ApiError::InternalServerError)?;
+
     Ok(result.flatten().unwrap_or(false))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:820:
     .fetch_optional(pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     if let Some(rate) = rate {
         return Ok(rate);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:827:
-    
+
     // Try inverse rate
     let inverse_rate = sqlx::query_scalar!(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:841:
     .fetch_optional(pool)
     .await
     .map_err(|_| ApiError::InternalServerError)?;
-    
+
     if let Some(rate) = inverse_rate {
         return Ok(Decimal::ONE / rate);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:848:
-    
+
     // Return mock rate for demo
     Ok(get_mock_rate(from, to))
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:852:
 
 fn get_default_rates(base: &str) -> HashMap<String, Decimal> {
     let mut rates = HashMap::new();
-    
+
     match base {
         "USD" => {
             rates.insert("EUR".to_string(), decimal_from_str("0.92"));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:873:
         }
         _ => {}
     }
-    
+
     rates
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:880:
 fn get_mock_crypto_prices(fiat: &str) -> HashMap<String, Decimal> {
     let mut prices = HashMap::new();
-    
+
     let usd_prices = vec![
         ("BTC", "67500.00"),
         ("ETH", "3450.00"),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:892:
         ("AVAX", "35.00"),
         ("DOGE", "0.08"),
     ];
-    
+
     let multiplier = match fiat {
         "CNY" => decimal_from_str("7.25"),
         "EUR" => decimal_from_str("0.92"),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:899:
         "GBP" => decimal_from_str("0.79"),
         _ => Decimal::ONE,
     };
-    
+
     for (code, price) in usd_prices {
         let base_price = decimal_from_str(price);
         prices.insert(code.to_string(), base_price * multiplier);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/currency_handler_enhanced.rs:906:
     }
-    
+
     prices
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/mod.rs:1:
-pub mod template_handler;
 pub mod accounts;
-pub mod banks;
-pub mod transactions;
-pub mod payees;
-pub mod rules;
+pub mod audit_handler;
 pub mod auth;
 pub mod auth_handler;
+pub mod banks;
 pub mod family_handler;
-pub mod member_handler;
 pub mod invitation_handler;
-pub mod audit_handler;
 pub mod ledgers;
+pub mod member_handler;
+pub mod payees;
+pub mod rules;
+pub mod template_handler;
+pub mod transactions;
 // Demo endpoints are optional
-#[cfg(feature = "demo_endpoints")]
-pub mod placeholder;
-pub mod enhanced_profile;
+pub mod category_handler;
 pub mod currency_handler;
 pub mod currency_handler_enhanced;
+pub mod enhanced_profile;
+#[cfg(feature = "demo_endpoints")]
+pub mod placeholder;
 pub mod tag_handler;
-pub mod category_handler;
 pub mod travel;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:2:
 //! 提供分类模板的CRUD操作和网络同步功能
 
 use axum::{
-    extract::{Query, State, Path},
+    extract::{Path, Query, State},
     http::StatusCode,
     response::Json,
 };
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:9:
 use serde::{Deserialize, Serialize};
 use sqlx::{PgPool, Row};
-use uuid::Uuid;
 use std::collections::HashMap;
+use uuid::Uuid;
 
 /// 模板查询参数
 #[derive(Debug, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:122:
         Some("zh") => "COALESCE(name_zh, name)",
         _ => "name",
     };
-    
+
     let base_select = format!(
         "SELECT id, {} as name, name_en, name_zh, description, classification, color, icon, \
          category_group, is_featured, is_active, global_usage_count, tags, version, \
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:129:
          created_at, updated_at FROM system_category_templates WHERE is_active = true",
         name_field
     );
-    
+
     let mut query = sqlx::QueryBuilder::new(base_select.clone());
-    
+
     // 添加过滤条件
     if let Some(classification) = &params.r#type {
         if classification != "all" {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:139:
             query.push_bind(classification);
         }
     }
-    
+
     if let Some(group) = &params.group {
         query.push(" AND category_group = ");
         query.push_bind(group);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:146:
     }
-    
+
     if let Some(featured) = params.featured {
         query.push(" AND is_featured = ");
         query.push_bind(featured);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:151:
     }
-    
+
     // 增量同步支持
     if let Some(since) = &params.since {
         query.push(" AND updated_at > ");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:184:
         .fetch_one(&pool)
         .await
         .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
-    let max_updated: chrono::DateTime<chrono::Utc> = stats_row.try_get("max_updated").unwrap_or(chrono::DateTime::<chrono::Utc>::from_timestamp(0, 0).unwrap());
+    let max_updated: chrono::DateTime<chrono::Utc> = stats_row
+        .try_get("max_updated")
+        .unwrap_or(chrono::DateTime::<chrono::Utc>::from_timestamp(0, 0).unwrap());
     let total_count: i64 = stats_row.try_get("total").unwrap_or(0);
 
     // Compute a simple ETag and return 304 if matches
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:201:
     let offset = (page - 1) * per_page;
 
     query.push(" ORDER BY is_featured DESC, global_usage_count DESC, name");
-    query.push(" LIMIT ").push_bind(per_page).push(" OFFSET ").push_bind(offset);
+    query
+        .push(" LIMIT ")
+        .push_bind(per_page)
+        .push(" OFFSET ")
+        .push_bind(offset);
 
     let templates = query
         .build_query_as::<SystemTemplate>()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:218:
         last_updated: max_updated.to_rfc3339(),
         total: total_count,
     };
-    
+
     Ok(Json(response))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:225:
 /// 获取图标列表
-pub async fn get_icons(
-    State(_pool): State<PgPool>,
-) -> Json<IconResponse> {
+pub async fn get_icons(State(_pool): State<PgPool>) -> Json<IconResponse> {
     // 模拟图标映射
     let mut icons = HashMap::new();
     icons.insert("💰".to_string(), "salary.png".to_string());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:236:
     icons.insert("🎬".to_string(), "entertainment.png".to_string());
     icons.insert("💳".to_string(), "finance.png".to_string());
     icons.insert("💼".to_string(), "business.png".to_string());
-    
+
     Json(IconResponse {
         icons,
         cdn_base: "http://127.0.0.1:8080/static/icons".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:249:
     Query(params): Query<TemplateQuery>,
     State(pool): State<PgPool>,
 ) -> Result<Json<UpdateResponse>, StatusCode> {
-    let since = params.since.unwrap_or_else(|| "1970-01-01T00:00:00Z".to_string());
-    
+    let since = params
+        .since
+        .unwrap_or_else(|| "1970-01-01T00:00:00Z".to_string());
+
     let templates = sqlx::query_as::<_, SystemTemplate>(
         r#"
         SELECT id, name, name_en, name_zh, description, classification, 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:269:
         eprintln!("Database query error: {:?}", e);
         StatusCode::INTERNAL_SERVER_ERROR
     })?;
-    
+
     let updates: Vec<TemplateUpdate> = templates
         .into_iter()
         .map(|template| TemplateUpdate {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:279:
             template: Some(template),
         })
         .collect();
-    
+
     Ok(Json(UpdateResponse {
         updates,
         has_more: false,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:292:
     Json(req): Json<CreateTemplateRequest>,
 ) -> Result<Json<SystemTemplate>, StatusCode> {
     let id = Uuid::new_v4();
-    
+
     let template = sqlx::query_as::<_, SystemTemplate>(
         r#"
         INSERT INTO system_category_templates 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:321:
         eprintln!("Create template error: {:?}", e);
         StatusCode::INTERNAL_SERVER_ERROR
     })?;
-    
+
     Ok(Json(template))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:332:
     Json(req): Json<UpdateTemplateRequest>,
 ) -> Result<Json<SystemTemplate>, StatusCode> {
     // 构建动态更新查询
-    let mut query = sqlx::QueryBuilder::new("UPDATE system_category_templates SET updated_at = CURRENT_TIMESTAMP");
+    let mut query = sqlx::QueryBuilder::new(
+        "UPDATE system_category_templates SET updated_at = CURRENT_TIMESTAMP",
+    );
     let mut has_updates = false;
-    
+
     if let Some(name) = &req.name {
         query.push(", name = ");
         query.push_bind(name);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:341:
         has_updates = true;
     }
-    
+
     if let Some(name_en) = &req.name_en {
         query.push(", name_en = ");
         query.push_bind(name_en);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:347:
         has_updates = true;
     }
-    
+
     if let Some(name_zh) = &req.name_zh {
         query.push(", name_zh = ");
         query.push_bind(name_zh);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:353:
         has_updates = true;
     }
-    
+
     if let Some(description) = &req.description {
         query.push(", description = ");
         query.push_bind(description);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:359:
         has_updates = true;
     }
-    
+
     if let Some(classification) = &req.classification {
         query.push(", classification = ");
         query.push_bind(classification);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:365:
         has_updates = true;
     }
-    
+
     if let Some(color) = &req.color {
         query.push(", color = ");
         query.push_bind(color);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:371:
         has_updates = true;
     }
-    
+
     if let Some(icon) = &req.icon {
         query.push(", icon = ");
         query.push_bind(icon);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:377:
         has_updates = true;
     }
-    
+
     if let Some(category_group) = &req.category_group {
         query.push(", category_group = ");
         query.push_bind(category_group);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:383:
         has_updates = true;
     }
-    
+
     if let Some(is_featured) = req.is_featured {
         query.push(", is_featured = ");
         query.push_bind(is_featured);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:389:
         has_updates = true;
     }
-    
+
     if let Some(is_active) = req.is_active {
         query.push(", is_active = ");
         query.push_bind(is_active);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:395:
         has_updates = true;
     }
-    
+
     if let Some(tags) = &req.tags {
         query.push(", tags = ");
         query.push_bind(&tags[..]);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:401:
         has_updates = true;
     }
-    
+
     if !has_updates {
         return Err(StatusCode::BAD_REQUEST);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:407:
-    
+
     query.push(" WHERE id = ");
     query.push_bind(template_id);
-    
+
     // 执行更新
-    query.build()
-        .execute(&pool)
-        .await
-        .map_err(|e| {
-            eprintln!("Update template error: {:?}", e);
-            StatusCode::INTERNAL_SERVER_ERROR
-        })?;
-    
+    query.build().execute(&pool).await.map_err(|e| {
+        eprintln!("Update template error: {:?}", e);
+        StatusCode::INTERNAL_SERVER_ERROR
+    })?;
+
     // 返回更新后的模板
     let template = sqlx::query_as::<_, SystemTemplate>(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:431:
     .fetch_one(&pool)
     .await
     .map_err(|_| StatusCode::NOT_FOUND)?;
-    
+
     Ok(Json(template))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:450:
         eprintln!("Delete template error: {:?}", e);
         StatusCode::INTERNAL_SERVER_ERROR
     })?;
-    
+
     if result.rows_affected() == 0 {
         Err(StatusCode::NOT_FOUND)
     } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/template_handler.rs:473:
             .await;
         }
     }
-    
+
     StatusCode::OK
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1:
 //! 交易管理API处理器
 //! 提供交易的CRUD操作接口
 
+use axum::body::Body;
 use axum::{
     extract::{Path, Query, State},
-    http::{StatusCode, header, HeaderMap},
-    response::{Json, IntoResponse},
+    http::{header, HeaderMap, StatusCode},
+    response::{IntoResponse, Json},
 };
-use axum::body::Body;
 use bytes::Bytes;
-use futures_util::{StreamExt, stream};
+use chrono::{DateTime, NaiveDate, Utc};
+use futures_util::{stream, StreamExt};
+use rust_decimal::prelude::ToPrimitive;
+use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use sqlx::{Executor, PgPool, QueryBuilder, Row};
 use std::convert::Infallible;
 use std::pin::Pin;
-use serde::{Deserialize, Serialize};
-use sqlx::{PgPool, Row, QueryBuilder, Executor};
 use uuid::Uuid;
-use rust_decimal::Decimal;
-use rust_decimal::prelude::ToPrimitive;
-use chrono::{DateTime, Utc, NaiveDate};
 
-use crate::{auth::Claims, error::{ApiError, ApiResult}};
+use crate::{
+    auth::Claims,
+    error::{ApiError, ApiResult},
+};
 use base64::Engine; // enable .encode on base64::engine
-// Use core export when feature is enabled; otherwise fallback to local CSV writer
+                    // Use core export when feature is enabled; otherwise fallback to local CSV writer
 #[cfg(feature = "core_export")]
-use jive_core::application::export_service::{ExportService as CoreExportService, CsvExportConfig, SimpleTransactionExport};
+use jive_core::application::export_service::{
+    CsvExportConfig, ExportService as CoreExportService, SimpleTransactionExport,
+};
 
 #[cfg(not(feature = "core_export"))]
 #[derive(Clone)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:34:
 #[cfg(not(feature = "core_export"))]
 impl Default for CsvExportConfig {
     fn default() -> Self {
-        Self { delimiter: ',', include_header: true }
+        Self {
+            delimiter: ',',
+            include_header: true,
+        }
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:46:
             s.insert(0, '\'');
         }
     }
-    let must_quote = s.contains(delimiter) || s.contains('"') || s.contains('\n') || s.contains('\r');
-    let s = if s.contains('"') { s.replace('"', "\"\"") } else { s };
+    let must_quote =
+        s.contains(delimiter) || s.contains('"') || s.contains('\n') || s.contains('\r');
+    let s = if s.contains('"') {
+        s.replace('"', "\"\"")
+    } else {
+        s
+    };
     if must_quote {
         format!("\"{}\"", s)
     } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:54:
         s
     }
 }
-use crate::services::{AuthService, AuditService};
 use crate::models::permission::Permission;
 use crate::services::context::ServiceContext;
+use crate::services::{AuditService, AuthService};
 
 /// 导出交易请求
 #[derive(Debug, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:77:
     Json(req): Json<ExportTransactionsRequest>,
 ) -> ApiResult<impl IntoResponse> {
     let user_id = claims.user_id()?; // 验证 JWT，提取用户ID
-    let family_id = claims.family_id.ok_or(ApiError::BadRequest("缺少 family_id 上下文".to_string()))?;
+    let family_id = claims
+        .family_id
+        .ok_or(ApiError::BadRequest("缺少 family_id 上下文".to_string()))?;
     // 依据真实 membership 构造上下文并校验权限
     let auth_service = AuthService::new(pool.clone());
     let ctx = auth_service
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:89:
     // 仅实现 CSV/JSON，其他格式返回错误提示
     let fmt = req.format.as_deref().unwrap_or("csv").to_lowercase();
     if fmt != "csv" && fmt != "json" {
-        return Err(ApiError::BadRequest(format!("不支持的导出格式: {} (仅支持 csv/json)", fmt)));
+        return Err(ApiError::BadRequest(format!(
+            "不支持的导出格式: {} (仅支持 csv/json)",
+            fmt
+        )));
     }
 
     // 复用列表查询的过滤条件（限定在当前家庭）
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:105:
     );
     query.push_bind(ctx.family_id);
 
-    if let Some(account_id) = req.account_id { query.push(" AND t.account_id = "); query.push_bind(account_id); }
-    if let Some(ledger_id) = req.ledger_id { query.push(" AND t.ledger_id = "); query.push_bind(ledger_id); }
-    if let Some(category_id) = req.category_id { query.push(" AND t.category_id = "); query.push_bind(category_id); }
-    if let Some(start_date) = req.start_date { query.push(" AND t.transaction_date >= "); query.push_bind(start_date); }
-    if let Some(end_date) = req.end_date { query.push(" AND t.transaction_date <= "); query.push_bind(end_date); }
+    if let Some(account_id) = req.account_id {
+        query.push(" AND t.account_id = ");
+        query.push_bind(account_id);
+    }
+    if let Some(ledger_id) = req.ledger_id {
+        query.push(" AND t.ledger_id = ");
+        query.push_bind(ledger_id);
+    }
+    if let Some(category_id) = req.category_id {
+        query.push(" AND t.category_id = ");
+        query.push_bind(category_id);
+    }
+    if let Some(start_date) = req.start_date {
+        query.push(" AND t.transaction_date >= ");
+        query.push_bind(start_date);
+    }
+    if let Some(end_date) = req.end_date {
+        query.push(" AND t.transaction_date <= ");
+        query.push_bind(end_date);
+    }
 
     query.push(" ORDER BY t.transaction_date DESC, t.id DESC");
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:143:
                 "notes": row.try_get::<String,_>("notes").ok(),
             }));
         }
-        let bytes = serde_json::to_vec_pretty(&items)
-            .map_err(|_e| ApiError::InternalServerError)?;
+        let bytes =
+            serde_json::to_vec_pretty(&items).map_err(|_e| ApiError::InternalServerError)?;
         let encoded = base64::engine::general_purpose::STANDARD.encode(&bytes);
         let url = format!("data:application/json;base64,{}", encoded);
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:158:
             .or_else(|| headers.get("x-real-ip"))
             .and_then(|v| v.to_str().ok())
             .map(|s| s.split(',').next().unwrap_or(s).trim().to_string());
-        let audit_id = AuditService::new(pool.clone()).log_action_returning_id(
-            ctx.family_id,
-            ctx.user_id,
-            crate::models::audit::CreateAuditLogRequest {
-                action: crate::models::audit::AuditAction::Export,
-                entity_type: "transactions".to_string(),
-                entity_id: None,
-                old_values: None,
-                new_values: Some(serde_json::json!({
-                    "count": items.len(),
-                    "format": "json",
-                    "filters": {
-                        "account_id": req.account_id,
-                        "ledger_id": req.ledger_id,
-                        "category_id": req.category_id,
-                        "start_date": req.start_date,
-                        "end_date": req.end_date,
-                    }
-                })),
-            },
-            ip,
-            ua,
-        ).await.ok();
+        let audit_id = AuditService::new(pool.clone())
+            .log_action_returning_id(
+                ctx.family_id,
+                ctx.user_id,
+                crate::models::audit::CreateAuditLogRequest {
+                    action: crate::models::audit::AuditAction::Export,
+                    entity_type: "transactions".to_string(),
+                    entity_id: None,
+                    old_values: None,
+                    new_values: Some(serde_json::json!({
+                        "count": items.len(),
+                        "format": "json",
+                        "filters": {
+                            "account_id": req.account_id,
+                            "ledger_id": req.ledger_id,
+                            "category_id": req.category_id,
+                            "start_date": req.start_date,
+                            "end_date": req.end_date,
+                        }
+                    })),
+                },
+                ip,
+                ua,
+            )
+            .await
+            .ok();
         // Also mirror audit id in header-like field for client convenience
         // Build response with optional X-Audit-Id header
         let mut resp_headers = HeaderMap::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:188:
             resp_headers.insert("x-audit-id", aid.to_string().parse().unwrap());
         }
 
-        return Ok((resp_headers, Json(serde_json::json!({
-            "success": true,
-            "file_name": file_name,
-            "mime_type": "application/json",
-            "download_url": url,
-            "size": bytes.len(),
-            "audit_id": audit_id,
-        }))));
+        return Ok((
+            resp_headers,
+            Json(serde_json::json!({
+                "success": true,
+                "file_name": file_name,
+                "mime_type": "application/json",
+                "download_url": url,
+                "size": bytes.len(),
+                "audit_id": audit_id,
+            })),
+        ));
     }
 
     // 生成 CSV（core_export 启用时委托核心导出；否则使用本地安全 CSV 生成）
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:238:
     };
 
     #[cfg(not(feature = "core_export"))]
-    let (bytes, count_for_audit) = {
-        let cfg = CsvExportConfig::default();
-        let mut out = String::new();
-        if cfg.include_header {
-            out.push_str(&format!(
-                "Date{}Description{}Amount{}Category{}Account{}Payee{}Type\n",
-                cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter
-            ));
-        }
-        for row in rows.into_iter() {
-            let date: NaiveDate = row.get("transaction_date");
-            let desc: String = row.try_get::<String, _>("description").unwrap_or_default();
-            let amount: Decimal = row.get("amount");
-            let category: Option<String> = row
-                .try_get::<String, _>("category_name")
-                .ok()
-                .and_then(|s| if s.is_empty() { None } else { Some(s) });
-            let account_id: Uuid = row.get("account_id");
-            let payee: Option<String> = row
-                .try_get::<String, _>("payee_name")
-                .ok()
-                .and_then(|s| if s.is_empty() { None } else { Some(s) });
-            let ttype: String = row.get("transaction_type");
+    let (bytes, count_for_audit) =
+        {
+            let cfg = CsvExportConfig::default();
+            let mut out = String::new();
+            if cfg.include_header {
+                out.push_str(&format!(
+                    "Date{}Description{}Amount{}Category{}Account{}Payee{}Type\n",
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter
+                ));
+            }
+            for row in rows.into_iter() {
+                let date: NaiveDate = row.get("transaction_date");
+                let desc: String = row.try_get::<String, _>("description").unwrap_or_default();
+                let amount: Decimal = row.get("amount");
+                let category: Option<String> = row
+                    .try_get::<String, _>("category_name")
+                    .ok()
+                    .and_then(|s| if s.is_empty() { None } else { Some(s) });
+                let account_id: Uuid = row.get("account_id");
+                let payee: Option<String> = row
+                    .try_get::<String, _>("payee_name")
+                    .ok()
+                    .and_then(|s| if s.is_empty() { None } else { Some(s) });
+                let ttype: String = row.get("transaction_type");
 
-            let fields = [
-                date.to_string(),
-                csv_escape_cell(desc, cfg.delimiter),
-                amount.to_string(),
-                csv_escape_cell(category.unwrap_or_default(), cfg.delimiter),
-                account_id.to_string(),
-                csv_escape_cell(payee.unwrap_or_default(), cfg.delimiter),
-                csv_escape_cell(ttype, cfg.delimiter),
-            ];
-            out.push_str(&fields.join(&cfg.delimiter.to_string()));
-            out.push('\n');
-        }
-        let line_count = out.lines().count();
-        (out.into_bytes(), line_count.saturating_sub(1))
-    };
+                let fields = [
+                    date.to_string(),
+                    csv_escape_cell(desc, cfg.delimiter),
+                    amount.to_string(),
+                    csv_escape_cell(category.unwrap_or_default(), cfg.delimiter),
+                    account_id.to_string(),
+                    csv_escape_cell(payee.unwrap_or_default(), cfg.delimiter),
+                    csv_escape_cell(ttype, cfg.delimiter),
+                ];
+                out.push_str(&fields.join(&cfg.delimiter.to_string()));
+                out.push('\n');
+            }
+            let line_count = out.lines().count();
+            (out.into_bytes(), line_count.saturating_sub(1))
+        };
     let encoded = base64::engine::general_purpose::STANDARD.encode(&bytes);
     let url = format!("data:text/csv;charset=utf-8;base64,{}", encoded);
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:290:
         .or_else(|| headers.get("x-real-ip"))
         .and_then(|v| v.to_str().ok())
         .map(|s| s.split(',').next().unwrap_or(s).trim().to_string());
-    let audit_id = AuditService::new(pool.clone()).log_action_returning_id(
-        ctx.family_id,
-        ctx.user_id,
-        crate::models::audit::CreateAuditLogRequest {
-            action: crate::models::audit::AuditAction::Export,
-            entity_type: "transactions".to_string(),
-            entity_id: None,
-            old_values: None,
-            new_values: Some(serde_json::json!({
-                "count": count_for_audit,
-                "format": "csv",
-                "filters": {
-                    "account_id": req.account_id,
-                    "ledger_id": req.ledger_id,
-                    "category_id": req.category_id,
-                    "start_date": req.start_date,
-                    "end_date": req.end_date,
-                }
-            })),
-        },
-        ip,
-        ua,
-    ).await.ok();
+    let audit_id = AuditService::new(pool.clone())
+        .log_action_returning_id(
+            ctx.family_id,
+            ctx.user_id,
+            crate::models::audit::CreateAuditLogRequest {
+                action: crate::models::audit::AuditAction::Export,
+                entity_type: "transactions".to_string(),
+                entity_id: None,
+                old_values: None,
+                new_values: Some(serde_json::json!({
+                    "count": count_for_audit,
+                    "format": "csv",
+                    "filters": {
+                        "account_id": req.account_id,
+                        "ledger_id": req.ledger_id,
+                        "category_id": req.category_id,
+                        "start_date": req.start_date,
+                        "end_date": req.end_date,
+                    }
+                })),
+            },
+            ip,
+            ua,
+        )
+        .await
+        .ok();
     // Build response with optional X-Audit-Id header
     let mut resp_headers = HeaderMap::new();
     if let Some(aid) = audit_id {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:320:
     }
 
     // Also mirror audit id in the JSON for POST CSV
-    Ok((resp_headers, Json(serde_json::json!({
-        "success": true,
-        "file_name": file_name,
-        "mime_type": "text/csv",
-        "download_url": url,
-        "size": bytes.len(),
-        "audit_id": audit_id,
-    }))))
+    Ok((
+        resp_headers,
+        Json(serde_json::json!({
+            "success": true,
+            "file_name": file_name,
+            "mime_type": "text/csv",
+            "download_url": url,
+            "size": bytes.len(),
+            "audit_id": audit_id,
+        })),
+    ))
 }
 
 /// 流式 CSV 下载（更适合浏览器原生下载）
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:338:
     Query(q): Query<ExportTransactionsRequest>,
 ) -> ApiResult<impl IntoResponse> {
     let user_id = claims.user_id()?;
-    let family_id = claims.family_id.ok_or(ApiError::BadRequest("缺少 family_id 上下文".to_string()))?;
+    let family_id = claims
+        .family_id
+        .ok_or(ApiError::BadRequest("缺少 family_id 上下文".to_string()))?;
     let auth_service = AuthService::new(pool.clone());
     let ctx = auth_service
         .validate_family_access(user_id, family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:359:
          WHERE t.deleted_at IS NULL AND l.family_id = "
     );
     query.push_bind(ctx.family_id);
-    if let Some(account_id) = q.account_id { query.push(" AND t.account_id = "); query.push_bind(account_id); }
-    if let Some(ledger_id) = q.ledger_id { query.push(" AND t.ledger_id = "); query.push_bind(ledger_id); }
-    if let Some(category_id) = q.category_id { query.push(" AND t.category_id = "); query.push_bind(category_id); }
-    if let Some(start_date) = q.start_date { query.push(" AND t.transaction_date >= "); query.push_bind(start_date); }
-    if let Some(end_date) = q.end_date { query.push(" AND t.transaction_date <= "); query.push_bind(end_date); }
+    if let Some(account_id) = q.account_id {
+        query.push(" AND t.account_id = ");
+        query.push_bind(account_id);
+    }
+    if let Some(ledger_id) = q.ledger_id {
+        query.push(" AND t.ledger_id = ");
+        query.push_bind(ledger_id);
+    }
+    if let Some(category_id) = q.category_id {
+        query.push(" AND t.category_id = ");
+        query.push_bind(category_id);
+    }
+    if let Some(start_date) = q.start_date {
+        query.push(" AND t.transaction_date >= ");
+        query.push_bind(start_date);
+    }
+    if let Some(end_date) = q.end_date {
+        query.push(" AND t.transaction_date <= ");
+        query.push_bind(end_date);
+    }
     query.push(" ORDER BY t.transaction_date DESC, t.id DESC");
 
     // Execute fully and build CSV body (simple, reliable)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:370:
-    let rows_all = query.build().fetch_all(&pool).await
+    let rows_all = query
+        .build()
+        .fetch_all(&pool)
+        .await
         .map_err(|e| ApiError::DatabaseError(format!("查询交易失败: {}", e)))?;
     // Build response body bytes depending on feature flag
     #[cfg(feature = "core_export")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:401:
             })
             .collect();
         let core = CoreExportService {};
-        core
-            .generate_csv_simple(&mapped, Some(&CsvExportConfig::default()))
+        core.generate_csv_simple(&mapped, Some(&CsvExportConfig::default()))
             .map_err(|_e| ApiError::InternalServerError)?
     };
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:409:
     #[cfg(not(feature = "core_export"))]
-    let body_bytes: Vec<u8> = {
-        let cfg = CsvExportConfig::default();
-        let mut out = String::new();
-        if cfg.include_header {
-            out.push_str(&format!(
-                "Date{}Description{}Amount{}Category{}Account{}Payee{}Type\n",
-                cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter
-            ));
-        }
-        for row in rows_all.iter() {
-            let date: NaiveDate = row.get("transaction_date");
-            let desc: String = row.try_get::<String, _>("description").unwrap_or_default();
-            let amount: Decimal = row.get("amount");
-            let category: Option<String> = row
-                .try_get::<String, _>("category_name")
-                .ok()
-                .and_then(|s| if s.is_empty() { None } else { Some(s) });
-            let account_id: Uuid = row.get("account_id");
-            let payee: Option<String> = row
-                .try_get::<String, _>("payee_name")
-                .ok()
-                .and_then(|s| if s.is_empty() { None } else { Some(s) });
-            let ttype: String = row.get("transaction_type");
-            let fields = [
-                date.to_string(),
-                csv_escape_cell(desc, cfg.delimiter),
-                amount.to_string(),
-                csv_escape_cell(category.clone().unwrap_or_default(), cfg.delimiter),
-                account_id.to_string(),
-                csv_escape_cell(payee.clone().unwrap_or_default(), cfg.delimiter),
-                csv_escape_cell(ttype, cfg.delimiter),
-            ];
-            out.push_str(&fields.join(&cfg.delimiter.to_string()));
-            out.push('\n');
-        }
-        out.into_bytes()
-    };
+    let body_bytes: Vec<u8> =
+        {
+            let cfg = CsvExportConfig::default();
+            let mut out = String::new();
+            if cfg.include_header {
+                out.push_str(&format!(
+                    "Date{}Description{}Amount{}Category{}Account{}Payee{}Type\n",
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter,
+                    cfg.delimiter
+                ));
+            }
+            for row in rows_all.iter() {
+                let date: NaiveDate = row.get("transaction_date");
+                let desc: String = row.try_get::<String, _>("description").unwrap_or_default();
+                let amount: Decimal = row.get("amount");
+                let category: Option<String> = row
+                    .try_get::<String, _>("category_name")
+                    .ok()
+                    .and_then(|s| if s.is_empty() { None } else { Some(s) });
+                let account_id: Uuid = row.get("account_id");
+                let payee: Option<String> = row
+                    .try_get::<String, _>("payee_name")
+                    .ok()
+                    .and_then(|s| if s.is_empty() { None } else { Some(s) });
+                let ttype: String = row.get("transaction_type");
+                let fields = [
+                    date.to_string(),
+                    csv_escape_cell(desc, cfg.delimiter),
+                    amount.to_string(),
+                    csv_escape_cell(category.clone().unwrap_or_default(), cfg.delimiter),
+                    account_id.to_string(),
+                    csv_escape_cell(payee.clone().unwrap_or_default(), cfg.delimiter),
+                    csv_escape_cell(ttype, cfg.delimiter),
+                ];
+                out.push_str(&fields.join(&cfg.delimiter.to_string()));
+                out.push('\n');
+            }
+            out.into_bytes()
+        };
 
     // Audit log the export action (best-effort, ignore errors). We estimate row count via a COUNT query.
     let mut count_q = QueryBuilder::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:450:
         "SELECT COUNT(*) AS c FROM transactions t JOIN ledgers l ON t.ledger_id = l.id WHERE t.deleted_at IS NULL AND l.family_id = "
     );
     count_q.push_bind(ctx.family_id);
-    if let Some(account_id) = q.account_id { count_q.push(" AND t.account_id = "); count_q.push_bind(account_id); }
-    if let Some(ledger_id) = q.ledger_id { count_q.push(" AND t.ledger_id = "); count_q.push_bind(ledger_id); }
-    if let Some(category_id) = q.category_id { count_q.push(" AND t.category_id = "); count_q.push_bind(category_id); }
-    if let Some(start_date) = q.start_date { count_q.push(" AND t.transaction_date >= "); count_q.push_bind(start_date); }
-    if let Some(end_date) = q.end_date { count_q.push(" AND t.transaction_date <= "); count_q.push_bind(end_date); }
-    let estimated_count: i64 = count_q.build().fetch_one(&pool).await
+    if let Some(account_id) = q.account_id {
+        count_q.push(" AND t.account_id = ");
+        count_q.push_bind(account_id);
+    }
+    if let Some(ledger_id) = q.ledger_id {
+        count_q.push(" AND t.ledger_id = ");
+        count_q.push_bind(ledger_id);
+    }
+    if let Some(category_id) = q.category_id {
+        count_q.push(" AND t.category_id = ");
+        count_q.push_bind(category_id);
+    }
+    if let Some(start_date) = q.start_date {
+        count_q.push(" AND t.transaction_date >= ");
+        count_q.push_bind(start_date);
+    }
+    if let Some(end_date) = q.end_date {
+        count_q.push(" AND t.transaction_date <= ");
+        count_q.push_bind(end_date);
+    }
+    let estimated_count: i64 = count_q
+        .build()
+        .fetch_one(&pool)
+        .await
         .ok()
         .and_then(|row| row.try_get::<i64, _>("c").ok())
         .unwrap_or(0);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:471:
         .and_then(|v| v.to_str().ok())
         .map(|s| s.split(',').next().unwrap_or(s).trim().to_string());
 
-    let audit_id = AuditService::new(pool.clone()).log_action_returning_id(
-        ctx.family_id,
-        ctx.user_id,
-        crate::models::audit::CreateAuditLogRequest {
-            action: crate::models::audit::AuditAction::Export,
-            entity_type: "transactions".to_string(),
-            entity_id: None,
-            old_values: None,
-            new_values: Some(serde_json::json!({
-                "estimated_count": estimated_count,
-                "filters": {
-                    "account_id": q.account_id,
-                    "ledger_id": q.ledger_id,
-                    "category_id": q.category_id,
-                    "start_date": q.start_date,
-                    "end_date": q.end_date,
-                }
-            })),
-        },
-        ip,
-        ua,
-    ).await.ok();
+    let audit_id = AuditService::new(pool.clone())
+        .log_action_returning_id(
+            ctx.family_id,
+            ctx.user_id,
+            crate::models::audit::CreateAuditLogRequest {
+                action: crate::models::audit::AuditAction::Export,
+                entity_type: "transactions".to_string(),
+                entity_id: None,
+                old_values: None,
+                new_values: Some(serde_json::json!({
+                    "estimated_count": estimated_count,
+                    "filters": {
+                        "account_id": q.account_id,
+                        "ledger_id": q.ledger_id,
+                        "category_id": q.category_id,
+                        "start_date": q.start_date,
+                        "end_date": q.end_date,
+                    }
+                })),
+            },
+            ip,
+            ua,
+        )
+        .await
+        .ok();
 
-    let filename = format!("transactions_export_{}.csv", Utc::now().format("%Y%m%d%H%M%S"));
+    let filename = format!(
+        "transactions_export_{}.csv",
+        Utc::now().format("%Y%m%d%H%M%S")
+    );
     let mut headers_map = header::HeaderMap::new();
-    headers_map.insert(header::CONTENT_TYPE, "text/csv; charset=utf-8".parse().unwrap());
     headers_map.insert(
+        header::CONTENT_TYPE,
+        "text/csv; charset=utf-8".parse().unwrap(),
+    );
+    headers_map.insert(
         header::CONTENT_DISPOSITION,
-        format!("attachment; filename=\"{}\"", filename).parse().unwrap(),
+        format!("attachment; filename=\"{}\"", filename)
+            .parse()
+            .unwrap(),
     );
-    if let Some(aid) = audit_id { headers_map.insert("x-audit-id", aid.to_string().parse().unwrap()); }
+    if let Some(aid) = audit_id {
+        headers_map.insert("x-audit-id", aid.to_string().parse().unwrap());
+    }
     Ok((headers_map, Body::from(body_bytes)))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:636:
          FROM transactions t
          LEFT JOIN categories c ON t.category_id = c.id
          LEFT JOIN payees p ON t.payee_id = p.id
-         WHERE t.deleted_at IS NULL"
+         WHERE t.deleted_at IS NULL",
     );
-    
+
     // 添加过滤条件
     if let Some(account_id) = params.account_id {
         query.push(" AND t.account_id = ");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:645:
         query.push_bind(account_id);
     }
-    
+
     if let Some(ledger_id) = params.ledger_id {
         query.push(" AND t.ledger_id = ");
         query.push_bind(ledger_id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:651:
     }
-    
+
     if let Some(category_id) = params.category_id {
         query.push(" AND t.category_id = ");
         query.push_bind(category_id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:656:
     }
-    
+
     if let Some(payee_id) = params.payee_id {
         query.push(" AND t.payee_id = ");
         query.push_bind(payee_id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:661:
     }
-    
+
     if let Some(start_date) = params.start_date {
         query.push(" AND t.transaction_date >= ");
         query.push_bind(start_date);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:666:
     }
-    
+
     if let Some(end_date) = params.end_date {
         query.push(" AND t.transaction_date <= ");
         query.push_bind(end_date);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:671:
     }
-    
+
     if let Some(min_amount) = params.min_amount {
         query.push(" AND ABS(t.amount) >= ");
         query.push_bind(min_amount);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:676:
     }
-    
+
     if let Some(max_amount) = params.max_amount {
         query.push(" AND ABS(t.amount) <= ");
         query.push_bind(max_amount);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:681:
     }
-    
+
     if let Some(transaction_type) = params.transaction_type {
         query.push(" AND t.transaction_type = ");
         query.push_bind(transaction_type);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:686:
     }
-    
+
     if let Some(status) = params.status {
         query.push(" AND t.status = ");
         query.push_bind(status);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:691:
     }
-    
+
     if let Some(search) = params.search {
         query.push(" AND (t.description ILIKE ");
         query.push_bind(format!("%{}%", search));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:699:
         query.push_bind(format!("%{}%", search));
         query.push(")");
     }
-    
+
     // 排序 - 处理字段名映射
-    let sort_by = params.sort_by.unwrap_or_else(|| "transaction_date".to_string());
+    let sort_by = params
+        .sort_by
+        .unwrap_or_else(|| "transaction_date".to_string());
     let sort_column = match sort_by.as_str() {
         "date" => "transaction_date",
         other => other,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:708:
     };
     let sort_order = params.sort_order.unwrap_or_else(|| "DESC".to_string());
     query.push(format!(" ORDER BY t.{} {}", sort_column, sort_order));
-    
+
     // 分页
     let page = params.page.unwrap_or(1);
     let per_page = params.per_page.unwrap_or(50);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:715:
     let offset = ((page - 1) * per_page) as i64;
-    
+
     query.push(" LIMIT ");
     query.push_bind(per_page as i64);
     query.push(" OFFSET ");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:720:
     query.push_bind(offset);
-    
+
     // 执行查询
     let transactions = query
         .build()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:725:
         .fetch_all(&pool)
         .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 转换为响应格式
     let mut response = Vec::new();
     for row in transactions {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:741:
         } else {
             Vec::new()
         };
-        
+
         response.push(TransactionResponse {
             id: row.get("id"),
             account_id: row.get("account_id"),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:752:
             category_id: row.get("category_id"),
             category_name: row.try_get("category_name").ok(),
             payee_id: row.get("payee_id"),
-            payee_name: row.try_get("payee_name").ok().or_else(|| row.get("payee_name")),
+            payee_name: row
+                .try_get("payee_name")
+                .ok()
+                .or_else(|| row.get("payee_name")),
             description: row.get("description"),
             notes: row.get("notes"),
             tags,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:765:
             updated_at: row.get("updated_at"),
         });
     }
-    
+
     Ok(Json(response))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:781:
         LEFT JOIN categories c ON t.category_id = c.id
         LEFT JOIN payees p ON t.payee_id = p.id
         WHERE t.id = $1 AND t.deleted_at IS NULL
-        "#
+        "#,
     )
     .bind(id)
     .fetch_optional(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:788:
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?
     .ok_or(ApiError::NotFound("Transaction not found".to_string()))?;
-    
+
     let tags_json: Option<serde_json::Value> = row.get("tags");
     let tags = if let Some(json_val) = tags_json {
         if let Some(arr) = json_val.as_array() {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:801:
     } else {
         Vec::new()
     };
-    
+
     let response = TransactionResponse {
         id: row.get("id"),
         account_id: row.get("account_id"),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:824:
         created_at: row.get("created_at"),
         updated_at: row.get("updated_at"),
     };
-    
+
     Ok(Json(response))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:835:
 ) -> ApiResult<Json<TransactionResponse>> {
     let id = Uuid::new_v4();
     let _tags_json = req.tags.map(|t| serde_json::json!(t));
-    
+
     // 开始事务
-    let mut tx = pool.begin().await
+    let mut tx = pool
+        .begin()
+        .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 创建交易
     sqlx::query(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:852:
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 
             $11, $12, $13, $14, $15, $16, $17, NOW(), NOW()
         )
-        "#
+        "#,
     )
     .bind(id)
     .bind(req.account_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:861:
     .bind(&req.transaction_type)
     .bind(req.transaction_date)
     .bind(req.category_id)
-    .bind(req.payee_name.clone().or_else(|| Some("Unknown".to_string())))
+    .bind(
+        req.payee_name
+            .clone()
+            .or_else(|| Some("Unknown".to_string())),
+    )
     .bind(req.payee_id)
     .bind(req.payee_name.clone())
     .bind(req.description.clone())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:874:
     .execute(&mut *tx)
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 更新账户余额
     let amount_change = if req.transaction_type == "expense" {
         -req.amount
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:881:
     } else {
         req.amount
     };
-    
+
     sqlx::query(
         r#"
         UPDATE accounts 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:888:
         SET current_balance = current_balance + $1,
             updated_at = NOW()
         WHERE id = $2
-        "#
+        "#,
     )
     .bind(amount_change)
     .bind(req.account_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:895:
     .execute(&mut *tx)
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 提交事务
-    tx.commit().await
+    tx.commit()
+        .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 查询完整的交易信息
     get_transaction(Path(id), State(pool)).await
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:912:
 ) -> ApiResult<Json<TransactionResponse>> {
     // 构建动态更新查询
     let mut query = QueryBuilder::new("UPDATE transactions SET updated_at = NOW()");
-    
+
     if let Some(amount) = req.amount {
         query.push(", amount = ");
         query.push_bind(amount);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:919:
     }
-    
+
     if let Some(transaction_date) = req.transaction_date {
         query.push(", transaction_date = ");
         query.push_bind(transaction_date);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:924:
     }
-    
+
     if let Some(category_id) = req.category_id {
         query.push(", category_id = ");
         query.push_bind(category_id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:929:
     }
-    
+
     if let Some(payee_id) = req.payee_id {
         query.push(", payee_id = ");
         query.push_bind(payee_id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:934:
     }
-    
+
     if let Some(payee_name) = &req.payee_name {
         query.push(", payee_name = ");
         query.push_bind(payee_name);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:939:
     }
-    
+
     if let Some(description) = &req.description {
         query.push(", description = ");
         query.push_bind(description);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:944:
     }
-    
+
     if let Some(notes) = &req.notes {
         query.push(", notes = ");
         query.push_bind(notes);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:949:
     }
-    
+
     if let Some(tags) = req.tags {
         query.push(", tags = ");
         query.push_bind(serde_json::json!(tags));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:954:
     }
-    
+
     if let Some(location) = &req.location {
         query.push(", location = ");
         query.push_bind(location);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:959:
     }
-    
+
     if let Some(receipt_url) = &req.receipt_url {
         query.push(", receipt_url = ");
         query.push_bind(receipt_url);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:964:
     }
-    
+
     if let Some(status) = &req.status {
         query.push(", status = ");
         query.push_bind(status);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:969:
     }
-    
+
     query.push(" WHERE id = ");
     query.push_bind(id);
     query.push(" AND deleted_at IS NULL");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:974:
-    
+
     let result = query
         .build()
         .execute(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:978:
         .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     if result.rows_affected() == 0 {
         return Err(ApiError::NotFound("Transaction not found".to_string()));
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:984:
-    
+
     // 返回更新后的交易
     get_transaction(Path(id), State(pool)).await
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:992:
     State(pool): State<PgPool>,
 ) -> ApiResult<StatusCode> {
     // 开始事务
-    let mut tx = pool.begin().await
+    let mut tx = pool
+        .begin()
+        .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 获取交易信息以便回滚余额
     let row = sqlx::query(
         "SELECT account_id, amount, transaction_type FROM transactions WHERE id = $1 AND deleted_at IS NULL"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1004:
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?
     .ok_or(ApiError::NotFound("Transaction not found".to_string()))?;
-    
+
     let account_id: Uuid = row.get("account_id");
     let amount: Decimal = row.get("amount");
     let transaction_type: String = row.get("transaction_type");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1011:
-    
+
     // 软删除交易
-    sqlx::query(
-        "UPDATE transactions SET deleted_at = NOW(), updated_at = NOW() WHERE id = $1"
-    )
-    .bind(id)
-    .execute(&mut *tx)
-    .await
-    .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+    sqlx::query("UPDATE transactions SET deleted_at = NOW(), updated_at = NOW() WHERE id = $1")
+        .bind(id)
+        .execute(&mut *tx)
+        .await
+        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+
     // 回滚账户余额
     let amount_change = if transaction_type == "expense" {
         amount
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1024:
     } else {
         -amount
     };
-    
+
     sqlx::query(
         r#"
         UPDATE accounts 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1031:
         SET current_balance = current_balance + $1,
             updated_at = NOW()
         WHERE id = $2
-        "#
+        "#,
     )
     .bind(amount_change)
     .bind(account_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1038:
     .execute(&mut *tx)
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     // 提交事务
-    tx.commit().await
+    tx.commit()
+        .await
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     Ok(StatusCode::NO_CONTENT)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1055:
         "delete" => {
             // 批量软删除
             let mut query = QueryBuilder::new(
-                "UPDATE transactions SET deleted_at = NOW(), updated_at = NOW() WHERE id IN ("
+                "UPDATE transactions SET deleted_at = NOW(), updated_at = NOW() WHERE id IN (",
             );
-            
+
             let mut separated = query.separated(", ");
             for id in &req.transaction_ids {
                 separated.push_bind(id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1064:
             }
             query.push(") AND deleted_at IS NULL");
-            
+
             let result = query
                 .build()
                 .execute(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1070:
                 .await
                 .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-            
+
             Ok(Json(serde_json::json!({
                 "operation": "delete",
                 "affected": result.rows_affected()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1076:
             })))
         }
         "update_category" => {
-            let category_id = req.category_id
+            let category_id = req
+                .category_id
                 .ok_or(ApiError::BadRequest("category_id is required".to_string()))?;
-            
-            let mut query = QueryBuilder::new(
-                "UPDATE transactions SET category_id = "
-            );
+
+            let mut query = QueryBuilder::new("UPDATE transactions SET category_id = ");
             query.push_bind(category_id);
             query.push(", updated_at = NOW() WHERE id IN (");
-            
+
             let mut separated = query.separated(", ");
             for id in &req.transaction_ids {
                 separated.push_bind(id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1091:
             }
             query.push(") AND deleted_at IS NULL");
-            
+
             let result = query
                 .build()
                 .execute(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1097:
                 .await
                 .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-            
+
             Ok(Json(serde_json::json!({
                 "operation": "update_category",
                 "affected": result.rows_affected()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1103:
             })))
         }
         "update_status" => {
-            let status = req.status
+            let status = req
+                .status
                 .ok_or(ApiError::BadRequest("status is required".to_string()))?;
-            
-            let mut query = QueryBuilder::new(
-                "UPDATE transactions SET status = "
-            );
+
+            let mut query = QueryBuilder::new("UPDATE transactions SET status = ");
             query.push_bind(status);
             query.push(", updated_at = NOW() WHERE id IN (");
-            
+
             let mut separated = query.separated(", ");
             for id in &req.transaction_ids {
                 separated.push_bind(id);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1118:
             }
             query.push(") AND deleted_at IS NULL");
-            
+
             let result = query
                 .build()
                 .execute(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1124:
                 .await
                 .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-            
+
             Ok(Json(serde_json::json!({
                 "operation": "update_status",
                 "affected": result.rows_affected()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1130:
             })))
         }
-        _ => Err(ApiError::BadRequest("Invalid operation".to_string()))
+        _ => Err(ApiError::BadRequest("Invalid operation".to_string())),
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1138:
     Query(params): Query<TransactionQuery>,
     State(pool): State<PgPool>,
 ) -> ApiResult<Json<TransactionStatistics>> {
-    let ledger_id = params.ledger_id
+    let ledger_id = params
+        .ledger_id
         .ok_or(ApiError::BadRequest("ledger_id is required".to_string()))?;
-    
+
     // 获取总体统计
     let stats = sqlx::query(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1150:
             SUM(CASE WHEN transaction_type = 'expense' THEN amount ELSE 0 END) as total_expense
         FROM transactions
         WHERE ledger_id = $1 AND deleted_at IS NULL
-        "#
+        "#,
     )
     .bind(ledger_id)
     .fetch_one(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1157:
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     let total_count: i64 = stats.try_get("total_count").unwrap_or(0);
     let total_income: Option<Decimal> = stats.try_get("total_income").ok();
     let total_expense: Option<Decimal> = stats.try_get("total_expense").ok();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1168:
     } else {
         Decimal::ZERO
     };
-    
+
     // 按分类统计
     let category_stats = sqlx::query(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1181:
         WHERE ledger_id = $1 AND deleted_at IS NULL AND category_id IS NOT NULL
         GROUP BY category_id, category_name
         ORDER BY total_amount DESC
-        "#
+        "#,
     )
     .bind(ledger_id)
     .fetch_all(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1188:
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     let total_categorized = category_stats
         .iter()
         .map(|s| {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1195:
             amount.unwrap_or(Decimal::ZERO)
         })
         .sum::<Decimal>();
-    
+
     let by_category: Vec<CategoryStatistics> = category_stats
         .into_iter()
         .filter_map(|row| {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1202:
             let category_id: Option<Uuid> = row.try_get("category_id").ok();
             let category_name: Option<String> = row.try_get("category_name").ok();
-            
+
             if let (Some(id), Some(name)) = (category_id, category_name) {
                 let count: i64 = row.try_get("count").unwrap_or(0);
                 let total_amount: Option<Decimal> = row.try_get("total_amount").ok();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1208:
                 let amount = total_amount.unwrap_or(Decimal::ZERO);
                 let percentage = if total_categorized > Decimal::ZERO {
-                    (amount / total_categorized * Decimal::from(100)).to_f64().unwrap_or(0.0)
+                    (amount / total_categorized * Decimal::from(100))
+                        .to_f64()
+                        .unwrap_or(0.0)
                 } else {
                     0.0
                 };
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1214:
-                
+
                 Some(CategoryStatistics {
                     category_id: id,
                     category_name: name,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1224:
             }
         })
         .collect();
-    
+
     // 按月统计（最近12个月）
     let monthly_stats = sqlx::query(
         r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1239:
             AND transaction_date >= CURRENT_DATE - INTERVAL '12 months'
         GROUP BY TO_CHAR(transaction_date, 'YYYY-MM')
         ORDER BY month DESC
-        "#
+        "#,
     )
     .bind(ledger_id)
     .fetch_all(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1246:
     .await
     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
-    
+
     let by_month: Vec<MonthlyStatistics> = monthly_stats
         .into_iter()
         .map(|row| {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1253:
             let income: Option<Decimal> = row.try_get("income").ok();
             let expense: Option<Decimal> = row.try_get("expense").ok();
             let transaction_count: i64 = row.try_get("transaction_count").unwrap_or(0);
-            
+
             let income = income.unwrap_or(Decimal::ZERO);
             let expense = expense.unwrap_or(Decimal::ZERO);
-            
+
             MonthlyStatistics {
                 month,
                 income,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1266:
             }
         })
         .collect();
-    
+
     let response = TransactionStatistics {
         total_count,
         total_income,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/transactions.rs:1276:
         by_category,
         by_month,
     };
-    
+
     Ok(Json(response))
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:6:
     http::StatusCode,
     response::Json,
 };
+use chrono::{DateTime, NaiveDate, Utc};
+use rust_decimal::Decimal;
 use serde::{Deserialize, Serialize};
-use sqlx::{PgPool, FromRow};
+use sqlx::{FromRow, PgPool};
 use uuid::Uuid;
-use rust_decimal::Decimal;
-use chrono::{DateTime, NaiveDate, Utc};
 
-use crate::{auth::Claims, error::{ApiError, ApiResult}};
+use crate::{
+    auth::Claims,
+    error::{ApiError, ApiResult},
+};
 
 /// 旅行设置
 #[derive(Debug, Clone, Serialize, Deserialize, Default)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:188:
     // 检查是否已有活跃的旅行
     let active_count: i64 = sqlx::query_scalar(
         "SELECT COUNT(*) FROM travel_events
-         WHERE family_id = $1 AND status = 'active'"
+         WHERE family_id = $1 AND status = 'active'",
     )
     .bind(claims.family_id)
     .fetch_one(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:196:
 
     if active_count > 0 {
         return Err(ApiError::BadRequest(
-            "Family already has an active travel event".to_string()
+            "Family already has an active travel event".to_string(),
         ));
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:212:
             total_budget, budget_currency_code, home_currency_code,
             settings, created_by
         ) VALUES ($1, $2, 'planning', $3, $4, $5, $6, $7, $8, $9)
-        RETURNING *"
+        RETURNING *",
     )
     .bind(claims.family_id)
     .bind(&input.trip_name)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:239:
     // 获取现有事件
     let mut event = sqlx::query_as::<_, TravelEvent>(
         "SELECT * FROM travel_events
-         WHERE id = $1 AND family_id = $2"
+         WHERE id = $1 AND family_id = $2",
     )
     .bind(id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:264:
         event.budget_currency_code = Some(budget_currency_code);
     }
     if let Some(settings) = input.settings {
-        event.settings = serde_json::to_value(&settings)
-            .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        event.settings =
+            serde_json::to_value(&settings).map_err(|e| ApiError::DatabaseError(e.to_string()))?;
     }
 
     // 更新数据库
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:279:
             settings = $7,
             updated_at = NOW()
         WHERE id = $1
-        RETURNING *"
+        RETURNING *",
     )
     .bind(id)
     .bind(&event.trip_name)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:302:
 ) -> ApiResult<Json<TravelEvent>> {
     let event = sqlx::query_as::<_, TravelEvent>(
         "SELECT * FROM travel_events
-         WHERE id = $1 AND family_id = $2"
+         WHERE id = $1 AND family_id = $2",
     )
     .bind(id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:319:
     claims: Claims,
     Query(query): Query<ListTravelEventsQuery>,
 ) -> ApiResult<Json<Vec<TravelEvent>>> {
-    let mut sql = String::from(
-        "SELECT * FROM travel_events WHERE family_id = $1"
-    );
+    let mut sql = String::from("SELECT * FROM travel_events WHERE family_id = $1");
 
     if let Some(_status) = &query.status {
         sql.push_str(" AND status = $2");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:358:
         "SELECT * FROM travel_events
          WHERE family_id = $1 AND status = 'active'
          ORDER BY created_at DESC
-         LIMIT 1"
+         LIMIT 1",
     )
     .bind(claims.family_id)
     .fetch_optional(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:376:
     // 检查事件状态
     let event: TravelEvent = sqlx::query_as(
         "SELECT * FROM travel_events
-         WHERE id = $1 AND family_id = $2"
+         WHERE id = $1 AND family_id = $2",
     )
     .bind(id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:386:
 
     if event.status != "planning" {
         return Err(ApiError::BadRequest(
-            "Travel event cannot be activated from current status".to_string()
+            "Travel event cannot be activated from current status".to_string(),
         ));
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:394:
     sqlx::query(
         "UPDATE travel_events
          SET status = 'completed', updated_at = NOW()
-         WHERE family_id = $1 AND status = 'active' AND id != $2"
+         WHERE family_id = $1 AND status = 'active' AND id != $2",
     )
     .bind(claims.family_id)
     .bind(id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:406:
         "UPDATE travel_events
          SET status = 'active', updated_at = NOW()
          WHERE id = $1
-         RETURNING *"
+         RETURNING *",
     )
     .bind(id)
     .fetch_one(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:423:
 ) -> ApiResult<Json<TravelEvent>> {
     let event: TravelEvent = sqlx::query_as(
         "SELECT * FROM travel_events
-         WHERE id = $1 AND family_id = $2"
+         WHERE id = $1 AND family_id = $2",
     )
     .bind(id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:433:
 
     if event.status != "active" {
         return Err(ApiError::BadRequest(
-            "Travel event cannot be completed from current status".to_string()
+            "Travel event cannot be completed from current status".to_string(),
         ));
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:441:
         "UPDATE travel_events
          SET status = 'completed', updated_at = NOW()
          WHERE id = $1
-         RETURNING *"
+         RETURNING *",
     )
     .bind(id)
     .fetch_one(&pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:460:
         "UPDATE travel_events
          SET status = 'cancelled', updated_at = NOW()
          WHERE id = $1 AND family_id = $2
-         RETURNING *"
+         RETURNING *",
     )
     .bind(id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:478:
     Json(input): Json<AttachTransactionsInput>,
 ) -> ApiResult<Json<serde_json::Value>> {
     // 验证旅行存在
-    let _: (Uuid,) = sqlx::query_as(
-        "SELECT id FROM travel_events WHERE id = $1 AND family_id = $2"
-    )
-    .bind(travel_id)
-    .bind(claims.family_id)
-    .fetch_optional(&pool)
-    .await?
-    .ok_or_else(|| ApiError::NotFound("Travel event not found".to_string()))?;
+    let _: (Uuid,) =
+        sqlx::query_as("SELECT id FROM travel_events WHERE id = $1 AND family_id = $2")
+            .bind(travel_id)
+            .bind(claims.family_id)
+            .fetch_optional(&pool)
+            .await?
+            .ok_or_else(|| ApiError::NotFound("Travel event not found".to_string()))?;
 
     let user_id = claims.user_id()?;
     let mut transaction_ids = Vec::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:496:
     }
     // 或根据过滤器查找交易
     else if let Some(filter) = input.filter {
-        let mut query = String::from(
-            "SELECT id FROM transactions WHERE family_id = $1"
-        );
+        let mut query = String::from("SELECT id FROM transactions WHERE family_id = $1");
 
         if let Some(start_date) = filter.start_date {
             query.push_str(&format!(" AND date >= '{}'", start_date));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:523:
         let result = sqlx::query(
             "INSERT INTO travel_transactions (travel_event_id, transaction_id, attached_by)
              VALUES ($1, $2, $3)
-             ON CONFLICT (travel_event_id, transaction_id) DO NOTHING"
+             ON CONFLICT (travel_event_id, transaction_id) DO NOTHING",
         )
         .bind(travel_id)
         .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:554:
 ) -> ApiResult<StatusCode> {
     sqlx::query(
         "DELETE FROM travel_transactions
-         WHERE travel_event_id = $1 AND transaction_id = $2"
+         WHERE travel_event_id = $1 AND transaction_id = $2",
     )
     .bind(travel_id)
     .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:583:
     }
 
     // 验证旅行存在
-    let _: (Uuid,) = sqlx::query_as(
-        "SELECT id FROM travel_events WHERE id = $1 AND family_id = $2"
-    )
-    .bind(travel_id)
-    .bind(claims.family_id)
-    .fetch_optional(&pool)
-    .await?
-    .ok_or_else(|| ApiError::NotFound("Travel event not found".to_string()))?;
+    let _: (Uuid,) =
+        sqlx::query_as("SELECT id FROM travel_events WHERE id = $1 AND family_id = $2")
+            .bind(travel_id)
+            .bind(claims.family_id)
+            .fetch_optional(&pool)
+            .await?
+            .ok_or_else(|| ApiError::NotFound("Travel event not found".to_string()))?;
 
     let budget = sqlx::query_as::<_, TravelBudget>(
         "INSERT INTO travel_budgets (
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:603:
             budget_currency_code = EXCLUDED.budget_currency_code,
             alert_threshold = EXCLUDED.alert_threshold,
             updated_at = NOW()
-        RETURNING *"
+        RETURNING *",
     )
     .bind(travel_id)
     .bind(input.category_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:626:
         "SELECT tb.* FROM travel_budgets tb
          JOIN travel_events te ON tb.travel_event_id = te.id
          WHERE tb.travel_event_id = $1 AND te.family_id = $2
-         ORDER BY tb.category_id"
+         ORDER BY tb.category_id",
     )
     .bind(travel_id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:644:
 ) -> ApiResult<Json<TravelStatistics>> {
     let event: TravelEvent = sqlx::query_as(
         "SELECT * FROM travel_events
-         WHERE id = $1 AND family_id = $2"
+         WHERE id = $1 AND family_id = $2",
     )
     .bind(travel_id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:680:
         GROUP BY c.id, c.name
         HAVING COUNT(t.id) > 0
         ORDER BY amount DESC
-        "#
+        "#,
     )
     .bind(travel_id)
     .bind(claims.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:688:
     .await?;
 
     let total = event.total_spent;
-    let categories: Vec<CategorySpending> = category_spending.into_iter().map(|row| {
-        let amount = row.amount;
-        let percentage = if total.is_zero() {
-            Decimal::ZERO
-        } else {
-            (amount / total) * Decimal::from(100)
-        };
+    let categories: Vec<CategorySpending> = category_spending
+        .into_iter()
+        .map(|row| {
+            let amount = row.amount;
+            let percentage = if total.is_zero() {
+                Decimal::ZERO
+            } else {
+                (amount / total) * Decimal::from(100)
+            };
 
-        CategorySpending {
-            category_id: row.category_id,
-            category_name: row.category_name,
-            amount,
-            percentage,
-            transaction_count: row.transaction_count as i32,
-        }
-    }).collect();
+            CategorySpending {
+                category_id: row.category_id,
+                category_name: row.category_name,
+                amount,
+                percentage,
+                transaction_count: row.transaction_count as i32,
+            }
+        })
+        .collect();
 
     // 计算日均花费
     let duration_days = (event.end_date - event.start_date).num_days() + 1;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/handlers/travel.rs:732:
 
     Ok(Json(stats))
 }
+
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/lib.rs:1:
 #![allow(dead_code, unused_imports)]
 
-pub mod handlers;
-pub mod error;
 pub mod auth;
+pub mod error;
+pub mod handlers;
+pub mod middleware;
 pub mod models;
 pub mod services;
-pub mod middleware;
 pub mod ws;
 
-use sqlx::PgPool;
 use axum::extract::FromRef;
+use sqlx::PgPool;
 
 /// 应用状态
 #[derive(Clone)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/lib.rs:16:
 pub struct AppState {
     pub pool: PgPool,
-    pub ws_manager: Option<std::sync::Arc<crate::ws::WsConnectionManager>>,  // Optional WebSocket manager
+    pub ws_manager: Option<std::sync::Arc<crate::ws::WsConnectionManager>>, // Optional WebSocket manager
     pub redis: Option<redis::aio::ConnectionManager>,
     // Minimal metrics surface for middleware to update rate-limited counter
     // In full version, a richer AppMetrics can be reintroduced.
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/lib.rs:39:
 // Re-export commonly used types
 pub use error::{ApiError, ApiResult};
 pub use services::{ServiceContext, ServiceError};
-
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:1:
-use std::{net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr}, str::FromStr};
-use axum::{http::{Request, StatusCode}, response::Response, middleware::Next, body::Body};
+use axum::{
+    body::Body,
+    http::{Request, StatusCode},
+    middleware::Next,
+    response::Response,
+};
+use std::{
+    net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr},
+    str::FromStr,
+};
 use tokio::net::lookup_host;
 
 #[derive(Clone, Debug)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:6:
-pub struct Cidr { network: IpAddr, mask: u32 }
+pub struct Cidr {
+    network: IpAddr,
+    mask: u32,
+}
 
 impl Cidr {
     pub fn parse(s: &str) -> Option<Self> {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:10:
-        if s.is_empty() { return None; }
+        if s.is_empty() {
+            return None;
+        }
         let mut parts = s.split('/');
         let ip = parts.next()?;
         let mask: u32 = parts.next().unwrap_or("32").parse().ok()?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:14:
         let ipaddr = IpAddr::from_str(ip).ok()?;
-        Some(Self { network: ipaddr, mask })
+        Some(Self {
+            network: ipaddr,
+            mask,
+        })
     }
     pub fn contains(&self, ip: &IpAddr) -> bool {
         match (self.network, ip) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:19:
             (IpAddr::V4(n), IpAddr::V4(t)) => {
-                if self.mask > 32 { return false; }
+                if self.mask > 32 {
+                    return false;
+                }
                 let nm = u32::from(n);
                 let tm = u32::from(*t);
-                let m = if self.mask == 0 { 0 } else { u32::MAX.checked_shl(32 - self.mask).unwrap_or(0) };
+                let m = if self.mask == 0 {
+                    0
+                } else {
+                    u32::MAX.checked_shl(32 - self.mask).unwrap_or(0)
+                };
                 (nm & m) == (tm & m)
             }
             (IpAddr::V6(n), IpAddr::V6(t)) => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:27:
-                if self.mask > 128 { return false; }
+                if self.mask > 128 {
+                    return false;
+                }
                 let nb = u128::from(n);
                 let tb = u128::from(*t);
-                let m = if self.mask == 0 { 0 } else { u128::MAX.checked_shl(128 - self.mask).unwrap_or(0) };
+                let m = if self.mask == 0 {
+                    0
+                } else {
+                    u128::MAX.checked_shl(128 - self.mask).unwrap_or(0)
+                };
                 (nb & m) == (tb & m)
             }
             _ => false,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:36:
 }
 
 #[derive(Clone)]
-pub struct MetricsGuardState { pub allow: Vec<Cidr>, pub deny: Vec<Cidr>, pub enabled: bool }
+pub struct MetricsGuardState {
+    pub allow: Vec<Cidr>,
+    pub deny: Vec<Cidr>,
+    pub enabled: bool,
+}
 
 pub async fn metrics_guard(
     axum::extract::ConnectInfo(addr): axum::extract::ConnectInfo<SocketAddr>,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/metrics_guard.rs:44:
     req: Request<Body>,
     next: Next,
 ) -> Result<Response, StatusCode> {
-    if !state.enabled { return Ok(next.run(req).await); }
+    if !state.enabled {
+        return Ok(next.run(req).await);
+    }
     // Prefer X-Forwarded-For first hop if present (left-most)
     let mut ip = addr.ip();
-    if let Some(xff) = req.headers().get("x-forwarded-for").and_then(|v| v.to_str().ok()) {
-        if let Some(first) = xff.split(',').next() { if let Ok(parsed) = first.trim().parse() { ip = parsed; } }
+    if let Some(xff) = req
+        .headers()
+        .get("x-forwarded-for")
+        .and_then(|v| v.to_str().ok())
+    {
+        if let Some(first) = xff.split(',').next() {
+            if let Ok(parsed) = first.trim().parse() {
+                ip = parsed;
+            }
+        }
     }
     // Deny precedence
-    for d in &state.deny { if d.contains(&ip) { return Err(StatusCode::FORBIDDEN); } }
-    for a in &state.allow { if a.contains(&ip) { return Ok(next.run(req).await); } }
+    for d in &state.deny {
+        if d.contains(&ip) {
+            return Err(StatusCode::FORBIDDEN);
+        }
+    }
+    for a in &state.allow {
+        if a.contains(&ip) {
+            return Ok(next.run(req).await);
+        }
+    }
     Err(StatusCode::FORBIDDEN)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/mod.rs:1:
 pub mod auth;
 pub mod cors;
 pub mod error_handler;
+pub mod metrics_guard;
 pub mod permission;
 pub mod rate_limit;
-pub mod metrics_guard;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:1:
-use axum::{
-    extract::Request,
-    http::StatusCode,
-    middleware::Next,
-    response::Response,
-};
+use axum::{extract::Request, http::StatusCode, middleware::Next, response::Response};
 use std::collections::HashMap;
 use std::sync::Arc;
 use std::time::{Duration, Instant};
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:18:
 /// 权限中间件 - 检查单个权限
 pub async fn require_permission(
     required: Permission,
-) -> impl Fn(Request, Next) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>> + Clone {
+) -> impl Fn(
+    Request,
+    Next,
+) -> std::pin::Pin<
+    Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>,
+> + Clone {
     move |request: Request, next: Next| {
         Box::pin(async move {
             // 从request extensions获取ServiceContext
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:26:
                 .extensions()
                 .get::<ServiceContext>()
                 .ok_or(StatusCode::UNAUTHORIZED)?;
-            
+
             // 检查权限
             if !context.can_perform(required) {
                 return Err(StatusCode::FORBIDDEN);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:33:
             }
-            
+
             Ok(next.run(request).await)
         })
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:40:
 /// 多权限中间件 - 检查多个权限（任一满足）
 pub async fn require_any_permission(
     permissions: Vec<Permission>,
-) -> impl Fn(Request, Next) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>> + Clone {
+) -> impl Fn(
+    Request,
+    Next,
+) -> std::pin::Pin<
+    Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>,
+> + Clone {
     move |request: Request, next: Next| {
         let value = permissions.clone();
         Box::pin(async move {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:48:
                 .extensions()
                 .get::<ServiceContext>()
                 .ok_or(StatusCode::UNAUTHORIZED)?;
-            
+
             // 检查是否有任一权限
             let has_permission = value.iter().any(|p| context.can_perform(*p));
-            
+
             if !has_permission {
                 return Err(StatusCode::FORBIDDEN);
             }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:58:
-            
+
             Ok(next.run(request).await)
         })
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:64:
 /// 多权限中间件 - 检查多个权限（全部满足）
 pub async fn require_all_permissions(
     permissions: Vec<Permission>,
-) -> impl Fn(Request, Next) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>> + Clone {
+) -> impl Fn(
+    Request,
+    Next,
+) -> std::pin::Pin<
+    Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>,
+> + Clone {
     move |request: Request, next: Next| {
         let value = permissions.clone();
         Box::pin(async move {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:72:
                 .extensions()
                 .get::<ServiceContext>()
                 .ok_or(StatusCode::UNAUTHORIZED)?;
-            
+
             // 检查是否有所有权限
             let has_all_permissions = value.iter().all(|p| context.can_perform(*p));
-            
+
             if !has_all_permissions {
                 return Err(StatusCode::FORBIDDEN);
             }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:82:
-            
+
             Ok(next.run(request).await)
         })
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:88:
 /// 角色中间件 - 检查最低角色要求
 pub async fn require_minimum_role(
     minimum_role: MemberRole,
-) -> impl Fn(Request, Next) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>> + Clone {
+) -> impl Fn(
+    Request,
+    Next,
+) -> std::pin::Pin<
+    Box<dyn std::future::Future<Output = Result<Response, StatusCode>> + Send>,
+> + Clone {
     move |request: Request, next: Next| {
         Box::pin(async move {
             let context = request
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:95:
                 .extensions()
                 .get::<ServiceContext>()
                 .ok_or(StatusCode::UNAUTHORIZED)?;
-            
+
             // 检查角色级别
             let role_level = match context.role {
                 MemberRole::Owner => 4,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:103:
                 MemberRole::Member => 2,
                 MemberRole::Viewer => 1,
             };
-            
+
             let required_level = match minimum_role {
                 MemberRole::Owner => 4,
                 MemberRole::Admin => 3,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:110:
                 MemberRole::Member => 2,
                 MemberRole::Viewer => 1,
             };
-            
+
             if role_level < required_level {
                 return Err(StatusCode::FORBIDDEN);
             }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:117:
-            
+
             Ok(next.run(request).await)
         })
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:121:
 }
 
 /// Owner专用中间件
-pub async fn require_owner(
-    request: Request,
-    next: Next,
-) -> Result<Response, StatusCode> {
+pub async fn require_owner(request: Request, next: Next) -> Result<Response, StatusCode> {
     let context = request
         .extensions()
         .get::<ServiceContext>()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:131:
         .ok_or(StatusCode::UNAUTHORIZED)?;
-    
+
     if context.role != MemberRole::Owner {
         return Err(StatusCode::FORBIDDEN);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:136:
-    
+
     Ok(next.run(request).await)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:140:
 /// Admin及以上中间件
-pub async fn require_admin_or_owner(
-    request: Request,
-    next: Next,
-) -> Result<Response, StatusCode> {
+pub async fn require_admin_or_owner(request: Request, next: Next) -> Result<Response, StatusCode> {
     let context = request
         .extensions()
         .get::<ServiceContext>()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:148:
         .ok_or(StatusCode::UNAUTHORIZED)?;
-    
+
     if !matches!(context.role, MemberRole::Owner | MemberRole::Admin) {
         return Err(StatusCode::FORBIDDEN);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:153:
-    
+
     Ok(next.run(request).await)
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:170:
             ttl: Duration::from_secs(ttl_seconds),
         }
     }
-    
+
     pub async fn get(&self, user_id: Uuid, family_id: Uuid) -> Option<Vec<Permission>> {
         let cache = self.cache.read().await;
-        
+
         if let Some((permissions, cached_at)) = cache.get(&(user_id, family_id)) {
             if cached_at.elapsed() < self.ttl {
                 return Some(permissions.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:180:
             }
         }
-        
+
         None
     }
-    
+
     pub async fn set(&self, user_id: Uuid, family_id: Uuid, permissions: Vec<Permission>) {
         let mut cache = self.cache.write().await;
         cache.insert((user_id, family_id), (permissions, Instant::now()));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:189:
     }
-    
+
     pub async fn invalidate(&self, user_id: Uuid, family_id: Uuid) {
         let mut cache = self.cache.write().await;
         cache.remove(&(user_id, family_id));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:194:
     }
-    
+
     pub async fn clear(&self) {
         let mut cache = self.cache.write().await;
         cache.clear();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:212:
     pub fn insufficient_permissions(permission: Permission) -> Self {
         Self {
             code: "INSUFFICIENT_PERMISSIONS".to_string(),
-            message: format!("You need '{}' permission to perform this action", permission),
+            message: format!(
+                "You need '{}' permission to perform this action",
+                permission
+            ),
             required_permission: Some(permission.to_string()),
             required_role: None,
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:219:
     }
-    
+
     pub fn insufficient_role(role: MemberRole) -> Self {
         Self {
             code: "INSUFFICIENT_ROLE".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:244:
         ResourceOwnership::OwnedBy(owner_id) => {
             // 资源所有者或有权限的人可以访问
             context.user_id == owner_id || context.can_perform(permission)
-        },
+        }
         ResourceOwnership::SharedInFamily(family_id) => {
             // 必须是Family成员且有权限
             context.family_id == family_id && context.can_perform(permission)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:251:
-        },
+        }
         ResourceOwnership::Public => {
             // 公开资源，只要认证即可
             true
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:255:
-        },
+        }
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:300:
             ],
         }
     }
-    
+
     pub fn check_any(&self, context: &ServiceContext) -> bool {
         self.permissions().iter().any(|p| context.can_perform(*p))
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:307:
-    
+
     pub fn check_all(&self, context: &ServiceContext) -> bool {
         self.permissions().iter().all(|p| context.can_perform(*p))
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:313:
 #[cfg(test)]
 mod tests {
     use super::*;
-    
+
     #[test]
     fn test_permission_group() {
         let context = ServiceContext::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:324:
             "test@example.com".to_string(),
             None,
         );
-        
+
         let group = PermissionGroup::AccountManagement;
         assert!(group.check_any(&context)); // Has some account permissions
         assert!(!group.check_all(&context)); // Doesn't have all
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:331:
     }
-    
+
     #[tokio::test]
     async fn test_permission_cache() {
         let cache = PermissionCache::new(5);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:336:
         let user_id = Uuid::new_v4();
         let family_id = Uuid::new_v4();
         let permissions = vec![Permission::ViewAccounts];
-        
+
         // Set cache
         cache.set(user_id, family_id, permissions.clone()).await;
-        
+
         // Get from cache
         let cached = cache.get(user_id, family_id).await;
         assert_eq!(cached, Some(permissions));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/permission.rs:346:
-        
+
         // Invalidate
         cache.invalidate(user_id, family_id).await;
         let cached = cache.get(user_id, family_id).await;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:1:
-use std::{collections::HashMap, time::{Instant, Duration}, sync::{Arc, Mutex}};
-use axum::{http::{Request, StatusCode, HeaderValue}, response::Response, middleware::Next, body::Body, extract::State};
-use crate::{AppState, error::ApiErrorResponse};
-use tracing::warn;
-use sha2::{Sha256, Digest};
+use crate::{error::ApiErrorResponse, AppState};
+use axum::{
+    body::Body,
+    extract::State,
+    http::{HeaderValue, Request, StatusCode},
+    middleware::Next,
+    response::Response,
+};
+use sha2::{Digest, Sha256};
+use std::{
+    collections::HashMap,
+    sync::{Arc, Mutex},
+    time::{Duration, Instant},
+};
 use tower::BoxError;
+use tracing::warn;
 
 #[derive(Clone)]
 pub struct RateLimiter {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:15:
 
 impl RateLimiter {
     pub fn new(max: u32, window_secs: u64) -> Self {
-        let hash_email = std::env::var("AUTH_RATE_LIMIT_HASH_EMAIL").map(|v| v=="1" || v.eq_ignore_ascii_case("true")).unwrap_or(true);
-        Self { inner: Arc::new(Mutex::new(HashMap::new())), max, window: Duration::from_secs(window_secs), hash_email }
+        let hash_email = std::env::var("AUTH_RATE_LIMIT_HASH_EMAIL")
+            .map(|v| v == "1" || v.eq_ignore_ascii_case("true"))
+            .unwrap_or(true);
+        Self {
+            inner: Arc::new(Mutex::new(HashMap::new())),
+            max,
+            window: Duration::from_secs(window_secs),
+            hash_email,
+        }
     }
     fn check(&self, key: &str) -> (bool, u32, u64) {
         let mut map = self.inner.lock().unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:27:
             map.retain(|_, (_c, start)| now.duration_since(*start) <= window);
         }
         let entry = map.entry(key.to_string()).or_insert((0, now));
-        if now.duration_since(entry.1) > self.window { *entry = (0, now); }
+        if now.duration_since(entry.1) > self.window {
+            *entry = (0, now);
+        }
         entry.0 += 1;
         let allowed = entry.0 <= self.max;
         let remaining = self.max.saturating_sub(entry.0);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:34:
-        let retry_after = self.window.saturating_sub(now.duration_since(entry.1)).as_secs();
+        let retry_after = self
+            .window
+            .saturating_sub(now.duration_since(entry.1))
+            .as_secs();
         (allowed, remaining, retry_after)
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:43:
 ) -> Result<Response, StatusCode> {
     // Buffer body (login payload is small)
     let (parts, body) = req.into_parts();
-    let bytes = match axum::body::to_bytes(body, 64 * 1024).await { Ok(b) => b, Err(_) => {
-        return Ok(Response::builder().status(StatusCode::BAD_REQUEST)
-            .header("Content-Type","application/json")
-            .body(Body::from("{\"error_code\":\"INVALID_BODY\"}"))
-            .unwrap()); } };
-    let ip = parts.headers.get("x-forwarded-for")
-        .and_then(|v| v.to_str().ok()).and_then(|s| s.split(',').next())
-        .unwrap_or("unknown").trim().to_string();
+    let bytes = match axum::body::to_bytes(body, 64 * 1024).await {
+        Ok(b) => b,
+        Err(_) => {
+            return Ok(Response::builder()
+                .status(StatusCode::BAD_REQUEST)
+                .header("Content-Type", "application/json")
+                .body(Body::from("{\"error_code\":\"INVALID_BODY\"}"))
+                .unwrap());
+        }
+    };
+    let ip = parts
+        .headers
+        .get("x-forwarded-for")
+        .and_then(|v| v.to_str().ok())
+        .and_then(|s| s.split(',').next())
+        .unwrap_or("unknown")
+        .trim()
+        .to_string();
     let email_key = extract_email_key(&bytes, limiter.hash_email);
     let key = format!("{}:{}", ip, email_key.unwrap_or_else(|| "_".into()));
     let (allowed, _remain, retry_after) = limiter.check(&key);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:57:
     let req_restored = Request::from_parts(parts, Body::from(bytes));
     if !allowed {
         use std::sync::atomic::Ordering;
-        app_state.rate_limited_counter.fetch_add(1, Ordering::Relaxed);
+        app_state
+            .rate_limited_counter
+            .fetch_add(1, Ordering::Relaxed);
         warn!(event="auth_rate_limit", ip=%ip, retry_after=retry_after, key=%key, "login rate limit triggered");
-        let body = ApiErrorResponse::new("RATE_LIMITED", "Too many login attempts. Please retry later.")
-            .with_retry_after(retry_after);
+        let body = ApiErrorResponse::new(
+            "RATE_LIMITED",
+            "Too many login attempts. Please retry later.",
+        )
+        .with_retry_after(retry_after);
         let resp = Response::builder()
             .status(StatusCode::TOO_MANY_REQUESTS)
             .header("Content-Type", "application/json")
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:67:
-            .header("Retry-After", HeaderValue::from_str(&retry_after.to_string()).unwrap())
+            .header(
+                "Retry-After",
+                HeaderValue::from_str(&retry_after.to_string()).unwrap(),
+            )
             .body(Body::from(serde_json::to_string(&body).unwrap()))
             .unwrap();
         return Ok(resp);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:73:
 }
 
 fn extract_email_key(bytes: &[u8], hash: bool) -> Option<String> {
-    if bytes.is_empty() { return None; }
+    if bytes.is_empty() {
+        return None;
+    }
     let v: serde_json::Value = serde_json::from_slice(bytes).ok()?;
     let raw = v.get("email")?.as_str()?;
     let norm = raw.trim().to_lowercase();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/middleware/rate_limit.rs:80:
-    if norm.is_empty() { return None; }
-    if !hash { return Some(norm); }
-    let mut h = Sha256::new(); h.update(&norm); let hex = format!("{:x}", h.finalize());
+    if norm.is_empty() {
+        return None;
+    }
+    if !hash {
+        return Some(norm);
+    }
+    let mut h = Sha256::new();
+    h.update(&norm);
+    let hex = format!("{:x}", h.finalize());
     Some(hex[..8].to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/bank.rs:17:
         self.name_cn.as_deref().unwrap_or(&self.name)
     }
 }
+
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:109:
     type Error = String;
 
     fn try_from(value: String) -> Result<Self, Self::Error> {
-        MemberRole::from_str_name(&value)
-            .ok_or_else(|| format!("Invalid role: {}", value))
+        MemberRole::from_str_name(&value).ok_or_else(|| format!("Invalid role: {}", value))
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:123:
         let family_id = Uuid::new_v4();
         let user_id = Uuid::new_v4();
         let member = FamilyMember::new(family_id, user_id, MemberRole::Member, None);
-        
+
         assert_eq!(member.family_id, family_id);
         assert_eq!(member.user_id, user_id);
         assert_eq!(member.role, MemberRole::Member);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:136:
         let family_id = Uuid::new_v4();
         let user_id = Uuid::new_v4();
         let mut member = FamilyMember::new(family_id, user_id, MemberRole::Member, None);
-        
+
         member.change_role(MemberRole::Admin);
         assert_eq!(member.role, MemberRole::Admin);
         assert_eq!(member.permissions, MemberRole::Admin.default_permissions());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:147:
         let family_id = Uuid::new_v4();
         let user_id = Uuid::new_v4();
         let mut member = FamilyMember::new(family_id, user_id, MemberRole::Viewer, None);
-        
+
         member.grant_permission(Permission::CreateTransactions);
         assert!(member.permissions.contains(&Permission::CreateTransactions));
-        
+
         member.revoke_permission(Permission::CreateTransactions);
         assert!(!member.permissions.contains(&Permission::CreateTransactions));
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:160:
         let family_id = Uuid::new_v4();
         let user_id = Uuid::new_v4();
         let mut member = FamilyMember::new(family_id, user_id, MemberRole::Member, None);
-        
+
         assert!(member.can_perform(Permission::ViewTransactions));
         assert!(member.can_perform(Permission::CreateTransactions));
         assert!(!member.can_perform(Permission::DeleteFamily));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:167:
-        
+
         member.deactivate();
         assert!(!member.can_perform(Permission::ViewTransactions));
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:173:
     fn test_can_manage_member() {
         let family_id = Uuid::new_v4();
         let user_id = Uuid::new_v4();
-        
+
         let owner = FamilyMember::new(family_id, user_id, MemberRole::Owner, None);
         assert!(owner.can_manage_member(MemberRole::Owner));
         assert!(owner.can_manage_member(MemberRole::Admin));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:180:
         assert!(owner.can_manage_member(MemberRole::Member));
-        
+
         let admin = FamilyMember::new(family_id, user_id, MemberRole::Admin, None);
         assert!(!admin.can_manage_member(MemberRole::Owner));
         assert!(admin.can_manage_member(MemberRole::Admin));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/membership.rs:185:
         assert!(admin.can_manage_member(MemberRole::Member));
-        
+
         let member = FamilyMember::new(family_id, user_id, MemberRole::Member, None);
         assert!(!member.can_manage_member(MemberRole::Member));
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/mod.rs:21:
     InvitationStatus,
 };
 #[allow(unused_imports)]
-pub use membership::{
-    CreateMemberRequest, FamilyMember, MemberWithUserInfo, UpdateMemberRequest,
-};
+pub use membership::{CreateMemberRequest, FamilyMember, MemberWithUserInfo, UpdateMemberRequest};
 #[allow(unused_imports)]
 pub use permission::{MemberRole, Permission};
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:8:
     ViewFamilyInfo,
     UpdateFamilyInfo,
     DeleteFamily,
-    
+
     // 成员管理权限
     ViewMembers,
     InviteMembers,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:15:
     RemoveMembers,
     UpdateMemberRoles,
-    
+
     // 账户管理权限
     ViewAccounts,
     CreateAccounts,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:21:
     EditAccounts,
     DeleteAccounts,
-    
+
     // 交易管理权限
     ViewTransactions,
     CreateTransactions,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:27:
     EditTransactions,
     DeleteTransactions,
     BulkEditTransactions,
-    
+
     // 分类和预算权限
     ViewCategories,
     ManageCategories,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:34:
     ViewBudgets,
     ManageBudgets,
-    
+
     // 报表和数据权限
     ViewReports,
     ExportData,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:40:
-    
+
     // 系统管理权限
     ViewAuditLog,
     ManageIntegrations,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/models/permission.rs:237:
 
     #[test]
     fn test_permission_from_str() {
-        assert_eq!(Permission::from_str_name("ViewFamilyInfo"), Some(Permission::ViewFamilyInfo));
+        assert_eq!(
+            Permission::from_str_name("ViewFamilyInfo"),
+            Some(Permission::ViewFamilyInfo)
+        );
         assert_eq!(Permission::from_str_name("InvalidPermission"), None);
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:14:
     pub fn new(pool: PgPool) -> Self {
         Self { pool }
     }
-    
+
     pub async fn log_action(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:32:
         )
         .with_values(request.old_values, request.new_values)
         .with_request_info(ip_address, user_agent);
-        
+
         sqlx::query(
             r#"
             INSERT INTO family_audit_logs (
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:40:
                 old_values, new_values, ip_address, user_agent, created_at
             )
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
-            "#
+            "#,
         )
         .bind(log.id)
         .bind(log.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:55:
         .bind(log.created_at)
         .execute(&self.pool)
         .await?;
-        
+
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:85:
                 old_values, new_values, ip_address, user_agent, created_at
             )
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
-            "#
+            "#,
         )
         .bind(log.id)
         .bind(log.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:103:
 
         Ok(log.id)
     }
-    
+
     pub async fn get_audit_logs(
         &self,
         filter: AuditLogFilter,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:110:
     ) -> Result<Vec<AuditLog>, ServiceError> {
-        let mut query = String::from(
-            "SELECT * FROM family_audit_logs WHERE 1=1"
-        );
+        let mut query = String::from("SELECT * FROM family_audit_logs WHERE 1=1");
         let mut binds = vec![];
         let mut bind_idx = 1;
-        
+
         if let Some(family_id) = filter.family_id {
             query.push_str(&format!(" AND family_id = ${}", bind_idx));
             binds.push(family_id.to_string());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:120:
             bind_idx += 1;
         }
-        
+
         if let Some(user_id) = filter.user_id {
             query.push_str(&format!(" AND user_id = ${}", bind_idx));
             binds.push(user_id.to_string());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:126:
             bind_idx += 1;
         }
-        
+
         if let Some(action) = filter.action {
             query.push_str(&format!(" AND action = ${}", bind_idx));
             binds.push(action.to_string());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:132:
             bind_idx += 1;
         }
-        
+
         if let Some(entity_type) = filter.entity_type {
             query.push_str(&format!(" AND entity_type = ${}", bind_idx));
             binds.push(entity_type);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:138:
             bind_idx += 1;
         }
-        
+
         if let Some(from_date) = filter.from_date {
             query.push_str(&format!(" AND created_at >= ${}", bind_idx));
             binds.push(from_date.to_rfc3339());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:144:
             bind_idx += 1;
         }
-        
+
         if let Some(to_date) = filter.to_date {
             query.push_str(&format!(" AND created_at <= ${}", bind_idx));
             binds.push(to_date.to_rfc3339());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:150:
             // bind_idx += 1;  // Last increment not needed
         }
-        
+
         query.push_str(" ORDER BY created_at DESC");
-        
+
         if let Some(limit) = filter.limit {
             query.push_str(&format!(" LIMIT {}", limit));
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:158:
-        
+
         if let Some(offset) = filter.offset {
             query.push_str(&format!(" OFFSET {}", offset));
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:162:
-        
+
         // Execute dynamic query
         let mut query_builder = sqlx::query_as::<_, AuditLog>(&query);
         for bind in binds {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:166:
             query_builder = query_builder.bind(bind);
         }
-        
+
         let logs = query_builder.fetch_all(&self.pool).await?;
-        
+
         Ok(logs)
     }
-    
+
     pub async fn log_family_created(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:178:
         family_name: &str,
     ) -> Result<(), ServiceError> {
         let log = AuditLog::log_family_created(family_id, user_id, family_name);
-        
+
         self.insert_log(log).await
     }
-    
+
     pub async fn log_member_added(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:190:
         role: &str,
     ) -> Result<(), ServiceError> {
         let log = AuditLog::log_member_added(family_id, actor_id, member_id, role);
-        
+
         self.insert_log(log).await
     }
-    
+
     pub async fn log_member_removed(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:207:
             "member".to_string(),
             Some(member_id),
         );
-        
+
         self.insert_log(log).await
     }
-    
+
     pub async fn log_role_changed(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:219:
         old_role: &str,
         new_role: &str,
     ) -> Result<(), ServiceError> {
-        let log = AuditLog::log_role_changed(
-            family_id,
-            actor_id,
-            member_id,
-            old_role,
-            new_role,
-        );
-        
+        let log = AuditLog::log_role_changed(family_id, actor_id, member_id, old_role, new_role);
+
         self.insert_log(log).await
     }
-    
+
     pub async fn log_invitation_sent(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:237:
         invitation_id: Uuid,
         invitee_email: &str,
     ) -> Result<(), ServiceError> {
-        let log = AuditLog::log_invitation_sent(
-            family_id,
-            inviter_id,
-            invitation_id,
-            invitee_email,
-        );
-        
+        let log =
+            AuditLog::log_invitation_sent(family_id, inviter_id, invitation_id, invitee_email);
+
         self.insert_log(log).await
     }
-    
+
     async fn insert_log(&self, log: AuditLog) -> Result<(), ServiceError> {
         sqlx::query(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:255:
                 old_values, new_values, ip_address, user_agent, created_at
             )
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
-            "#
+            "#,
         )
         .bind(log.id)
         .bind(log.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:270:
         .bind(log.created_at)
         .execute(&self.pool)
         .await?;
-        
+
         Ok(())
     }
-    
+
     pub async fn export_audit_report(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:280:
         from_date: DateTime<Utc>,
         to_date: DateTime<Utc>,
     ) -> Result<String, ServiceError> {
-        let logs = self.get_audit_logs(AuditLogFilter {
-            family_id: Some(family_id),
-            user_id: None,
-            action: None,
-            entity_type: None,
-            from_date: Some(from_date),
-            to_date: Some(to_date),
-            limit: None,
-            offset: None,
-        }).await?;
-        
+        let logs = self
+            .get_audit_logs(AuditLogFilter {
+                family_id: Some(family_id),
+                user_id: None,
+                action: None,
+                entity_type: None,
+                from_date: Some(from_date),
+                to_date: Some(to_date),
+                limit: None,
+                offset: None,
+            })
+            .await?;
+
         // Generate CSV report
         let mut csv = String::from("时间,用户,操作,实体类型,实体ID,旧值,新值,IP地址\n");
-        
+
         for log in logs {
             csv.push_str(&format!(
                 "{},{},{},{},{},{},{},{}\n",
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/audit_service.rs:307:
                 log.ip_address.unwrap_or_default(),
             ));
         }
-        
+
         Ok(csv)
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:6:
 use sqlx::PgPool;
 use uuid::Uuid;
 
-use crate::models::{
-    family::CreateFamilyRequest,
-    permission::MemberRole,
-};
+use crate::models::{family::CreateFamilyRequest, permission::MemberRole};
 
 use super::{FamilyService, ServiceContext, ServiceError};
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:51:
     pub fn new(pool: PgPool) -> Self {
         Self { pool }
     }
-    
+
     pub async fn register_with_family(
         &self,
         request: RegisterRequest,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:58:
     ) -> Result<UserContext, ServiceError> {
         tracing::info!(target: "auth_service", email = %request.email, username = ?request.username, "register_with_family: start");
         // Check if email already exists
-        let exists = sqlx::query_scalar::<_, bool>(
-            "SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)"
-        )
-        .bind(&request.email)
-        .fetch_one(&self.pool)
-        .await?;
-        
+        let exists =
+            sqlx::query_scalar::<_, bool>("SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)")
+                .bind(&request.email)
+                .fetch_one(&self.pool)
+                .await?;
+
         if exists {
-            return Err(ServiceError::Conflict("Email already registered".to_string()));
+            return Err(ServiceError::Conflict(
+                "Email already registered".to_string(),
+            ));
         }
 
         // If username provided, ensure uniqueness (case-insensitive)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:73:
         if let Some(ref username) = request.username {
             let username_exists = sqlx::query_scalar::<_, bool>(
-                "SELECT EXISTS(SELECT 1 FROM users WHERE LOWER(username) = LOWER($1))"
+                "SELECT EXISTS(SELECT 1 FROM users WHERE LOWER(username) = LOWER($1))",
             )
             .bind(username)
             .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:81:
                 return Err(ServiceError::Conflict("Username already taken".to_string()));
             }
         }
-        
+
         let mut tx = self.pool.begin().await?;
-        
+
         // Hash password
         let password_hash = self.hash_password(&request.password)?;
-        
+
         // Create user
         let user_id = Uuid::new_v4();
-        let user_name = request.name.clone()
-            .unwrap_or_else(|| request.email.split('@').next().unwrap_or("用户").to_string());
-        
+        let user_name = request.name.clone().unwrap_or_else(|| {
+            request
+                .email
+                .split('@')
+                .next()
+                .unwrap_or("用户")
+                .to_string()
+        });
+
         sqlx::query(
             r#"
             INSERT INTO users (id, email, username, name, full_name, password_hash, created_at, updated_at)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:108:
         .bind(Utc::now())
         .execute(&mut *tx)
         .await?;
-        
+
         // Create personal family
         let family_service = FamilyService::new(self.pool.clone());
         let family_request = CreateFamilyRequest {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:117:
             timezone: Some("Asia/Shanghai".to_string()),
             locale: Some("zh-CN".to_string()),
         };
-        
+
         // Note: We need to commit the user first to use FamilyService
         tx.commit().await?;
         tracing::info!(target: "auth_service", user_id = %user_id, "register_with_family: user created, creating family");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:128:
                 return Err(e);
             }
         };
-        
+
         // Update user's current family
-        sqlx::query(
-            "UPDATE users SET current_family_id = $1 WHERE id = $2"
-        )
-        .bind(family.id)
-        .bind(user_id)
-        .execute(&self.pool)
-        .await?;
-        
+        sqlx::query("UPDATE users SET current_family_id = $1 WHERE id = $2")
+            .bind(family.id)
+            .bind(user_id)
+            .execute(&self.pool)
+            .await?;
+
         tracing::info!(target: "auth_service", user_id = %user_id, family_id = %family.id, "register_with_family: success");
         Ok(UserContext {
             user_id,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:151:
             }],
         })
     }
-    
-    pub async fn login(
-        &self,
-        request: LoginRequest,
-    ) -> Result<UserContext, ServiceError> {
+
+    pub async fn login(&self, request: LoginRequest) -> Result<UserContext, ServiceError> {
         // Get user
         #[derive(sqlx::FromRow)]
         struct UserRow {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:165:
             password_hash: String,
             current_family_id: Option<Uuid>,
         }
-        
+
         let user = sqlx::query_as::<_, UserRow>(
             r#"
             SELECT id, email, full_name, password_hash, current_family_id
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:172:
             FROM users
             WHERE email = $1
-            "#
+            "#,
         )
         .bind(&request.email)
         .fetch_optional(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:178:
         .await?
         .ok_or_else(|| ServiceError::AuthenticationError("Invalid credentials".to_string()))?;
-        
+
         // Verify password
         self.verify_password(&request.password, &user.password_hash)?;
-        
+
         // Get user's families
         #[derive(sqlx::FromRow)]
         struct FamilyRow {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:188:
             family_name: String,
             role: String,
         }
-        
+
         let families = sqlx::query_as::<_, FamilyRow>(
             r#"
             SELECT 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:199:
             JOIN family_members fm ON f.id = fm.family_id
             WHERE fm.user_id = $1
             ORDER BY fm.joined_at DESC
-            "#
+            "#,
         )
         .bind(user.id)
         .fetch_all(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:206:
         .await?;
-        
+
         let family_info: Vec<FamilyInfo> = families
             .into_iter()
             .map(|f| FamilyInfo {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:213:
                 role: MemberRole::from_str_name(&f.role).unwrap_or(MemberRole::Member),
             })
             .collect();
-        
+
         Ok(UserContext {
             user_id: user.id,
             email: user.email,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:222:
             families: family_info,
         })
     }
-    
-    pub async fn get_user_context(
-        &self,
-        user_id: Uuid,
-    ) -> Result<UserContext, ServiceError> {
+
+    pub async fn get_user_context(&self, user_id: Uuid) -> Result<UserContext, ServiceError> {
         #[derive(sqlx::FromRow)]
         struct UserInfoRow {
             id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:234:
             full_name: Option<String>,
             current_family_id: Option<Uuid>,
         }
-        
+
         let user = sqlx::query_as::<_, UserInfoRow>(
             r#"
             SELECT id, email, full_name, current_family_id
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:241:
             FROM users
             WHERE id = $1
-            "#
+            "#,
         )
         .bind(user_id)
         .fetch_optional(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:247:
         .await?
         .ok_or_else(|| ServiceError::not_found("User", user_id))?;
-        
+
         #[derive(sqlx::FromRow)]
         struct FamilyInfoRow {
             family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:253:
             family_name: String,
             role: String,
         }
-        
+
         let families = sqlx::query_as::<_, FamilyInfoRow>(
             r#"
             SELECT 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:264:
             JOIN family_members fm ON f.id = fm.family_id
             WHERE fm.user_id = $1
             ORDER BY fm.joined_at DESC
-            "#
+            "#,
         )
         .bind(user_id)
         .fetch_all(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:271:
         .await?;
-        
+
         let family_info: Vec<FamilyInfo> = families
             .into_iter()
             .map(|f| FamilyInfo {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:278:
                 role: MemberRole::from_str_name(&f.role).unwrap_or(MemberRole::Member),
             })
             .collect();
-        
+
         Ok(UserContext {
             user_id: user.id,
             email: user.email,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:287:
             families: family_info,
         })
     }
-    
+
     pub async fn validate_family_access(
         &self,
         user_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:300:
             email: String,
             full_name: Option<String>,
         }
-        
+
         let row = sqlx::query_as::<_, AccessRow>(
             r#"
             SELECT 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:311:
             FROM family_members fm
             JOIN users u ON fm.user_id = u.id
             WHERE fm.family_id = $1 AND fm.user_id = $2
-            "#
+            "#,
         )
         .bind(family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:318:
         .fetch_optional(&self.pool)
         .await?
         .ok_or(ServiceError::PermissionDenied)?;
-        
+
         let role = MemberRole::from_str_name(&row.role)
             .ok_or_else(|| ServiceError::ValidationError("Invalid role".to_string()))?;
-        
+
         let permissions = serde_json::from_value(row.permissions)?;
-        
+
         Ok(ServiceContext::new(
             user_id,
             family_id,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:333:
             row.full_name,
         ))
     }
-    
+
     fn hash_password(&self, password: &str) -> Result<String, ServiceError> {
         let salt = SaltString::generate(&mut OsRng);
         let argon2 = Argon2::default();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:340:
-        
+
         argon2
             .hash_password(password.as_bytes(), &salt)
             .map(|hash| hash.to_string())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:344:
             .map_err(|_e| ServiceError::InternalError)
     }
-    
+
     fn verify_password(&self, password: &str, hash: &str) -> Result<(), ServiceError> {
         let parsed_hash = PasswordHash::new(hash)
             .map_err(|_| ServiceError::AuthenticationError("Invalid password hash".to_string()))?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/auth_service.rs:350:
-        
+
         Argon2::default()
             .verify_password(password.as_bytes(), &parsed_hash)
             .map_err(|_| ServiceError::AuthenticationError("Invalid credentials".to_string()))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:23:
 impl AvatarService {
     // 预定义的动物头像集合
     const ANIMAL_AVATARS: &'static [&'static str] = &[
-        "bear", "cat", "dog", "fox", "koala", "lion", "mouse", "owl", 
-        "panda", "penguin", "pig", "rabbit", "tiger", "wolf", "elephant",
-        "giraffe", "hippo", "monkey", "zebra", "deer", "squirrel", "bird"
+        "bear", "cat", "dog", "fox", "koala", "lion", "mouse", "owl", "panda", "penguin", "pig",
+        "rabbit", "tiger", "wolf", "elephant", "giraffe", "hippo", "monkey", "zebra", "deer",
+        "squirrel", "bird",
     ];
-    
+
     // 预定义的颜色主题
     const COLOR_THEMES: &'static [(&'static str, &'static str)] = &[
         ("#FF6B6B", "#FFE3E3"), // 红色系
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:43:
         ("#EC7063", "#FDEAEA"), // 珊瑚色
         ("#A569BD", "#F2E9F6"), // 兰花紫
     ];
-    
+
     // 预定义的抽象图案
     const ABSTRACT_PATTERNS: &'static [&'static str] = &[
-        "circles", "squares", "triangles", "hexagons", "waves", 
-        "dots", "stripes", "zigzag", "spiral", "grid", "diamonds"
+        "circles",
+        "squares",
+        "triangles",
+        "hexagons",
+        "waves",
+        "dots",
+        "stripes",
+        "zigzag",
+        "spiral",
+        "grid",
+        "diamonds",
     ];
-    
+
     /// 为新用户生成随机头像
     pub fn generate_random_avatar(user_name: &str, user_email: &str) -> Avatar {
         let mut rng = rand::thread_rng();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:56:
-        
+
         // 随机选择头像风格
         let style = match rand::random::<u8>() % 4 {
             0 => AvatarStyle::Initials,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:62:
             3 => AvatarStyle::Gradient,
             _ => AvatarStyle::Pattern,
         };
-        
+
         // 随机选择颜色主题
         let (color, background) = Self::COLOR_THEMES
             .choose(&mut rng)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:69:
             .unwrap_or(&("#4ECDC4", "#E3FFF8"));
-        
+
         // 根据风格生成URL
         let url = match style {
             AvatarStyle::Initials => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:74:
                 // 使用用户名首字母
                 let initials = Self::get_initials(user_name);
-                format!("https://ui-avatars.com/api/?name={}&background={}&color={}&size=256", 
-                    initials, 
+                format!(
+                    "https://ui-avatars.com/api/?name={}&background={}&color={}&size=256",
+                    initials,
                     &background[1..], // 去掉#号
                     &color[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:81:
-            },
+            }
             AvatarStyle::Animal => {
                 // 使用动物头像
-                let animal = Self::ANIMAL_AVATARS
-                    .choose(&mut rng)
-                    .unwrap_or(&"panda");
-                format!("https://api.dicebear.com/7.x/animalz/svg?seed={}&backgroundColor={}", 
+                let animal = Self::ANIMAL_AVATARS.choose(&mut rng).unwrap_or(&"panda");
+                format!(
+                    "https://api.dicebear.com/7.x/animalz/svg?seed={}&backgroundColor={}",
                     animal,
                     &background[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:91:
-            },
+            }
             AvatarStyle::Abstract => {
                 // 使用抽象图案
                 let pattern = Self::ABSTRACT_PATTERNS
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:95:
                     .choose(&mut rng)
                     .unwrap_or(&"circles");
-                format!("https://api.dicebear.com/7.x/shapes/svg?seed={}&backgroundColor={}", 
+                format!(
+                    "https://api.dicebear.com/7.x/shapes/svg?seed={}&backgroundColor={}",
                     pattern,
                     &background[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:101:
-            },
+            }
             AvatarStyle::Gradient => {
                 // 使用渐变头像
-                format!("https://source.boringavatars.com/beam/256/{}?colors={},{}", 
+                format!(
+                    "https://source.boringavatars.com/beam/256/{}?colors={},{}",
                     user_email,
                     &color[1..],
                     &background[1..]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:108:
                 )
-            },
+            }
             AvatarStyle::Pattern => {
                 // 使用图案头像
-                format!("https://api.dicebear.com/7.x/identicon/svg?seed={}&backgroundColor={}", 
+                format!(
+                    "https://api.dicebear.com/7.x/identicon/svg?seed={}&backgroundColor={}",
                     user_email,
                     &background[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:116:
-            },
+            }
         };
-        
+
         Avatar {
             style,
             color: color.to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:123:
             url,
         }
     }
-    
+
     /// 根据用户ID生成确定性头像（同一ID总是生成相同头像）
     pub fn generate_deterministic_avatar(user_id: &str, user_name: &str) -> Avatar {
         // 使用用户ID的哈希值作为种子
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:130:
         let hash = Self::simple_hash(user_id);
         let theme_index = (hash % Self::COLOR_THEMES.len() as u32) as usize;
         let (color, background) = Self::COLOR_THEMES[theme_index];
-        
+
         // 基于哈希选择风格
         let style = match hash % 5 {
             0 => AvatarStyle::Initials,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:139:
             3 => AvatarStyle::Gradient,
             _ => AvatarStyle::Pattern,
         };
-        
+
         let url = match style {
             AvatarStyle::Initials => {
                 let initials = Self::get_initials(user_name);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:146:
-                format!("https://ui-avatars.com/api/?name={}&background={}&color={}&size=256", 
+                format!(
+                    "https://ui-avatars.com/api/?name={}&background={}&color={}&size=256",
                     initials,
                     &background[1..],
                     &color[1..]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:150:
                 )
-            },
+            }
             AvatarStyle::Animal => {
                 let animal_index = (hash as usize / 5) % Self::ANIMAL_AVATARS.len();
                 let animal = Self::ANIMAL_AVATARS[animal_index];
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:155:
-                format!("https://api.dicebear.com/7.x/animalz/svg?seed={}&backgroundColor={}", 
+                format!(
+                    "https://api.dicebear.com/7.x/animalz/svg?seed={}&backgroundColor={}",
                     animal,
                     &background[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:159:
-            },
+            }
             AvatarStyle::Abstract => {
-                format!("https://api.dicebear.com/7.x/shapes/svg?seed={}&backgroundColor={}", 
+                format!(
+                    "https://api.dicebear.com/7.x/shapes/svg?seed={}&backgroundColor={}",
                     user_id,
                     &background[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:165:
-            },
+            }
             AvatarStyle::Gradient => {
-                format!("https://source.boringavatars.com/beam/256/{}?colors={},{}", 
+                format!(
+                    "https://source.boringavatars.com/beam/256/{}?colors={},{}",
                     user_id,
                     &color[1..],
                     &background[1..]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:171:
                 )
-            },
+            }
             AvatarStyle::Pattern => {
-                format!("https://api.dicebear.com/7.x/identicon/svg?seed={}&backgroundColor={}", 
+                format!(
+                    "https://api.dicebear.com/7.x/identicon/svg?seed={}&backgroundColor={}",
                     user_id,
                     &background[1..]
                 )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:178:
-            },
+            }
         };
-        
+
         Avatar {
             style,
             color: color.to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:185:
             url,
         }
     }
-    
+
     /// 获取本地默认头像路径
     pub fn get_local_avatar(index: usize) -> String {
         // 本地预设头像（可以存储在静态资源中）
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:202:
             "/assets/avatars/avatar_10.svg",
         ];
         let idx = index % LOCAL_AVATARS.len();
-        LOCAL_AVATARS.get(idx).copied().unwrap_or(LOCAL_AVATARS[0]).to_string()
+        LOCAL_AVATARS
+            .get(idx)
+            .copied()
+            .unwrap_or(LOCAL_AVATARS[0])
+            .to_string()
     }
-    
+
     /// 从名字获取首字母
     fn get_initials(name: &str) -> String {
         let parts: Vec<&str> = name.split_whitespace().collect();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:211:
         if parts.is_empty() {
             return "U".to_string();
         }
-        
+
         let mut initials = String::new();
-        
+
         // 如果是中文名字，取前两个字符
-        if name.chars().any(|c| (c as u32) > 0x4E00 && (c as u32) < 0x9FFF) {
+        if name
+            .chars()
+            .any(|c| (c as u32) > 0x4E00 && (c as u32) < 0x9FFF)
+        {
             let chars: Vec<char> = name.chars().collect();
             if chars.len() >= 2 {
                 initials.push(chars[0]);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:224:
                 initials.push(chars[0]);
             }
         } else {
-        // 英文名字，取每个单词的首字母（最多2个）
-        for part in parts.iter().take(2) {
-            if let Some(first_char) = part.chars().next() {
-                initials.push(first_char.to_uppercase().next().unwrap_or(first_char));
+            // 英文名字，取每个单词的首字母（最多2个）
+            for part in parts.iter().take(2) {
+                if let Some(first_char) = part.chars().next() {
+                    initials.push(first_char.to_uppercase().next().unwrap_or(first_char));
+                }
             }
         }
-        }
-        
+
         if initials.is_empty() {
             initials = "U".to_string();
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:238:
-        
+
         initials
     }
-    
+
     /// 简单的哈希函数
     fn simple_hash(s: &str) -> u32 {
-        s.bytes().fold(0u32, |acc, b| {
-            acc.wrapping_mul(31).wrapping_add(b as u32)
-        })
+        s.bytes()
+            .fold(0u32, |acc, b| acc.wrapping_mul(31).wrapping_add(b as u32))
     }
-    
+
     /// 生成多个候选头像供用户选择
     pub fn generate_avatar_options(user_name: &str, user_email: &str, count: usize) -> Vec<Avatar> {
         let mut avatars = Vec::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:252:
         let mut rng = rand::thread_rng();
-        
+
         // 确保每种风格至少有一个
         let styles = [
             AvatarStyle::Initials,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:259:
             AvatarStyle::Gradient,
             AvatarStyle::Pattern,
         ];
-        
+
         for (i, style) in styles.iter().enumerate() {
             if i >= count {
                 break;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:266:
             }
-            
+
             let (color, background) = Self::COLOR_THEMES
                 .choose(&mut rng)
                 .unwrap_or(&("#4ECDC4", "#E3FFF8"));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:271:
-            
+
             let url = match style {
                 AvatarStyle::Initials => {
                     let initials = Self::get_initials(user_name);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:275:
-                    format!("https://ui-avatars.com/api/?name={}&background={}&color={}&size=256", 
+                    format!(
+                        "https://ui-avatars.com/api/?name={}&background={}&color={}&size=256",
                         initials,
                         &background[1..],
                         &color[1..]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:279:
                     )
-                },
+                }
                 AvatarStyle::Animal => {
-                    let animal = Self::ANIMAL_AVATARS
-                        .choose(&mut rng)
-                        .unwrap_or(&"panda");
-                    format!("https://api.dicebear.com/7.x/animalz/svg?seed={}&backgroundColor={}", 
+                    let animal = Self::ANIMAL_AVATARS.choose(&mut rng).unwrap_or(&"panda");
+                    format!(
+                        "https://api.dicebear.com/7.x/animalz/svg?seed={}&backgroundColor={}",
                         animal,
                         &background[1..]
                     )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:289:
-                },
+                }
                 AvatarStyle::Abstract => {
                     let pattern = Self::ABSTRACT_PATTERNS
                         .choose(&mut rng)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:293:
                         .unwrap_or(&"circles");
-                    format!("https://api.dicebear.com/7.x/shapes/svg?seed={}&backgroundColor={}", 
+                    format!(
+                        "https://api.dicebear.com/7.x/shapes/svg?seed={}&backgroundColor={}",
                         pattern,
                         &background[1..]
                     )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:298:
-                },
+                }
                 AvatarStyle::Gradient => {
-                    format!("https://source.boringavatars.com/beam/256/{}{}?colors={},{}", 
-                        user_email, i,
+                    format!(
+                        "https://source.boringavatars.com/beam/256/{}{}?colors={},{}",
+                        user_email,
+                        i,
                         &color[1..],
                         &background[1..]
                     )
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:305:
-                },
+                }
                 AvatarStyle::Pattern => {
-                    format!("https://api.dicebear.com/7.x/identicon/svg?seed={}{}&backgroundColor={}", 
-                        user_email, i,
+                    format!(
+                        "https://api.dicebear.com/7.x/identicon/svg?seed={}{}&backgroundColor={}",
+                        user_email,
+                        i,
                         &background[1..]
                     )
-                },
+                }
             };
-            
+
             avatars.push(Avatar {
                 style: style.clone(),
                 color: color.to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:318:
                 url,
             });
         }
-        
+
         avatars
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:326:
 #[cfg(test)]
 mod tests {
     use super::*;
-    
+
     #[test]
     fn test_get_initials() {
         assert_eq!(AvatarService::get_initials("John Doe"), "JD");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:335:
         assert_eq!(AvatarService::get_initials(""), "U");
         assert_eq!(AvatarService::get_initials("Alice Bob Charlie"), "AB");
     }
-    
+
     #[test]
     fn test_generate_random_avatar() {
         let avatar = AvatarService::generate_random_avatar("Test User", "test@example.com");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/avatar_service.rs:343:
         assert!(!avatar.color.is_empty());
         assert!(!avatar.background.is_empty());
     }
-    
+
     #[test]
     fn test_deterministic_avatar() {
         let avatar1 = AvatarService::generate_deterministic_avatar("user123", "Test User");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:1:
 use crate::error::{ApiError, ApiResult};
-use chrono::{DateTime, Datelike, Timelike, Utc, Duration};
+use chrono::{DateTime, Datelike, Duration, Timelike, Utc};
 use serde::{Deserialize, Serialize};
 use sqlx::PgPool;
 use uuid::Uuid;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:64:
     /// 创建预算
     pub async fn create_budget(&self, data: CreateBudgetRequest) -> ApiResult<Budget> {
         let budget_id = Uuid::new_v4();
-        
+
         // 验证预算期间
         let end_date = match data.period_type {
             BudgetPeriod::Monthly => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:71:
                 let start = data.start_date;
                 Some(start + Duration::days(30))
-            },
+            }
             BudgetPeriod::Yearly => {
                 let start = data.start_date;
                 Some(start + Duration::days(365))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:77:
-            },
+            }
             BudgetPeriod::Custom => data.end_date,
             _ => None,
         };
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:89:
                 $1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW()
             )
             RETURNING *
-            "#
+            "#,
         )
         .bind(budget_id)
         .bind(data.ledger_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:110:
     /// 获取预算进度
     pub async fn get_budget_progress(&self, budget_id: Uuid) -> ApiResult<BudgetProgress> {
         // 获取预算信息
-        let budget: Budget = sqlx::query_as(
-            "SELECT * FROM budgets WHERE id = $1 AND is_active = true"
-        )
-        .bind(budget_id)
-        .fetch_one(&self.pool)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let budget: Budget =
+            sqlx::query_as("SELECT * FROM budgets WHERE id = $1 AND is_active = true")
+                .bind(budget_id)
+                .fetch_one(&self.pool)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         // 计算当前期间
         let (period_start, period_end) = self.get_current_period(&budget)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:123:
-        
+
         // 获取期间内的支出
         let spent: (Option<f64>,) = sqlx::query_as(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:131:
             AND transaction_date BETWEEN $2 AND $3
             AND ($4::uuid IS NULL OR category_id = $4)
             AND status = 'cleared'
-            "#
+            "#,
         )
         .bind(budget.ledger_id)
         .bind(period_start)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:149:
         let now = Utc::now();
         let days_remaining = (period_end - now).num_days().max(0);
         let days_passed = (now - period_start).num_days().max(1);
-        
+
         // 计算平均日支出和预测
         let average_daily_spend = spent_amount / days_passed as f64;
         let projected_total = average_daily_spend * (days_passed + days_remaining) as f64;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:160:
         };
 
         // 获取分类支出明细
-        let categories = self.get_category_spending(
-            &budget.ledger_id,
-            &period_start,
-            &period_end,
-            budget.category_id
-        ).await?;
+        let categories = self
+            .get_category_spending(
+                &budget.ledger_id,
+                &period_start,
+                &period_end,
+                budget.category_id,
+            )
+            .await?;
 
         Ok(BudgetProgress {
             budget_id: budget.id,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:172:
             budget_name: budget.name,
-            period: format!("{} - {}", 
+            period: format!(
+                "{} - {}",
                 period_start.format("%Y-%m-%d"),
                 period_end.format("%Y-%m-%d")
             ),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:211:
             GROUP BY c.id, c.name
             HAVING SUM(t.amount) > 0
             ORDER BY amount_spent DESC
-            "#
+            "#,
         )
         .bind(ledger_id)
         .bind(start_date)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:227:
     /// 计算当前预算期间
     fn get_current_period(&self, budget: &Budget) -> ApiResult<(DateTime<Utc>, DateTime<Utc>)> {
         let now = Utc::now();
-        
+
         match budget.period_type {
             BudgetPeriod::Monthly => {
                 let start = Utc::now()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:241:
                     .unwrap()
                     .with_nanosecond(0)
                     .unwrap();
-                
-                let end = (start + Duration::days(32))
-                    .with_day(1)
-                    .unwrap()
-                    - Duration::seconds(1);
-                
+
+                let end = (start + Duration::days(32)).with_day(1).unwrap() - Duration::seconds(1);
+
                 Ok((start, end))
-            },
+            }
             BudgetPeriod::Yearly => {
                 let start = Utc::now()
                     .with_month(1)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:263:
                     .unwrap()
                     .with_nanosecond(0)
                     .unwrap();
-                
+
                 let end = start + Duration::days(365) - Duration::seconds(1);
-                
+
                 Ok((start, end))
-            },
-            BudgetPeriod::Custom => {
-                Ok((budget.start_date, budget.end_date.unwrap_or(now + Duration::days(30))))
-            },
-            _ => {
-                Ok((budget.start_date, now + Duration::days(30)))
             }
+            BudgetPeriod::Custom => Ok((
+                budget.start_date,
+                budget.end_date.unwrap_or(now + Duration::days(30)),
+            )),
+            _ => Ok((budget.start_date, now + Duration::days(30))),
         }
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:280:
     /// 预算预警检查
     pub async fn check_budget_alerts(&self, ledger_id: Uuid) -> ApiResult<Vec<BudgetAlert>> {
-        let budgets: Vec<Budget> = sqlx::query_as(
-            "SELECT * FROM budgets WHERE ledger_id = $1 AND is_active = true"
-        )
-        .bind(ledger_id)
-        .fetch_all(&self.pool)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let budgets: Vec<Budget> =
+            sqlx::query_as("SELECT * FROM budgets WHERE ledger_id = $1 AND is_active = true")
+                .bind(ledger_id)
+                .fetch_all(&self.pool)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         let mut alerts = Vec::new();
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:292:
         for budget in budgets {
             let progress = self.get_budget_progress(budget.id).await?;
-            
+
             // 检查预警条件
             if progress.percentage_used >= 90.0 {
                 alerts.push(BudgetAlert {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:298:
                     budget_id: budget.id,
                     budget_name: budget.name.clone(),
                     alert_type: AlertType::Critical,
-                    message: format!("预算 {} 已使用 {:.1}%", budget.name, progress.percentage_used),
+                    message: format!(
+                        "预算 {} 已使用 {:.1}%",
+                        budget.name, progress.percentage_used
+                    ),
                     percentage_used: progress.percentage_used,
                     remaining_amount: progress.remaining_amount,
                 });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:307:
                     budget_id: budget.id,
                     budget_name: budget.name.clone(),
                     alert_type: AlertType::Warning,
-                    message: format!("预算 {} 已使用 {:.1}%", budget.name, progress.percentage_used),
+                    message: format!(
+                        "预算 {} 已使用 {:.1}%",
+                        budget.name, progress.percentage_used
+                    ),
                     percentage_used: progress.percentage_used,
                     remaining_amount: progress.remaining_amount,
                 });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:320:
                         budget_id: budget.id,
                         budget_name: budget.name.clone(),
                         alert_type: AlertType::Projection,
-                        message: format!("按当前支出速度，预算 {} 预计超支 ¥{:.2}", budget.name, overspend),
+                        message: format!(
+                            "按当前支出速度，预算 {} 预计超支 ¥{:.2}",
+                            budget.name, overspend
+                        ),
                         percentage_used: progress.percentage_used,
                         remaining_amount: progress.remaining_amount,
                     });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:338:
         period: ReportPeriod,
     ) -> ApiResult<BudgetReport> {
         let (start_date, end_date) = self.get_report_period(period)?;
-        
+
         // 获取所有预算
-        let budgets: Vec<Budget> = sqlx::query_as(
-            "SELECT * FROM budgets WHERE ledger_id = $1 AND is_active = true"
-        )
-        .bind(ledger_id)
-        .fetch_all(&self.pool)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let budgets: Vec<Budget> =
+            sqlx::query_as("SELECT * FROM budgets WHERE ledger_id = $1 AND is_active = true")
+                .bind(ledger_id)
+                .fetch_all(&self.pool)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         let mut budget_summaries = Vec::new();
         let mut total_budgeted = 0.0;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:356:
             let progress = self.get_budget_progress(budget.id).await?;
             total_budgeted += budget.amount;
             total_spent += progress.spent_amount;
-            
+
             budget_summaries.push(BudgetSummary {
                 budget_name: budget.name,
                 budgeted: budget.amount,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:379:
                 WHERE ledger_id = $1 AND category_id IS NOT NULL
             )
             AND status = 'cleared'
-            "#
+            "#,
         )
         .bind(ledger_id)
         .bind(start_date)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:389:
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         Ok(BudgetReport {
-            period: format!("{} - {}", 
+            period: format!(
+                "{} - {}",
                 start_date.format("%Y-%m-%d"),
                 end_date.format("%Y-%m-%d")
             ),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:405:
 
     fn get_report_period(&self, period: ReportPeriod) -> ApiResult<(DateTime<Utc>, DateTime<Utc>)> {
         let now = Utc::now();
-        
+
         match period {
             ReportPeriod::CurrentMonth => {
                 let start = now
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:420:
                     .with_nanosecond(0)
                     .unwrap();
                 Ok((start, now))
-            },
+            }
             ReportPeriod::LastMonth => {
                 let end = now
                     .with_day(1)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:446:
                     .with_nanosecond(0)
                     .unwrap();
                 Ok((start, end))
-            },
+            }
             ReportPeriod::CurrentYear => {
                 let start = now
                     .with_month(1)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/budget_service.rs:462:
                     .with_nanosecond(0)
                     .unwrap();
                 Ok((start, now))
-            },
+            }
         }
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:2:
 use rust_decimal::Decimal;
 use serde::{Deserialize, Serialize};
 use sqlx::{PgPool, Row};
-use uuid::Uuid;
 use std::collections::HashMap;
 use std::future::Future;
 use std::pin::Pin;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:9:
+use uuid::Uuid;
 
 use super::ServiceError;
 // remove duplicate import of NaiveDate
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:87:
     pub fn new(pool: PgPool) -> Self {
         Self { pool }
     }
-    
+
     /// 获取所有支持的货币
     pub async fn get_supported_currencies(&self) -> Result<Vec<Currency>, ServiceError> {
         let rows = sqlx::query!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:100:
         )
         .fetch_all(&self.pool)
         .await?;
-        
+
         let currencies = rows
             .into_iter()
             .map(|row| Currency {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:111:
                 is_active: row.is_active.unwrap_or(true),
             })
             .collect();
-        
+
         Ok(currencies)
     }
-    
+
     /// 获取用户的货币偏好
     pub async fn get_user_currency_preferences(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:131:
         )
         .fetch_all(&self.pool)
         .await?;
-        
-        let preferences = rows.into_iter().map(|row| CurrencyPreference {
-            currency_code: row.currency_code,
-            is_primary: row.is_primary.unwrap_or(false),
-            display_order: row.display_order.unwrap_or(0),
-        }).collect();
-        
+
+        let preferences = rows
+            .into_iter()
+            .map(|row| CurrencyPreference {
+                currency_code: row.currency_code,
+                is_primary: row.is_primary.unwrap_or(false),
+                display_order: row.display_order.unwrap_or(0),
+            })
+            .collect();
+
         Ok(preferences)
     }
-    
+
     /// 设置用户的货币偏好
     pub async fn set_user_currency_preferences(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:149:
         primary_currency: String,
     ) -> Result<(), ServiceError> {
         let mut tx = self.pool.begin().await?;
-        
+
         // 删除现有偏好
         sqlx::query!(
             "DELETE FROM user_currency_preferences WHERE user_id = $1",
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:157:
         )
         .execute(&mut *tx)
         .await?;
-        
+
         // 插入新偏好
         for (index, currency) in currencies.iter().enumerate() {
             sqlx::query!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:174:
             .execute(&mut *tx)
             .await?;
         }
-        
+
         tx.commit().await?;
         Ok(())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:181:
-    
+
     /// 获取家庭的货币设置
     pub async fn get_family_currency_settings(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:195:
         )
         .fetch_optional(&self.pool)
         .await?;
-        
+
         if let Some(settings) = settings {
             // 获取支持的货币列表
             let supported = self.get_family_supported_currencies(family_id).await?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:202:
-            
+
             Ok(FamilyCurrencySettings {
                 family_id,
                 base_currency: settings.base_currency.unwrap_or_else(|| "CNY".to_string()),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:218:
             })
         }
     }
-    
+
     /// 更新家庭的货币设置
     pub async fn update_family_currency_settings(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:226:
         request: UpdateCurrencySettingsRequest,
     ) -> Result<FamilyCurrencySettings, ServiceError> {
         let mut tx = self.pool.begin().await?;
-        
+
         // 插入或更新设置
         sqlx::query!(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:247:
         )
         .execute(&mut *tx)
         .await?;
-        
+
         tx.commit().await?;
-        
+
         self.get_family_currency_settings(family_id).await
     }
-    
+
     /// 获取汇率
     pub fn get_exchange_rate<'a>(
         &'a self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:261:
         date: Option<NaiveDate>,
     ) -> Pin<Box<dyn Future<Output = Result<Decimal, ServiceError>> + Send + 'a>> {
         Box::pin(async move {
-            self.get_exchange_rate_impl(from_currency, to_currency, date).await
+            self.get_exchange_rate_impl(from_currency, to_currency, date)
+                .await
         })
     }
-    
+
     async fn get_exchange_rate_impl(
         &self,
         from_currency: &str,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:274:
         if from_currency == to_currency {
             return Ok(Decimal::ONE);
         }
-        
+
         let effective_date = date.unwrap_or_else(|| Utc::now().date_naive());
-        
+
         // 尝试直接获取汇率
         let rate = sqlx::query_scalar!(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:294:
         )
         .fetch_optional(&self.pool)
         .await?;
-        
+
         if let Some(rate) = rate {
             return Ok(rate);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:301:
-        
+
         // 尝试获取反向汇率
         let reverse_rate = sqlx::query_scalar!(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:316:
         )
         .fetch_optional(&self.pool)
         .await?;
-        
+
         if let Some(rate) = reverse_rate {
             return Ok(Decimal::ONE / rate);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:323:
-        
+
         // 尝试通过USD中转（最常见的中转货币）
-        let from_to_usd = Box::pin(self.get_exchange_rate_impl(from_currency, "USD", Some(effective_date))).await;
-        let usd_to_target = Box::pin(self.get_exchange_rate_impl("USD", to_currency, Some(effective_date))).await;
-        
+        let from_to_usd =
+            Box::pin(self.get_exchange_rate_impl(from_currency, "USD", Some(effective_date))).await;
+        let usd_to_target =
+            Box::pin(self.get_exchange_rate_impl("USD", to_currency, Some(effective_date))).await;
+
         if let (Ok(rate1), Ok(rate2)) = (from_to_usd, usd_to_target) {
             return Ok(rate1 * rate2);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:331:
-        
+
         Err(ServiceError::NotFound {
             resource_type: "ExchangeRate".to_string(),
             id: format!("{}-{}", from_currency, to_currency),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:335:
         })
     }
-    
+
     /// 批量获取汇率
     pub async fn get_exchange_rates(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:343:
         date: Option<NaiveDate>,
     ) -> Result<HashMap<String, Decimal>, ServiceError> {
         let mut rates = HashMap::new();
-        
+
         for currency in target_currencies {
             if let Ok(rate) = self.get_exchange_rate(base_currency, &currency, date).await {
                 rates.insert(currency, rate);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:350:
             }
         }
-        
+
         Ok(rates)
     }
-    
+
     /// 添加或更新汇率
     pub async fn add_exchange_rate(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:363:
         // Align with DB schema: UNIQUE(from_currency, to_currency, date)
         // Use business date == effective_date for upsert key
         let business_date = effective_date;
-        
+
         let rec = sqlx::query(
             r#"
             INSERT INTO exchange_rates
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:406:
                 .unwrap_or_else(chrono::Utc::now),
         })
     }
-    
+
     /// 货币转换
     pub fn convert_amount(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:416:
         to_decimal_places: i32,
     ) -> Decimal {
         let converted = amount * rate;
-        
+
         // 根据目标货币的小数位数进行舍入
         let scale = 10_i64.pow(to_decimal_places as u32);
         let scaled = converted * Decimal::from(scale);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:423:
         let rounded = scaled.round();
         rounded / Decimal::from(scale)
     }
-    
+
     /// 获取最近的汇率历史
     pub async fn get_exchange_rate_history(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:432:
         days: i32,
     ) -> Result<Vec<ExchangeRate>, ServiceError> {
         let start_date = (Utc::now() - chrono::Duration::days(days as i64)).date_naive();
-        
+
         let rows = sqlx::query!(
             r#"
             SELECT id, from_currency, to_currency, rate, source, 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:449:
         )
         .fetch_all(&self.pool)
         .await?;
-        
-        Ok(rows.into_iter().map(|row| ExchangeRate {
-            id: row.id,
-            from_currency: row.from_currency,
-            to_currency: row.to_currency,
-            rate: row.rate,
-            source: row.source.unwrap_or_else(|| "manual".to_string()),
-            // effective_date 为非空（schema 约束）；直接使用
-            effective_date: row.effective_date,
-            // created_at 在 schema 中可能可空；兜底当前时间
-            created_at: row.created_at.unwrap_or_else(Utc::now),
-        }).collect())
+
+        Ok(rows
+            .into_iter()
+            .map(|row| ExchangeRate {
+                id: row.id,
+                from_currency: row.from_currency,
+                to_currency: row.to_currency,
+                rate: row.rate,
+                source: row.source.unwrap_or_else(|| "manual".to_string()),
+                // effective_date 为非空（schema 约束）；直接使用
+                effective_date: row.effective_date,
+                // created_at 在 schema 中可能可空；兜底当前时间
+                created_at: row.created_at.unwrap_or_else(Utc::now),
+            })
+            .collect())
     }
-    
+
     /// 获取家庭支持的货币列表
     async fn get_family_supported_currencies(
         &self,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:481:
         )
         .fetch_all(&self.pool)
         .await?;
-        
-        let currencies: Vec<String> = currencies
-            .into_iter()
-            .flatten()
-            .collect();
-        
+
+        let currencies: Vec<String> = currencies.into_iter().flatten().collect();
+
         if currencies.is_empty() {
             // 返回默认货币
             Ok(vec!["CNY".to_string(), "USD".to_string()])
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:494:
             Ok(currencies)
         }
     }
-    
+
     /// 自动获取最新汇率并更新到数据库
     pub async fn fetch_latest_rates(&self, base_currency: &str) -> Result<(), ServiceError> {
         use super::exchange_rate_api::EXCHANGE_RATE_SERVICE;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:501:
-        
+
         tracing::info!("Fetching latest exchange rates for {}", base_currency);
-        
+
         // 获取汇率服务实例
         let mut service = EXCHANGE_RATE_SERVICE.lock().await;
-        
+
         // 获取最新汇率
         let rates = service.fetch_fiat_rates(base_currency).await?;
-        
+
         // 仅对系统已知的币种写库，避免外键错误
         // 在线模式或存在 .sqlx 缓存时可查询；否则跳过过滤（保守按未知代码丢弃）
         let known_codes: std::collections::HashSet<String> = std::collections::HashSet::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:520:
         // 批量更新到数据库
         let effective_date = Utc::now().date_naive();
         let business_date = effective_date;
-        
+
         for (target_currency, rate) in rates.iter() {
             if target_currency != base_currency {
                 // 跳过未知币种，避免外键约束失败
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:527:
                 // 如果未加载已知币种列表，则不做过滤；否则过滤未知代码，避免外键错误
-                if !known_codes.is_empty() && !known_codes.contains(target_currency) { continue; }
+                if !known_codes.is_empty() && !known_codes.contains(target_currency) {
+                    continue;
+                }
                 let id = Uuid::new_v4();
-                
+
                 // 插入或更新汇率
                 let res = sqlx::query(
                     r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:566:
                 }
             }
         }
-        
-        tracing::info!("Successfully updated {} exchange rates for {}", rates.len() - 1, base_currency);
+
+        tracing::info!(
+            "Successfully updated {} exchange rates for {}",
+            rates.len() - 1,
+            base_currency
+        );
         Ok(())
     }
-    
+
     /// 获取并更新加密货币价格
-    pub async fn fetch_crypto_prices(&self, crypto_codes: Vec<&str>, fiat_currency: &str) -> Result<(), ServiceError> {
+    pub async fn fetch_crypto_prices(
+        &self,
+        crypto_codes: Vec<&str>,
+        fiat_currency: &str,
+    ) -> Result<(), ServiceError> {
         use super::exchange_rate_api::EXCHANGE_RATE_SERVICE;
-        
+
         tracing::info!("Fetching crypto prices in {}", fiat_currency);
-        
+
         // 获取汇率服务实例
         let mut service = EXCHANGE_RATE_SERVICE.lock().await;
-        
+
         // 获取加密货币价格
-        let prices = service.fetch_crypto_prices(crypto_codes.clone(), fiat_currency).await?;
-        
+        let prices = service
+            .fetch_crypto_prices(crypto_codes.clone(), fiat_currency)
+            .await?;
+
         // 批量更新到数据库
         for (crypto_code, price) in prices.iter() {
             sqlx::query!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:604:
             .execute(&self.pool)
             .await?;
         }
-        
-        tracing::info!("Successfully updated {} crypto prices in {}", prices.len(), fiat_currency);
+
+        tracing::info!(
+            "Successfully updated {} crypto prices in {}",
+            prices.len(),
+            fiat_currency
+        );
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:612:
     /// Clear manual flag/expiry for today's business date for a given pair
-    pub async fn clear_manual_rate(&self, from_currency: &str, to_currency: &str) -> Result<(), ServiceError> {
+    pub async fn clear_manual_rate(
+        &self,
+        from_currency: &str,
+        to_currency: &str,
+    ) -> Result<(), ServiceError> {
         let _ = sqlx::query(
             r#"
             UPDATE exchange_rates
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:618:
                 manual_rate_expiry = NULL,
                 updated_at = CURRENT_TIMESTAMP
             WHERE from_currency = $1 AND to_currency = $2 AND date = CURRENT_DATE
-            "#
+            "#,
         )
         .bind(from_currency)
         .bind(to_currency)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:628:
     }
 
     /// Batch clear manual flags/expiry by filters
-    pub async fn clear_manual_rates_batch(&self, req: ClearManualRatesBatchRequest) -> Result<u64, ServiceError> {
-        let target_date = req.before_date.unwrap_or_else(|| chrono::Utc::now().date_naive());
+    pub async fn clear_manual_rates_batch(
+        &self,
+        req: ClearManualRatesBatchRequest,
+    ) -> Result<u64, ServiceError> {
+        let target_date = req
+            .before_date
+            .unwrap_or_else(|| chrono::Utc::now().date_naive());
         let only_expired = req.only_expired.unwrap_or(false);
 
         let mut total: u64 = 0;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:645:
                       AND to_currency = ANY($2)
                       AND date <= $3
                       AND manual_rate_expiry IS NOT NULL AND manual_rate_expiry <= NOW()
-                    "#
+                    "#,
                 )
                 .bind(&req.from_currency)
                 .bind(list)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:663:
                     WHERE from_currency = $1
                       AND to_currency = ANY($2)
                       AND date <= $3
-                    "#
+                    "#,
                 )
                 .bind(&req.from_currency)
                 .bind(list)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:682:
                 WHERE from_currency = $1
                   AND date <= $2
                   AND manual_rate_expiry IS NOT NULL AND manual_rate_expiry <= NOW()
-                "#
+                "#,
             )
             .bind(&req.from_currency)
             .bind(target_date)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/currency_service.rs:698:
                     updated_at = CURRENT_TIMESTAMP
                 WHERE from_currency = $1
                   AND date <= $2
-                "#
+                "#,
             )
             .bind(&req.from_currency)
             .bind(target_date)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:1:
-use chrono::{DateTime, Utc, Duration};
+use chrono::{DateTime, Duration, Utc};
 use reqwest;
 use rust_decimal::Decimal;
 use serde::Deserialize; // Serialize 未用
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:116:
             .timeout(std::time::Duration::from_secs(10))
             .build()
             .unwrap();
-        
+
         Self {
             client,
             cache: HashMap::new(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:123:
         }
     }
-    
+
     /// Inspect cached provider source for fiat by base code
     pub fn cached_fiat_source(&self, base_currency: &str) -> Option<String> {
         let key = format!("fiat_{}", base_currency);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:130:
     }
 
     /// Inspect cached provider source for crypto by codes + fiat
-    pub fn cached_crypto_source(&self, crypto_codes: &[&str], fiat_currency: &str) -> Option<String> {
+    pub fn cached_crypto_source(
+        &self,
+        crypto_codes: &[&str],
+        fiat_currency: &str,
+    ) -> Option<String> {
         let key = format!("crypto_{}_{}", crypto_codes.join(","), fiat_currency);
         self.cache.get(&key).map(|c| c.source.clone())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:137:
-    
+
     /// 获取法定货币汇率
-    pub async fn fetch_fiat_rates(&mut self, base_currency: &str) -> Result<HashMap<String, Decimal>, ServiceError> {
+    pub async fn fetch_fiat_rates(
+        &mut self,
+        base_currency: &str,
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         let cache_key = format!("fiat_{}", base_currency);
-        
+
         // 检查缓存（15分钟有效期）
         if let Some(cached) = self.cache.get(&cache_key) {
             if !cached.is_expired(Duration::minutes(15)) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:145:
-                info!("Using cached rates for {} from {}", base_currency, cached.source);
+                info!(
+                    "Using cached rates for {} from {}",
+                    base_currency, cached.source
+                );
                 return Ok(cached.rates.clone());
             }
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:149:
-        
+
         // 尝试多个数据源（顺序可配置：FIAT_PROVIDER_ORDER=exchangerate-api,frankfurter,fxrates）
         let mut rates = None;
         let mut source = String::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:153:
-        let order_env = std::env::var("FIAT_PROVIDER_ORDER").unwrap_or_else(|_| "exchangerate-api,frankfurter,fxrates".to_string());
+        let order_env = std::env::var("FIAT_PROVIDER_ORDER")
+            .unwrap_or_else(|_| "exchangerate-api,frankfurter,fxrates".to_string());
         let providers: Vec<String> = order_env
             .split(',')
             .map(|s| s.trim().to_lowercase())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:159:
         for p in providers {
             match p.as_str() {
                 "frankfurter" => match self.fetch_from_frankfurter(base_currency).await {
-                    Ok(r) => { rates = Some(r); source = "frankfurter".to_string(); },
+                    Ok(r) => {
+                        rates = Some(r);
+                        source = "frankfurter".to_string();
+                    }
                     Err(e) => warn!("Failed to fetch from Frankfurter: {}", e),
                 },
-                "exchangerate-api" | "exchange-rate-api" => match self.fetch_from_exchangerate_api(base_currency).await {
-                    Ok(r) => { rates = Some(r); source = "exchangerate-api".to_string(); },
-                    Err(e) => warn!("Failed to fetch from ExchangeRate-API: {}", e),
-                },
-                "fxrates" | "fx-rates-api" | "fxratesapi" => match self.fetch_from_fxrates_api(base_currency).await {
-                    Ok(r) => { rates = Some(r); source = "fxrates".to_string(); },
-                    Err(e) => warn!("Failed to fetch from FXRates API: {}", e),
-                },
+                "exchangerate-api" | "exchange-rate-api" => {
+                    match self.fetch_from_exchangerate_api(base_currency).await {
+                        Ok(r) => {
+                            rates = Some(r);
+                            source = "exchangerate-api".to_string();
+                        }
+                        Err(e) => warn!("Failed to fetch from ExchangeRate-API: {}", e),
+                    }
+                }
+                "fxrates" | "fx-rates-api" | "fxratesapi" => {
+                    match self.fetch_from_fxrates_api(base_currency).await {
+                        Ok(r) => {
+                            rates = Some(r);
+                            source = "fxrates".to_string();
+                        }
+                        Err(e) => warn!("Failed to fetch from FXRates API: {}", e),
+                    }
+                }
                 other => warn!("Unknown fiat provider: {}", other),
             }
-            if rates.is_some() { break; }
+            if rates.is_some() {
+                break;
+            }
         }
-        
+
         // 如果获取成功，更新缓存
         if let Some(rates) = rates {
             self.cache.insert(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:187:
             );
             return Ok(rates);
         }
-        
+
         // 如果所有API都失败，返回默认汇率
         warn!("All rate APIs failed, returning default rates");
         Ok(self.get_default_rates(base_currency))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:194:
     }
-    
+
     /// 从 Frankfurter API 获取汇率
-    async fn fetch_from_frankfurter(&self, base_currency: &str) -> Result<HashMap<String, Decimal>, ServiceError> {
+    async fn fetch_from_frankfurter(
+        &self,
+        base_currency: &str,
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         let url = format!("https://api.frankfurter.app/latest?from={}", base_currency);
-        
-        let response = self.client
-            .get(&url)
-            .send()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to fetch from Frankfurter: {}", e),
-            })?;
-        
+
+        let response =
+            self.client
+                .get(&url)
+                .send()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to fetch from Frankfurter: {}", e),
+                })?;
+
         if !response.status().is_success() {
             return Err(ServiceError::ExternalApi {
                 message: format!("Frankfurter API returned status: {}", response.status()),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:211:
             });
         }
-        
-        let data: FrankfurterResponse = response
-            .json()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to parse Frankfurter response: {}", e),
-            })?;
-        
+
+        let data: FrankfurterResponse =
+            response
+                .json()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to parse Frankfurter response: {}", e),
+                })?;
+
         let mut rates = HashMap::new();
         for (currency, rate) in data.rates {
             if let Ok(decimal_rate) = Decimal::from_str(&rate.to_string()) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:224:
                 rates.insert(currency, decimal_rate);
             }
         }
-        
+
         // 添加基础货币本身
         rates.insert(base_currency.to_string(), Decimal::ONE);
-        
+
         Ok(rates)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:234:
     /// 从 FXRates API 获取汇率
-    async fn fetch_from_fxrates_api(&self, base_currency: &str) -> Result<HashMap<String, Decimal>, ServiceError> {
+    async fn fetch_from_fxrates_api(
+        &self,
+        base_currency: &str,
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         let url = format!("https://api.fxratesapi.com/latest?base={}", base_currency);
 
-        let response = self.client
-            .get(&url)
-            .send()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to fetch from FXRates API: {}", e),
-            })?;
+        let response =
+            self.client
+                .get(&url)
+                .send()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to fetch from FXRates API: {}", e),
+                })?;
 
         if !response.status().is_success() {
             return Err(ServiceError::ExternalApi {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:249:
             });
         }
 
-        let data: FxRatesApiResponse = response
-            .json()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to parse FXRates response: {}", e),
-            })?;
+        let data: FxRatesApiResponse =
+            response
+                .json()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to parse FXRates response: {}", e),
+                })?;
 
         let mut rates = HashMap::new();
         for (currency, rate) in data.rates {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:269:
     }
 
     /// Fetch fiat rates from a specific provider label
-    pub async fn fetch_fiat_rates_from(&self, provider: &str, base_currency: &str) -> Result<(HashMap<String, Decimal>, String), ServiceError> {
+    pub async fn fetch_fiat_rates_from(
+        &self,
+        provider: &str,
+        base_currency: &str,
+    ) -> Result<(HashMap<String, Decimal>, String), ServiceError> {
         match provider.to_lowercase().as_str() {
             "exchangerate-api" | "exchange-rate-api" => {
                 let r = self.fetch_from_exchangerate_api(base_currency).await?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:283:
                 let r = self.fetch_from_fxrates_api(base_currency).await?;
                 Ok((r, "fxrates".to_string()))
             }
-            other => Err(ServiceError::ExternalApi { message: format!("Unknown fiat provider: {}", other) }),
+            other => Err(ServiceError::ExternalApi {
+                message: format!("Unknown fiat provider: {}", other),
+            }),
         }
     }
-    
+
     /// 从 ExchangeRate-API 获取汇率（兼容 open.er-api 与 exchangerate-api 两种格式）
-    async fn fetch_from_exchangerate_api(&self, base_currency: &str) -> Result<HashMap<String, Decimal>, ServiceError> {
+    async fn fetch_from_exchangerate_api(
+        &self,
+        base_currency: &str,
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         // 优先尝试 open.er-api.com（无需密钥，速率较高）
         let try_urls = vec![
             format!("https://open.er-api.com/v6/latest/{}", base_currency),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:295:
-            format!("https://api.exchangerate-api.com/v4/latest/{}", base_currency),
+            format!(
+                "https://api.exchangerate-api.com/v4/latest/{}",
+                base_currency
+            ),
         ];
 
         let mut last_err: Option<String> = None;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:299:
         for url in try_urls {
             let resp = match self.client.get(&url).send().await {
                 Ok(r) => r,
-                Err(e) => { last_err = Some(format!("request error: {}", e)); continue; }
+                Err(e) => {
+                    last_err = Some(format!("request error: {}", e));
+                    continue;
+                }
             };
-            if !resp.status().is_success() { 
+            if !resp.status().is_success() {
                 last_err = Some(format!("status: {}", resp.status()));
-                continue; 
+                continue;
             }
             let v: serde_json::Value = match resp.json().await {
                 Ok(json) => json,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:310:
-                Err(e) => { last_err = Some(format!("json error: {}", e)); continue; }
+                Err(e) => {
+                    last_err = Some(format!("json error: {}", e));
+                    continue;
+                }
             };
             // 允许两种字段名：rates 或 conversion_rates
             let map_node = v.get("rates").or_else(|| v.get("conversion_rates"));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:322:
                 }
                 // 添加基础货币自环
                 rates.insert(base_currency.to_uppercase(), Decimal::ONE);
-                if !rates.is_empty() { return Ok(rates); }
+                if !rates.is_empty() {
+                    return Ok(rates);
+                }
             }
             last_err = Some("missing rates map".to_string());
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:329:
-        Err(ServiceError::ExternalApi { message: format!("Failed to fetch/parse ExchangeRate-API: {}", last_err.unwrap_or_else(|| "unknown".to_string())) })
+        Err(ServiceError::ExternalApi {
+            message: format!(
+                "Failed to fetch/parse ExchangeRate-API: {}",
+                last_err.unwrap_or_else(|| "unknown".to_string())
+            ),
+        })
     }
-    
+
     /// 获取加密货币价格
-    pub async fn fetch_crypto_prices(&mut self, crypto_codes: Vec<&str>, fiat_currency: &str) -> Result<HashMap<String, Decimal>, ServiceError> {
+    pub async fn fetch_crypto_prices(
+        &mut self,
+        crypto_codes: Vec<&str>,
+        fiat_currency: &str,
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         let cache_key = format!("crypto_{}_{}", crypto_codes.join(","), fiat_currency);
-        
+
         // 检查缓存（5分钟有效期）
         if let Some(cached) = self.cache.get(&cache_key) {
             if !cached.is_expired(Duration::minutes(5)) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:340:
                 return Ok(cached.rates.clone());
             }
         }
-        
+
         // 尝试从多个加密货币提供商获取（顺序可配置：CRYPTO_PROVIDER_ORDER=coingecko,coincap）
         let mut prices = None;
         let mut source = String::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:347:
-        let order_env = std::env::var("CRYPTO_PROVIDER_ORDER").unwrap_or_else(|_| "coingecko,coincap,binance".to_string());
+        let order_env = std::env::var("CRYPTO_PROVIDER_ORDER")
+            .unwrap_or_else(|_| "coingecko,coincap,binance".to_string());
         let providers: Vec<String> = order_env
             .split(',')
             .map(|s| s.trim().to_lowercase())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:352:
             .collect();
         for p in providers {
             match p.as_str() {
-                "coingecko" => match self.fetch_from_coingecko(&crypto_codes, fiat_currency).await {
-                    Ok(pr) => { prices = Some(pr); source = "coingecko".to_string(); },
+                "coingecko" => match self
+                    .fetch_from_coingecko(&crypto_codes, fiat_currency)
+                    .await
+                {
+                    Ok(pr) => {
+                        prices = Some(pr);
+                        source = "coingecko".to_string();
+                    }
                     Err(e) => warn!("Failed to fetch from CoinGecko: {}", e),
                 },
                 "coincap" => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:360:
                     // CoinCap effectively USD; for non-USD we still return USD prices for cross computation by caller
                     for code in &crypto_codes {
                         if let Ok(price) = self.fetch_from_coincap(code).await {
-                            if prices.is_none() { prices = Some(HashMap::new()); }
-                            if let Some(ref mut pmap) = prices { pmap.insert(code.to_string(), price); }
+                            if prices.is_none() {
+                                prices = Some(HashMap::new());
+                            }
+                            if let Some(ref mut pmap) = prices {
+                                pmap.insert(code.to_string(), price);
+                            }
                         }
                     }
-                    if prices.is_some() { source = "coincap".to_string(); }
+                    if prices.is_some() {
+                        source = "coincap".to_string();
+                    }
                 }
                 "binance" => {
                     // Binance provides USDT pairs. Only support USD (treated as USDT) directly.
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:371:
                     if fiat_currency.to_uppercase() == "USD" {
                         if let Ok(pmap) = self.fetch_from_binance(&crypto_codes).await {
-                            if !pmap.is_empty() { prices = Some(pmap); source = "binance".to_string(); }
+                            if !pmap.is_empty() {
+                                prices = Some(pmap);
+                                source = "binance".to_string();
+                            }
                         }
                     }
                 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:377:
                 other => warn!("Unknown crypto provider: {}", other),
             }
-            if prices.is_some() { break; }
+            if prices.is_some() {
+                break;
+            }
         }
-        
+
         // 更新缓存
         if let Some(prices) = prices {
             self.cache.insert(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:391:
             );
             return Ok(prices);
         }
-        
+
         // 返回默认价格
         warn!("All crypto APIs failed, returning default prices");
         Ok(self.get_default_crypto_prices())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:398:
     }
-    
+
     /// 从 CoinGecko 获取加密货币价格
-    async fn fetch_from_coingecko(&self, crypto_codes: &[&str], fiat_currency: &str) -> Result<HashMap<String, Decimal>, ServiceError> {
+    async fn fetch_from_coingecko(
+        &self,
+        crypto_codes: &[&str],
+        fiat_currency: &str,
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         // CoinGecko ID 映射
         let id_map: HashMap<&str, &str> = [
             ("BTC", "bitcoin"),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:425:
             ("OP", "optimism"),
             ("SHIB", "shiba-inu"),
             ("TRX", "tron"),
-        ].iter().cloned().collect();
-        
+        ]
+        .iter()
+        .cloned()
+        .collect();
+
         let ids: Vec<String> = crypto_codes
             .iter()
             .filter_map(|code| id_map.get(code).map(|id| id.to_string()))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:433:
             .collect();
-        
+
         if ids.is_empty() {
             return Ok(HashMap::new());
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:438:
-        
+
         let url = format!(
             "https://api.coingecko.com/api/v3/simple/price?ids={}&vs_currencies={}&include_24hr_change=true&include_market_cap=true&include_24hr_vol=true",
             ids.join(","),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:442:
             fiat_currency.to_lowercase()
         );
-        
-        let response = self.client
-            .get(&url)
-            .send()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to fetch from CoinGecko: {}", e),
-            })?;
-        
+
+        let response =
+            self.client
+                .get(&url)
+                .send()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to fetch from CoinGecko: {}", e),
+                })?;
+
         if !response.status().is_success() {
             return Err(ServiceError::ExternalApi {
                 message: format!("CoinGecko API returned status: {}", response.status()),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:456:
             });
         }
-        
-        let data: HashMap<String, HashMap<String, f64>> = response
-            .json()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to parse CoinGecko response: {}", e),
-            })?;
-        
+
+        let data: HashMap<String, HashMap<String, f64>> =
+            response
+                .json()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to parse CoinGecko response: {}", e),
+                })?;
+
         let mut prices = HashMap::new();
-        
+
         // 反向映射回代码
         let reverse_map: HashMap<&str, &str> = id_map.iter().map(|(k, v)| (*v, *k)).collect();
-        
+
         for (id, price_data) in data {
             if let Some(code) = reverse_map.get(id.as_str()) {
                 if let Some(price) = price_data.get(&fiat_currency.to_lowercase()) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:477:
                 }
             }
         }
-        
+
         Ok(prices)
     }
-    
+
     /// 从 CoinCap 获取单个加密货币价格 (仅USD)
     async fn fetch_from_coincap(&self, crypto_code: &str) -> Result<Decimal, ServiceError> {
         let id_map: HashMap<&str, &str> = [
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:500:
             ("LTC", "litecoin"),
             ("UNI", "uniswap"),
             ("ATOM", "cosmos"),
-        ].iter().cloned().collect();
-        
+        ]
+        .iter()
+        .cloned()
+        .collect();
+
         let id = id_map.get(crypto_code).ok_or(ServiceError::NotFound {
             resource_type: "CryptoId".to_string(),
             id: crypto_code.to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:508:
         })?;
-        
+
         let url = format!("https://api.coincap.io/v2/assets/{}", id);
-        
-        let response = self.client
-            .get(&url)
-            .send()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to fetch from CoinCap: {}", e),
-            })?;
-        
+
+        let response =
+            self.client
+                .get(&url)
+                .send()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to fetch from CoinCap: {}", e),
+                })?;
+
         if !response.status().is_success() {
             return Err(ServiceError::ExternalApi {
                 message: format!("CoinCap API returned status: {}", response.status()),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:523:
             });
         }
-        
-        let data: CoinCapResponse = response
-            .json()
-            .await
-            .map_err(|e| ServiceError::ExternalApi {
-                message: format!("Failed to parse CoinCap response: {}", e),
-            })?;
-        
+
+        let data: CoinCapResponse =
+            response
+                .json()
+                .await
+                .map_err(|e| ServiceError::ExternalApi {
+                    message: format!("Failed to parse CoinCap response: {}", e),
+                })?;
+
         Decimal::from_str(&data.data.price_usd).map_err(|e| ServiceError::ExternalApi {
             message: format!("Failed to parse price: {}", e),
         })
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:536:
     }
 
     /// 从 Binance 获取加密货币 USDT 价格 (近似 USD)
-    async fn fetch_from_binance(&self, crypto_codes: &[&str]) -> Result<HashMap<String, Decimal>, ServiceError> {
+    async fn fetch_from_binance(
+        &self,
+        crypto_codes: &[&str],
+    ) -> Result<HashMap<String, Decimal>, ServiceError> {
         let mut result = HashMap::new();
         for code in crypto_codes {
             let uc = code.to_uppercase();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:543:
-            if uc == "USD" || uc == "USDT" { 
+            if uc == "USD" || uc == "USDT" {
                 result.insert(uc.clone(), Decimal::ONE);
-                continue; 
+                continue;
             }
             let symbol = format!("{}USDT", uc);
-            let url = format!("https://api.binance.com/api/v3/ticker/price?symbol={}", symbol);
-            let resp = self.client
-                .get(&url)
-                .send()
-                .await
-                .map_err(|e| ServiceError::ExternalApi { message: format!("Failed to fetch from Binance: {}", e) })?;
+            let url = format!(
+                "https://api.binance.com/api/v3/ticker/price?symbol={}",
+                symbol
+            );
+            let resp =
+                self.client
+                    .get(&url)
+                    .send()
+                    .await
+                    .map_err(|e| ServiceError::ExternalApi {
+                        message: format!("Failed to fetch from Binance: {}", e),
+                    })?;
             if !resp.status().is_success() {
                 // Skip this code silently; continue other codes
                 continue;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:565:
         }
         Ok(result)
     }
-    
+
     /// 获取默认汇率（用于API失败时的备用）
     fn get_default_rates(&self, base_currency: &str) -> HashMap<String, Decimal> {
         let mut rates = HashMap::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:572:
-        
+
         // 基础货币
         rates.insert(base_currency.to_string(), Decimal::ONE);
-        
+
         // 主要货币的大概汇率（以USD为基准）
         let usd_rates: HashMap<&str, f64> = [
             ("USD", 1.0),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:595:
             ("BRL", 5.0),
             ("RUB", 75.0),
             ("ZAR", 15.0),
-        ].iter().cloned().collect();
-        
+        ]
+        .iter()
+        .cloned()
+        .collect();
+
         // 获取基础货币对USD的汇率
         let base_to_usd = usd_rates.get(base_currency).copied().unwrap_or(1.0);
-        
+
         // 计算相对汇率
         for (currency, usd_rate) in usd_rates.iter() {
             if *currency != base_currency {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:609:
                 }
             }
         }
-        
+
         rates
     }
-    
+
     /// 获取默认加密货币价格（USD）
     fn get_default_crypto_prices(&self) -> HashMap<String, Decimal> {
         let prices: HashMap<&str, f64> = [
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:632:
             ("LTC", 100.0),
             ("UNI", 6.0),
             ("ATOM", 10.0),
-        ].iter().cloned().collect();
-        
+        ]
+        .iter()
+        .cloned()
+        .collect();
+
         let mut result = HashMap::new();
         for (code, price) in prices {
             if let Ok(decimal_price) = Decimal::from_str(&price.to_string()) {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:640:
                 result.insert(code.to_string(), decimal_price);
             }
         }
-        
+
         result
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:647:
 
 impl Default for ExchangeRateApiService {
-    fn default() -> Self { Self::new() }
+    fn default() -> Self {
+        Self::new()
+    }
 }
 
 // 单例模式的全局服务实例
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/exchange_rate_api.rs:653:
-use tokio::sync::Mutex;
 use std::sync::Arc;
+use tokio::sync::Mutex;
 
 lazy_static::lazy_static! {
     pub static ref EXCHANGE_RATE_SERVICE: Arc<Mutex<ExchangeRateApiService>> = Arc::new(Mutex::new(ExchangeRateApiService::new()));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:17:
     pub fn new(pool: PgPool) -> Self {
         Self { pool }
     }
-    
+
     pub async fn create_family(
         &self,
         user_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:24:
         request: CreateFamilyRequest,
     ) -> Result<Family, ServiceError> {
         let mut tx = self.pool.begin().await?;
-        
+
         // Check if user already owns a family by checking if they are an owner in any family
         let existing_family_count = sqlx::query_scalar::<_, i64>(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:31:
             SELECT COUNT(*) 
             FROM family_members 
             WHERE user_id = $1 AND role = 'owner'
-            "#
+            "#,
         )
         .bind(user_id)
         .fetch_one(&mut *tx)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:38:
         .await?;
-        
+
         if existing_family_count > 0 {
-            return Err(ServiceError::Conflict("用户已创建家庭，每个用户只能创建一个家庭".to_string()));
+            return Err(ServiceError::Conflict(
+                "用户已创建家庭，每个用户只能创建一个家庭".to_string(),
+            ));
         }
-        
+
         // Get user's name for default family name
-        let user_name: Option<String> = sqlx::query_scalar(
-            "SELECT COALESCE(full_name, email) FROM users WHERE id = $1"
-        )
-        .bind(user_id)
-        .fetch_one(&mut *tx)
-        .await?;
-        
+        let user_name: Option<String> =
+            sqlx::query_scalar("SELECT COALESCE(full_name, email) FROM users WHERE id = $1")
+                .bind(user_id)
+                .fetch_one(&mut *tx)
+                .await?;
+
         // Use provided name or default to "用户名的家庭"
         let family_name = if let Some(name) = request.name {
             if name.trim().is_empty() {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:59:
         } else {
             format!("{}的家庭", user_name.unwrap_or_else(|| "我".to_string()))
         };
-        
+
         // Create family
         tracing::info!(target: "family_service", user_id = %user_id, name = %family_name, "Inserting family with owner_id");
         let family_id = Uuid::new_v4();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:66:
         let invite_code = Family::generate_invite_code();
-        
+
         let family = sqlx::query_as::<_, Family>(
             r#"
             INSERT INTO families (id, name, owner_id, currency, timezone, locale, invite_code, member_count, created_at, updated_at)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:83:
         .bind(Utc::now())
         .fetch_one(&mut *tx)
         .await?;
-        
+
         // Create owner membership
         let owner_permissions = MemberRole::Owner.default_permissions();
         let permissions_json = serde_json::to_value(&owner_permissions)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:90:
-        
+
         sqlx::query(
             r#"
             INSERT INTO family_members (family_id, user_id, role, permissions, joined_at)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:94:
             VALUES ($1, $2, $3, $4, $5)
-            "#
+            "#,
         )
         .bind(family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:101:
         .bind(Utc::now())
         .execute(&mut *tx)
         .await?;
-        
+
         // Create default ledger
         sqlx::query(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:118:
         .bind(Utc::now())
         .execute(&mut *tx)
         .await?;
-        
+
         tx.commit().await?;
-        
+
         Ok(family)
     }
-    
+
     pub async fn get_family(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:130:
         family_id: Uuid,
     ) -> Result<Family, ServiceError> {
         ctx.require_permission(Permission::ViewFamilyInfo)?;
-        
+
         let family = sqlx::query_as::<_, Family>(
-            "SELECT * FROM families WHERE id = $1 AND deleted_at IS NULL"
+            "SELECT * FROM families WHERE id = $1 AND deleted_at IS NULL",
         )
         .bind(family_id)
         .fetch_optional(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:139:
         .await?
         .ok_or_else(|| ServiceError::not_found("Family", family_id))?;
-        
+
         Ok(family)
     }
-    
+
     pub async fn update_family(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:149:
         request: UpdateFamilyRequest,
     ) -> Result<Family, ServiceError> {
         ctx.require_permission(Permission::UpdateFamilyInfo)?;
-        
+
         let mut tx = self.pool.begin().await?;
-        
+
         // Build dynamic update query
         let mut query = String::from("UPDATE families SET updated_at = $1");
         let mut bind_idx = 2;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:158:
         let mut binds = vec![];
-        
+
         if let Some(name) = &request.name {
             query.push_str(&format!(", name = ${}", bind_idx));
             binds.push(name.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:163:
             bind_idx += 1;
         }
-        
+
         if let Some(currency) = &request.currency {
             query.push_str(&format!(", currency = ${}", bind_idx));
             binds.push(currency.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:169:
             bind_idx += 1;
         }
-        
+
         if let Some(timezone) = &request.timezone {
             query.push_str(&format!(", timezone = ${}", bind_idx));
             binds.push(timezone.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:175:
             bind_idx += 1;
         }
-        
+
         if let Some(locale) = &request.locale {
             query.push_str(&format!(", locale = ${}", bind_idx));
             binds.push(locale.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:181:
             bind_idx += 1;
         }
-        
+
         if let Some(date_format) = &request.date_format {
             query.push_str(&format!(", date_format = ${}", bind_idx));
             binds.push(date_format.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:187:
             bind_idx += 1;
         }
-        
+
         query.push_str(&format!(" WHERE id = ${} RETURNING *", bind_idx));
-        
+
         // Execute update
         let mut query_builder = sqlx::query_as::<_, Family>(&query)
             .bind(Utc::now())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:195:
             .bind(family_id);
-        
+
         for bind in binds {
             query_builder = query_builder.bind(bind);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:200:
-        
-        let family = query_builder
-            .fetch_one(&mut *tx)
-            .await?;
-        
+
+        let family = query_builder.fetch_one(&mut *tx).await?;
+
         tx.commit().await?;
-        
+
         Ok(family)
     }
-    
+
     pub async fn delete_family(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:214:
     ) -> Result<(), ServiceError> {
         ctx.require_permission(Permission::DeleteFamily)?;
         ctx.require_owner()?;
-        
+
         // Soft delete - just mark as deleted
-        sqlx::query(
-            "UPDATE families SET deleted_at = $1, updated_at = $1 WHERE id = $2"
-        )
-        .bind(Utc::now())
-        .bind(family_id)
-        .execute(&self.pool)
-        .await?;
-        
+        sqlx::query("UPDATE families SET deleted_at = $1, updated_at = $1 WHERE id = $2")
+            .bind(Utc::now())
+            .bind(family_id)
+            .execute(&self.pool)
+            .await?;
+
         // Update user's current family if this was their current one
         sqlx::query(
             "UPDATE users SET current_family_id = NULL 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:230:
-             WHERE current_family_id = $1"
+             WHERE current_family_id = $1",
         )
         .bind(family_id)
         .execute(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:234:
         .await?;
-        
+
         Ok(())
     }
-    
-    pub async fn get_user_families(
-        &self,
-        user_id: Uuid,
-    ) -> Result<Vec<Family>, ServiceError> {
+
+    pub async fn get_user_families(&self, user_id: Uuid) -> Result<Vec<Family>, ServiceError> {
         // Only show families that:
         // 1. Have more than 1 member (multi-person families)
         // 2. Or the user is the owner (even if single-person)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:252:
                 AND f.deleted_at IS NULL
                 AND (f.member_count > 1 OR fm.role = 'owner')
             ORDER BY fm.joined_at DESC
-            "#
+            "#,
         )
         .bind(user_id)
         .fetch_all(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:259:
         .await?;
-        
+
         Ok(families)
     }
-    
-    pub async fn switch_family(
-        &self,
-        user_id: Uuid,
-        family_id: Uuid,
-    ) -> Result<(), ServiceError> {
+
+    pub async fn switch_family(&self, user_id: Uuid, family_id: Uuid) -> Result<(), ServiceError> {
         // Verify user is member of the family
         let is_member = sqlx::query_scalar::<_, bool>(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:273:
                 SELECT 1 FROM family_members
                 WHERE user_id = $1 AND family_id = $2
             )
-            "#
+            "#,
         )
         .bind(user_id)
         .bind(family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:280:
         .fetch_one(&self.pool)
         .await?;
-        
+
         if !is_member {
             return Err(ServiceError::PermissionDenied);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:286:
-        
+
         // Update current family
-        sqlx::query(
-            "UPDATE users SET current_family_id = $1 WHERE id = $2"
-        )
-        .bind(family_id)
-        .bind(user_id)
-        .execute(&self.pool)
-        .await?;
-        
+        sqlx::query("UPDATE users SET current_family_id = $1 WHERE id = $2")
+            .bind(family_id)
+            .bind(user_id)
+            .execute(&self.pool)
+            .await?;
+
         Ok(())
     }
-    
+
     pub async fn join_family_by_invite_code(
         &self,
         user_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:302:
         invite_code: String,
     ) -> Result<Family, ServiceError> {
         let mut tx = self.pool.begin().await?;
-        
+
         // Find family by invite code
-        let family = sqlx::query_as::<_, Family>(
-            "SELECT * FROM families WHERE invite_code = $1"
-        )
-        .bind(&invite_code)
-        .fetch_optional(&mut *tx)
-        .await?
-        .ok_or_else(|| ServiceError::InvalidInvitation)?;
-        
+        let family = sqlx::query_as::<_, Family>("SELECT * FROM families WHERE invite_code = $1")
+            .bind(&invite_code)
+            .fetch_optional(&mut *tx)
+            .await?
+            .ok_or_else(|| ServiceError::InvalidInvitation)?;
+
         // Check if user is already a member
         let existing_member: Option<i64> = sqlx::query_scalar(
-            "SELECT COUNT(*) FROM family_members WHERE family_id = $1 AND user_id = $2"
+            "SELECT COUNT(*) FROM family_members WHERE family_id = $1 AND user_id = $2",
         )
         .bind(family.id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:321:
         .fetch_one(&mut *tx)
         .await?;
-        
+
         if existing_member.unwrap_or(0) > 0 {
             return Err(ServiceError::Conflict("您已经是该家庭的成员".to_string()));
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:327:
-        
+
         // Add user as a member
         let member_permissions = MemberRole::Member.default_permissions();
         let permissions_json = serde_json::to_value(&member_permissions)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:331:
-        
+
         sqlx::query(
             r#"
             INSERT INTO family_members (family_id, user_id, role, permissions, joined_at)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:335:
             VALUES ($1, $2, $3, $4, $5)
-            "#
+            "#,
         )
         .bind(family.id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:342:
         .bind(Utc::now())
         .execute(&mut *tx)
         .await?;
-        
+
         // Update member count
-        sqlx::query(
-            "UPDATE families SET member_count = member_count + 1 WHERE id = $1"
-        )
-        .bind(family.id)
-        .execute(&mut *tx)
-        .await?;
-        
+        sqlx::query("UPDATE families SET member_count = member_count + 1 WHERE id = $1")
+            .bind(family.id)
+            .execute(&mut *tx)
+            .await?;
+
         tx.commit().await?;
-        
+
         Ok(family)
     }
-    
+
     pub async fn get_family_statistics(
         &self,
         family_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:362:
     ) -> Result<serde_json::Value, ServiceError> {
         // Get member count
-        let member_count: i64 = sqlx::query_scalar(
-            "SELECT COUNT(*) FROM family_members WHERE family_id = $1"
-        )
-        .bind(family_id)
-        .fetch_one(&self.pool)
-        .await?;
-        
+        let member_count: i64 =
+            sqlx::query_scalar("SELECT COUNT(*) FROM family_members WHERE family_id = $1")
+                .bind(family_id)
+                .fetch_one(&self.pool)
+                .await?;
+
         // Get ledger count
-        let ledger_count: i64 = sqlx::query_scalar(
-            "SELECT COUNT(*) FROM ledgers WHERE family_id = $1"
-        )
-        .bind(family_id)
-        .fetch_one(&self.pool)
-        .await?;
-        
+        let ledger_count: i64 =
+            sqlx::query_scalar("SELECT COUNT(*) FROM ledgers WHERE family_id = $1")
+                .bind(family_id)
+                .fetch_one(&self.pool)
+                .await?;
+
         // Get account count
-        let account_count: i64 = sqlx::query_scalar(
-            "SELECT COUNT(*) FROM accounts WHERE family_id = $1"
-        )
-        .bind(family_id)
-        .fetch_one(&self.pool)
-        .await?;
-        
+        let account_count: i64 =
+            sqlx::query_scalar("SELECT COUNT(*) FROM accounts WHERE family_id = $1")
+                .bind(family_id)
+                .fetch_one(&self.pool)
+                .await?;
+
         // Get transaction count
-        let transaction_count: i64 = sqlx::query_scalar(
-            "SELECT COUNT(*) FROM transactions WHERE family_id = $1"
-        )
-        .bind(family_id)
-        .fetch_one(&self.pool)
-        .await?;
-        
+        let transaction_count: i64 =
+            sqlx::query_scalar("SELECT COUNT(*) FROM transactions WHERE family_id = $1")
+                .bind(family_id)
+                .fetch_one(&self.pool)
+                .await?;
+
         // Get total balance
         let total_balance: Option<rust_decimal::Decimal> = sqlx::query_scalar(
             "SELECT SUM(current_balance) FROM accounts a 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:398:
              JOIN ledgers l ON a.ledger_id = l.id 
-             WHERE l.family_id = $1"
+             WHERE l.family_id = $1",
         )
         .bind(family_id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:403:
         .await?;
-        
+
         Ok(serde_json::json!({
             "member_count": member_count,
             "ledger_count": ledger_count,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:410:
             "total_balance": total_balance.unwrap_or(rust_decimal::Decimal::ZERO),
         }))
     }
-    
+
     pub async fn regenerate_invite_code(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:417:
         family_id: Uuid,
     ) -> Result<String, ServiceError> {
         ctx.require_permission(Permission::InviteMembers)?;
-        
+
         let new_code = Family::generate_invite_code();
-        
-        sqlx::query(
-            "UPDATE families SET invite_code = $1, updated_at = $2 WHERE id = $3"
-        )
-        .bind(&new_code)
-        .bind(Utc::now())
-        .bind(family_id)
-        .execute(&self.pool)
-        .await?;
-        
+
+        sqlx::query("UPDATE families SET invite_code = $1, updated_at = $2 WHERE id = $3")
+            .bind(&new_code)
+            .bind(Utc::now())
+            .bind(family_id)
+            .execute(&self.pool)
+            .await?;
+
         Ok(new_code)
     }
-    
-    pub async fn leave_family(
-        &self,
-        user_id: Uuid,
-        family_id: Uuid,
-    ) -> Result<(), ServiceError> {
+
+    pub async fn leave_family(&self, user_id: Uuid, family_id: Uuid) -> Result<(), ServiceError> {
         let mut tx = self.pool.begin().await?;
-        
+
         // Check if user is the owner
         let role: Option<String> = sqlx::query_scalar(
-            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2"
+            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2",
         )
         .bind(family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:448:
         .fetch_optional(&mut *tx)
         .await?;
-        
+
         match role.as_deref() {
             Some("owner") => {
                 // Owner cannot leave, must transfer ownership or delete family
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:454:
                 Err(ServiceError::BusinessRuleViolation(
-                    "家庭所有者不能退出家庭，请先转让所有权或删除家庭".to_string()
+                    "家庭所有者不能退出家庭，请先转让所有权或删除家庭".to_string(),
                 ))
             }
             Some(_) => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:459:
                 // Remove member from family
-                sqlx::query(
-                    "DELETE FROM family_members WHERE family_id = $1 AND user_id = $2"
-                )
-                .bind(family_id)
-                .bind(user_id)
-                .execute(&mut *tx)
-                .await?;
-                
+                sqlx::query("DELETE FROM family_members WHERE family_id = $1 AND user_id = $2")
+                    .bind(family_id)
+                    .bind(user_id)
+                    .execute(&mut *tx)
+                    .await?;
+
                 // Update member count
                 sqlx::query(
                     "UPDATE families SET member_count = GREATEST(member_count - 1, 0) WHERE id = $1"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:472:
                 .bind(family_id)
                 .execute(&mut *tx)
                 .await?;
-                
+
                 // Update user's current family if this was their current one
                 sqlx::query(
                     "UPDATE users SET current_family_id = NULL 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:479:
-                     WHERE id = $1 AND current_family_id = $2"
+                     WHERE id = $1 AND current_family_id = $2",
                 )
                 .bind(user_id)
                 .bind(family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:483:
                 .execute(&mut *tx)
                 .await?;
-                
+
                 tx.commit().await?;
                 Ok(())
             }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/family_service.rs:489:
-            None => {
-                Err(ServiceError::NotFound {
-                    resource_type: "FamilyMember".to_string(),
-                    id: user_id.to_string(),
-                })
-            }
+            None => Err(ServiceError::NotFound {
+                resource_type: "FamilyMember".to_string(),
+                id: user_id.to_string(),
+            }),
         }
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:17:
     pub fn new(pool: PgPool) -> Self {
         Self { pool }
     }
-    
+
     pub async fn add_member(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:25:
         role: MemberRole,
     ) -> Result<FamilyMember, ServiceError> {
         ctx.require_permission(Permission::InviteMembers)?;
-        
+
         // Check if already member
         let exists = sqlx::query_scalar::<_, bool>(
             r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:33:
                 SELECT 1 FROM family_members
                 WHERE family_id = $1 AND user_id = $2
             )
-            "#
+            "#,
         )
         .bind(ctx.family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:40:
         .fetch_one(&self.pool)
         .await?;
-        
+
         if exists {
             return Err(ServiceError::MemberAlreadyExists);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:46:
-        
+
         // Add member
         let permissions = role.default_permissions();
         let permissions_json = serde_json::to_value(&permissions)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:50:
-        
+
         let member = sqlx::query_as::<_, FamilyMember>(
             r#"
             INSERT INTO family_members (
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:55:
             )
             VALUES ($1, $2, $3, $4, $5, $6)
             RETURNING *
-            "#
+            "#,
         )
         .bind(ctx.family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:65:
         .bind(Utc::now())
         .fetch_one(&self.pool)
         .await?;
-        
+
         Ok(member)
     }
-    
+
     pub async fn remove_member(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:75:
         user_id: Uuid,
     ) -> Result<(), ServiceError> {
         ctx.require_permission(Permission::RemoveMembers)?;
-        
+
         // Get member info
         let member_role = sqlx::query_scalar::<_, String>(
-            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2"
+            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2",
         )
         .bind(ctx.family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:85:
         .fetch_optional(&self.pool)
         .await?
         .ok_or_else(|| ServiceError::not_found("Member", user_id))?;
-        
+
         // Cannot remove owner
         if member_role == "owner" {
             return Err(ServiceError::CannotRemoveOwner);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:92:
         }
-        
+
         // Check if actor can manage this role
         let target_role = MemberRole::from_str_name(&member_role)
             .ok_or_else(|| ServiceError::ValidationError("Invalid role".to_string()))?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:97:
-        
+
         if !ctx.can_manage_role(target_role) {
             return Err(ServiceError::PermissionDenied);
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:101:
-        
+
         // Remove member
-        sqlx::query(
-            "DELETE FROM family_members WHERE family_id = $1 AND user_id = $2"
-        )
-        .bind(ctx.family_id)
-        .bind(user_id)
-        .execute(&self.pool)
-        .await?;
-        
+        sqlx::query("DELETE FROM family_members WHERE family_id = $1 AND user_id = $2")
+            .bind(ctx.family_id)
+            .bind(user_id)
+            .execute(&self.pool)
+            .await?;
+
         Ok(())
     }
-    
+
     pub async fn update_member_role(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:118:
         new_role: MemberRole,
     ) -> Result<FamilyMember, ServiceError> {
         ctx.require_permission(Permission::UpdateMemberRoles)?;
-        
+
         // Get current role
         let current_role = sqlx::query_scalar::<_, String>(
-            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2"
+            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2",
         )
         .bind(ctx.family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:128:
         .fetch_optional(&self.pool)
         .await?
         .ok_or_else(|| ServiceError::not_found("Member", user_id))?;
-        
+
         // Cannot change owner role
         if current_role == "owner" {
             return Err(ServiceError::CannotChangeOwnerRole);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:135:
         }
-        
+
         // Check permissions
         if !ctx.can_manage_role(new_role) {
             return Err(ServiceError::PermissionDenied);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:140:
         }
-        
+
         // Update role and permissions
         let permissions = new_role.default_permissions();
         let permissions_json = serde_json::to_value(&permissions)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:145:
-        
+
         let member = sqlx::query_as::<_, FamilyMember>(
             r#"
             UPDATE family_members
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:149:
             SET role = $1, permissions = $2
             WHERE family_id = $3 AND user_id = $4
             RETURNING *
-            "#
+            "#,
         )
         .bind(new_role.to_string())
         .bind(permissions_json)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:157:
         .bind(user_id)
         .fetch_one(&self.pool)
         .await?;
-        
+
         Ok(member)
     }
-    
+
     pub async fn update_member_permissions(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:168:
         permissions: Vec<Permission>,
     ) -> Result<FamilyMember, ServiceError> {
         ctx.require_permission(Permission::UpdateMemberRoles)?;
-        
+
         // Get member role
         let member_role = sqlx::query_scalar::<_, String>(
-            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2"
+            "SELECT role FROM family_members WHERE family_id = $1 AND user_id = $2",
         )
         .bind(ctx.family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:178:
         .fetch_optional(&self.pool)
         .await?
         .ok_or_else(|| ServiceError::not_found("Member", user_id))?;
-        
+
         // Cannot change owner permissions
         if member_role == "owner" {
             return Err(ServiceError::BusinessRuleViolation(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:185:
-                "Owner permissions cannot be customized".to_string()
+                "Owner permissions cannot be customized".to_string(),
             ));
         }
-        
+
         // Update permissions
         let permissions_json = serde_json::to_value(&permissions)?;
-        
+
         let member = sqlx::query_as::<_, FamilyMember>(
             r#"
             UPDATE family_members
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:195:
             SET permissions = $1
             WHERE family_id = $2 AND user_id = $3
             RETURNING *
-            "#
+            "#,
         )
         .bind(permissions_json)
         .bind(ctx.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:202:
         .bind(user_id)
         .fetch_one(&self.pool)
         .await?;
-        
+
         Ok(member)
     }
-    
+
     pub async fn get_family_members(
         &self,
         ctx: &ServiceContext,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:212:
     ) -> Result<Vec<MemberWithUserInfo>, ServiceError> {
         ctx.require_permission(Permission::ViewMembers)?;
-        
+
         let members = sqlx::query_as::<_, MemberWithUserInfo>(
             r#"
             SELECT 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:227:
             JOIN users u ON fm.user_id = u.id
             WHERE fm.family_id = $1
             ORDER BY fm.joined_at
-            "#
+            "#,
         )
         .bind(ctx.family_id)
         .fetch_all(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:234:
         .await?;
-        
+
         Ok(members)
     }
-    
+
     pub async fn check_permission(
         &self,
         user_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:246:
             r#"
             SELECT permissions FROM family_members
             WHERE family_id = $1 AND user_id = $2
-            "#
+            "#,
         )
         .bind(family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:253:
         .fetch_optional(&self.pool)
         .await?;
-        
+
         if let Some(json) = permissions_json {
             let permissions: Vec<Permission> = serde_json::from_value(json)?;
             Ok(permissions.contains(&permission))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:260:
             Ok(false)
         }
     }
-    
+
     pub async fn get_member_context(
         &self,
         user_id: Uuid,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:273:
             email: String,
             full_name: Option<String>,
         }
-        
+
         let row = sqlx::query_as::<_, MemberContextRow>(
             r#"
             SELECT 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:284:
             FROM family_members fm
             JOIN users u ON fm.user_id = u.id
             WHERE fm.family_id = $1 AND fm.user_id = $2
-            "#
+            "#,
         )
         .bind(family_id)
         .bind(user_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/member_service.rs:291:
         .fetch_optional(&self.pool)
         .await?
         .ok_or(ServiceError::PermissionDenied)?;
-        
+
         let role = MemberRole::from_str_name(&row.role)
             .ok_or_else(|| ServiceError::ValidationError("Invalid role".to_string()))?;
-        
+
         let permissions: Vec<Permission> = serde_json::from_value(row.permissions)?;
-        
+
         Ok(ServiceContext::new(
             user_id,
             family_id,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/mod.rs:1:
 #![allow(dead_code)]
 
-pub mod context;
-pub mod error;
-pub mod family_service;
-pub mod member_service;
-pub mod invitation_service;
-pub mod auth_service;
 pub mod audit_service;
-pub mod transaction_service;
-pub mod budget_service;
-pub mod verification_service;
+pub mod auth_service;
 pub mod avatar_service;
+pub mod budget_service;
+pub mod context;
 pub mod currency_service;
+pub mod error;
 pub mod exchange_rate_api;
+pub mod family_service;
+pub mod invitation_service;
+pub mod member_service;
 pub mod scheduled_tasks;
 pub mod tag_service;
+pub mod transaction_service;
+pub mod verification_service;
 
-pub use context::ServiceContext;
-pub use error::ServiceError;
-pub use family_service::FamilyService;
-pub use member_service::MemberService;
-pub use invitation_service::InvitationService;
-pub use auth_service::AuthService;
 pub use audit_service::AuditService;
+pub use auth_service::AuthService;
 #[allow(unused_imports)]
-pub use transaction_service::TransactionService;
+pub use avatar_service::{Avatar, AvatarService, AvatarStyle};
 #[allow(unused_imports)]
 pub use budget_service::BudgetService;
-pub use verification_service::VerificationService;
+pub use context::ServiceContext;
 #[allow(unused_imports)]
-pub use avatar_service::{Avatar, AvatarService, AvatarStyle};
+pub use currency_service::{Currency, CurrencyService, ExchangeRate, FamilyCurrencySettings};
+pub use error::ServiceError;
+pub use family_service::FamilyService;
+pub use invitation_service::InvitationService;
+pub use member_service::MemberService;
 #[allow(unused_imports)]
-pub use currency_service::{CurrencyService, Currency, ExchangeRate, FamilyCurrencySettings};
+pub use tag_service::{TagDto, TagService, TagSummary};
 #[allow(unused_imports)]
-pub use tag_service::{TagService, TagDto, TagSummary};
+pub use transaction_service::TransactionService;
+pub use verification_service::VerificationService;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:1:
 // Utc import not needed after refactor
 use sqlx::PgPool;
-use tokio::time::{interval, Duration as TokioDuration};
-use tracing::{info, error, warn};
 use std::sync::Arc;
+use tokio::time::{interval, Duration as TokioDuration};
+use tracing::{error, info, warn};
 
 use super::currency_service::CurrencyService;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:15:
     pub fn new(pool: Arc<PgPool>) -> Self {
         Self { pool }
     }
-    
+
     /// 启动所有定时任务
     pub async fn start_all_tasks(self: Arc<Self>) {
         info!("Starting scheduled tasks...");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:22:
-        
+
         // 延迟启动时间（秒）
         let startup_delay = std::env::var("STARTUP_DELAY")
             .unwrap_or_else(|_| "30".to_string())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:26:
             .parse::<u64>()
             .unwrap_or(30);
-        
+
         // 启动汇率更新任务（延迟30秒后开始，每15分钟执行）
         let manager_clone = Arc::clone(&self);
         tokio::spawn(async move {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:32:
-            info!("Exchange rate update task will start in {} seconds", startup_delay);
+            info!(
+                "Exchange rate update task will start in {} seconds",
+                startup_delay
+            );
             tokio::time::sleep(TokioDuration::from_secs(startup_delay)).await;
             manager_clone.run_exchange_rate_update_task().await;
         });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:36:
-        
+
         // 启动加密货币价格更新任务（延迟20秒后开始，每5分钟执行）
         let manager_clone = Arc::clone(&self);
         tokio::spawn(async move {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:41:
             tokio::time::sleep(TokioDuration::from_secs(20)).await;
             manager_clone.run_crypto_price_update_task().await;
         });
-        
+
         // 启动缓存清理任务（延迟60秒后开始，每小时执行）
         let manager_clone = Arc::clone(&self);
         tokio::spawn(async move {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:65:
                 .ok()
                 .and_then(|v| v.parse::<u64>().ok())
                 .unwrap_or(60);
-            info!("Manual rate cleanup task will start in 90 seconds, interval: {} minutes", mins);
+            info!(
+                "Manual rate cleanup task will start in 90 seconds, interval: {} minutes",
+                mins
+            );
             tokio::time::sleep(TokioDuration::from_secs(90)).await;
             manager_clone.run_manual_overrides_cleanup_task(mins).await;
         });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:72:
-        
+
         info!("All scheduled tasks initialized (will start after delay)");
     }
-    
+
     /// 汇率更新任务
     async fn run_exchange_rate_update_task(&self) {
         let mut interval = interval(TokioDuration::from_secs(15 * 60)); // 15分钟
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:79:
-        
+
         // 第一次执行汇率更新
         info!("Starting initial exchange rate update");
         self.update_exchange_rates().await;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:83:
-        
+
         loop {
             interval.tick().await;
             info!("Running scheduled exchange rate update");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:87:
             self.update_exchange_rates().await;
         }
     }
-    
+
     /// 执行汇率更新
     async fn update_exchange_rates(&self) {
         // 获取所有需要更新的基础货币
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:98:
                 return;
             }
         };
-        
+
         let currency_service = CurrencyService::new((*self.pool).clone());
-        
+
         for base_currency in base_currencies {
             match currency_service.fetch_latest_rates(&base_currency).await {
                 Ok(_) => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:107:
                     info!("Successfully updated exchange rates for {}", base_currency);
                 }
                 Err(e) => {
-                    warn!("Failed to update exchange rates for {}: {:?}", base_currency, e);
+                    warn!(
+                        "Failed to update exchange rates for {}: {:?}",
+                        base_currency, e
+                    );
                 }
             }
-            
+
             // 避免API限流，每个请求之间等待1秒
             tokio::time::sleep(TokioDuration::from_secs(1)).await;
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:117:
     }
-    
+
     /// 加密货币价格更新任务
     async fn run_crypto_price_update_task(&self) {
         let mut interval = interval(TokioDuration::from_secs(5 * 60)); // 5分钟
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:122:
-        
+
         // 第一次执行
         info!("Starting initial crypto price update");
         self.update_crypto_prices().await;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:126:
-        
+
         loop {
             interval.tick().await;
             info!("Running scheduled crypto price update");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:130:
             self.update_crypto_prices().await;
         }
     }
-    
+
     /// 执行加密货币价格更新
     async fn update_crypto_prices(&self) {
         info!("Checking crypto price updates...");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:137:
-        
+
         // 检查是否有用户启用了加密货币
         let crypto_enabled = match self.check_crypto_enabled().await {
             Ok(enabled) => enabled,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:143:
                 return;
             }
         };
-        
+
         if !crypto_enabled {
             return;
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:150:
-        
+
         let currency_service = CurrencyService::new((*self.pool).clone());
-        
+
         // 主要加密货币列表
         let crypto_codes = vec![
-            "BTC", "ETH", "USDT", "BNB", "SOL", "XRP", "USDC", "ADA",
-            "AVAX", "DOGE", "DOT", "MATIC", "LINK", "LTC", "UNI", "ATOM",
-            "COMP", "MKR", "AAVE", "SUSHI", "ARB", "OP", "SHIB", "TRX"
+            "BTC", "ETH", "USDT", "BNB", "SOL", "XRP", "USDC", "ADA", "AVAX", "DOGE", "DOT",
+            "MATIC", "LINK", "LTC", "UNI", "ATOM", "COMP", "MKR", "AAVE", "SUSHI", "ARB", "OP",
+            "SHIB", "TRX",
         ];
-        
+
         // 获取需要更新的法定货币
         let fiat_currencies = match self.get_crypto_base_currencies().await {
             Ok(currencies) => currencies,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:165:
                 vec!["USD".to_string()] // 默认至少更新USD
             }
         };
-        
+
         for fiat in fiat_currencies {
-            match currency_service.fetch_crypto_prices(crypto_codes.clone(), &fiat).await {
+            match currency_service
+                .fetch_crypto_prices(crypto_codes.clone(), &fiat)
+                .await
+            {
                 Ok(_) => {
                     info!("Successfully updated crypto prices in {}", fiat);
                 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:175:
                     warn!("Failed to update crypto prices in {}: {:?}", fiat, e);
                 }
             }
-            
+
             // 避免API限流
             tokio::time::sleep(TokioDuration::from_secs(2)).await;
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:182:
     }
-    
+
     /// 缓存清理任务
     async fn run_cache_cleanup_task(&self) {
         let mut interval = interval(TokioDuration::from_secs(60 * 60)); // 1小时
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:187:
-        
+
         loop {
             interval.tick().await;
-            
+
             info!("Running cache cleanup task");
-            
+
             // 清理过期的汇率缓存
             match sqlx::query!(
                 r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:201:
             .await
             {
                 Ok(result) => {
-                    info!("Cleaned up {} expired cache entries", result.rows_affected());
+                    info!(
+                        "Cleaned up {} expired cache entries",
+                        result.rows_affected()
+                    );
                 }
                 Err(e) => {
                     error!("Failed to clean cache: {:?}", e);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:208:
                 }
             }
-            
+
             // 清理90天前的转换历史
             match sqlx::query!(
                 r#"
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:219:
             .await
             {
                 Ok(result) => {
-                    info!("Cleaned up {} old conversion history records", result.rows_affected());
+                    info!(
+                        "Cleaned up {} old conversion history records",
+                        result.rows_affected()
+                    );
                 }
                 Err(e) => {
                     error!("Failed to clean conversion history: {:?}", e);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:226:
                 }
             }
-            
         }
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:243:
                 WHERE is_manual = true
                   AND manual_rate_expiry IS NOT NULL
                   AND manual_rate_expiry <= NOW()
-                "#
+                "#,
             )
             .execute(&*self.pool)
             .await
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:250:
             {
                 Ok(res) => {
                     let n = res.rows_affected();
-                    if n > 0 { info!("Cleared {} expired manual rate flags", n); }
+                    if n > 0 {
+                        info!("Cleared {} expired manual rate flags", n);
+                    }
                 }
                 Err(e) => {
                     warn!("Failed to clear expired manual rates: {:?}", e);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:258:
             }
         }
     }
-    
+
     /// 获取所有活跃的基础货币
     async fn get_active_base_currencies(&self) -> Result<Vec<String>, sqlx::Error> {
         let raw = sqlx::query_scalar!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:272:
         .fetch_all(&*self.pool)
         .await?;
         let currencies: Vec<String> = raw.into_iter().flatten().collect();
-        
+
         // 如果没有用户设置，至少更新主要货币
         if currencies.is_empty() {
-            Ok(vec!["USD".to_string(), "EUR".to_string(), "CNY".to_string()])
+            Ok(vec![
+                "USD".to_string(),
+                "EUR".to_string(),
+                "CNY".to_string(),
+            ])
         } else {
             Ok(currencies)
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:282:
     }
-    
+
     /// 检查是否有用户启用了加密货币
     async fn check_crypto_enabled(&self) -> Result<bool, sqlx::Error> {
         let count: Option<i64> = sqlx::query_scalar!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:292:
         )
         .fetch_one(&*self.pool)
         .await?;
-        
+
         Ok(count.unwrap_or(0) > 0)
     }
-    
+
     /// 获取需要更新加密货币价格的法定货币
     async fn get_crypto_base_currencies(&self) -> Result<Vec<String>, sqlx::Error> {
         let raw = sqlx::query_scalar!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/scheduled_tasks.rs:309:
         .fetch_all(&*self.pool)
         .await?;
         let currencies: Vec<String> = raw.into_iter().flatten().collect();
-        
+
         if currencies.is_empty() {
             Ok(vec!["USD".to_string()])
         } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:2:
 use crate::models::transaction::{Transaction, TransactionCreate, TransactionType};
 use chrono::{DateTime, Utc};
 use sqlx::PgPool;
-use uuid::Uuid;
 use std::collections::HashMap;
+use uuid::Uuid;
 
 pub struct TransactionService {
     pool: PgPool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:16:
 
     /// 创建交易并更新账户余额
     pub async fn create_transaction(&self, data: TransactionCreate) -> ApiResult<Transaction> {
-        let mut tx = self.pool.begin().await
+        let mut tx = self
+            .pool
+            .begin()
+            .await
             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         // 生成交易ID
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:23:
         let transaction_id = Uuid::new_v4();
         // 克隆一份数据快照，避免后续字段 move 影响对 &data 的借用
         let data_snapshot = data.clone();
-        
+
         // 获取账户当前余额
-        let current_balance: Option<(f64,)> = sqlx::query_as(
-            "SELECT current_balance FROM accounts WHERE id = $1 FOR UPDATE"
-        )
-        .bind(data.account_id)
-        .fetch_optional(&mut *tx)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let current_balance: Option<(f64,)> =
+            sqlx::query_as("SELECT current_balance FROM accounts WHERE id = $1 FOR UPDATE")
+                .bind(data.account_id)
+                .fetch_optional(&mut *tx)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         let current_balance = current_balance
             .ok_or_else(|| ApiError::NotFound("Account not found".to_string()))?
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:55:
                 $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW(), NOW()
             )
             RETURNING *
-            "#
+            "#,
         )
         .bind(transaction_id)
         .bind(data.ledger_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:73:
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         // 更新账户余额
-        sqlx::query(
-            "UPDATE accounts SET current_balance = $1, updated_at = NOW() WHERE id = $2"
-        )
-        .bind(new_balance)
-        .bind(data.account_id)
-        .execute(&mut *tx)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        sqlx::query("UPDATE accounts SET current_balance = $1, updated_at = NOW() WHERE id = $2")
+            .bind(new_balance)
+            .bind(data.account_id)
+            .execute(&mut *tx)
+            .await
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         // 记录账户余额历史
         sqlx::query(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:87:
             r#"
             INSERT INTO account_balances (id, account_id, balance, balance_date, created_at)
             VALUES ($1, $2, $3, $4, NOW())
-            "#
+            "#,
         )
         .bind(Uuid::new_v4())
         .bind(data.account_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:100:
         // 如果是转账，创建对应的转入交易
         if data.transaction_type == TransactionType::Transfer {
             if let Some(target_account_id) = data.target_account_id {
-                self.create_transfer_target(&mut tx, &transaction_id, &data_snapshot, target_account_id).await?;
+                self.create_transfer_target(
+                    &mut tx,
+                    &transaction_id,
+                    &data_snapshot,
+                    target_account_id,
+                )
+                .await?;
             }
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:107:
         // 提交事务
-        tx.commit().await
+        tx.commit()
+            .await
             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         Ok(transaction)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:120:
         target_account_id: Uuid,
     ) -> ApiResult<()> {
         // 获取目标账户余额
-        let target_balance: Option<(f64,)> = sqlx::query_as(
-            "SELECT current_balance FROM accounts WHERE id = $1 FOR UPDATE"
-        )
-        .bind(target_account_id)
-        .fetch_optional(&mut **tx)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let target_balance: Option<(f64,)> =
+            sqlx::query_as("SELECT current_balance FROM accounts WHERE id = $1 FOR UPDATE")
+                .bind(target_account_id)
+                .fetch_optional(&mut **tx)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         let target_balance = target_balance
             .ok_or_else(|| ApiError::NotFound("Target account not found".to_string()))?
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:144:
             ) VALUES (
                 $1, $2, $3, $4, $5, 'income', '转账收入', '内部转账', $6, $7, $8, NOW(), NOW()
             )
-            "#
+            "#,
         )
         .bind(Uuid::new_v4())
         .bind(data.ledger_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:151:
         .bind(target_account_id)
         .bind(data.transaction_date)
         .bind(data.amount)
-        .bind(format!("从账户转入: {}", data.notes.as_deref().unwrap_or("")))
+        .bind(format!(
+            "从账户转入: {}",
+            data.notes.as_deref().unwrap_or("")
+        ))
         .bind(data.status.clone())
         .bind(source_transaction_id)
         .execute(&mut **tx)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:159:
         .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         // 更新目标账户余额
-        sqlx::query(
-            "UPDATE accounts SET current_balance = $1, updated_at = NOW() WHERE id = $2"
-        )
-        .bind(new_target_balance)
-        .bind(target_account_id)
-        .execute(&mut **tx)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        sqlx::query("UPDATE accounts SET current_balance = $1, updated_at = NOW() WHERE id = $2")
+            .bind(new_target_balance)
+            .bind(target_account_id)
+            .execute(&mut **tx)
+            .await
+            .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         Ok(())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:173:
 
     /// 批量导入交易
-    pub async fn bulk_import(&self, transactions: Vec<TransactionCreate>) -> ApiResult<Vec<Transaction>> {
-        let mut tx = self.pool.begin().await
+    pub async fn bulk_import(
+        &self,
+        transactions: Vec<TransactionCreate>,
+    ) -> ApiResult<Vec<Transaction>> {
+        let mut tx = self
+            .pool
+            .begin()
+            .await
             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         let mut created_transactions = Vec::new();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:181:
 
         // 预加载所有相关账户的余额
         for trans in &transactions {
-            if let std::collections::hash_map::Entry::Vacant(e) = account_balances.entry(trans.account_id) {
-                let balance: Option<(f64,)> = sqlx::query_as(
-                    "SELECT current_balance FROM accounts WHERE id = $1"
-                )
-                .bind(trans.account_id)
-                .fetch_optional(&mut *tx)
-                .await
-                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+            if let std::collections::hash_map::Entry::Vacant(e) =
+                account_balances.entry(trans.account_id)
+            {
+                let balance: Option<(f64,)> =
+                    sqlx::query_as("SELECT current_balance FROM accounts WHERE id = $1")
+                        .bind(trans.account_id)
+                        .fetch_optional(&mut *tx)
+                        .await
+                        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
                 if let Some(balance) = balance {
                     e.insert(balance.0);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:202:
 
         // 处理每笔交易
         for trans_data in sorted_transactions {
-            let account_balance = account_balances.get_mut(&trans_data.account_id)
+            let account_balance = account_balances
+                .get_mut(&trans_data.account_id)
                 .ok_or_else(|| ApiError::NotFound("Account not found".to_string()))?;
 
             // 更新账户余额
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:223:
                     $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW(), NOW()
                 )
                 RETURNING *
-                "#
+                "#,
             )
             .bind(Uuid::new_v4())
             .bind(trans_data.ledger_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:246:
         // 批量更新账户余额
         for (account_id, new_balance) in account_balances {
             sqlx::query(
-                "UPDATE accounts SET current_balance = $1, updated_at = NOW() WHERE id = $2"
+                "UPDATE accounts SET current_balance = $1, updated_at = NOW() WHERE id = $2",
             )
             .bind(new_balance)
             .bind(account_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:255:
             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
         }
 
-        tx.commit().await
+        tx.commit()
+            .await
             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
         Ok(created_transactions)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:264:
     /// 智能分类交易
     pub async fn auto_categorize(&self, transaction_id: Uuid) -> ApiResult<Option<Uuid>> {
         // 获取交易信息
-        let transaction: Option<(String, Option<String>, f64)> = sqlx::query_as(
-            "SELECT payee, notes, amount FROM transactions WHERE id = $1"
-        )
-        .bind(transaction_id)
-        .fetch_optional(&self.pool)
-        .await
-        .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
+        let transaction: Option<(String, Option<String>, f64)> =
+            sqlx::query_as("SELECT payee, notes, amount FROM transactions WHERE id = $1")
+                .bind(transaction_id)
+                .fetch_optional(&self.pool)
+                .await
+                .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
 
-        let (payee, notes, amount) = transaction
-            .ok_or_else(|| ApiError::NotFound("Transaction not found".to_string()))?;
+        let (payee, notes, amount) =
+            transaction.ok_or_else(|| ApiError::NotFound("Transaction not found".to_string()))?;
 
         // 查找匹配的规则
         let rule: Option<(Uuid, Uuid)> = sqlx::query_as(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:289:
             )
             ORDER BY priority DESC
             LIMIT 1
-            "#
+            "#,
         )
         .bind(payee)
         .bind(notes.unwrap_or_else(String::new))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:301:
         if let Some((rule_id, category_id)) = rule {
             // 更新交易分类
             sqlx::query(
-                "UPDATE transactions SET category_id = $1, updated_at = NOW() WHERE id = $2"
+                "UPDATE transactions SET category_id = $1, updated_at = NOW() WHERE id = $2",
             )
             .bind(category_id)
             .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/services/transaction_service.rs:314:
                 r#"
                 INSERT INTO rule_matches (id, rule_id, transaction_id, matched_at)
                 VALUES ($1, $2, $3, NOW())
-                "#
+                "#,
             )
             .bind(Uuid::new_v4())
             .bind(rule_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:13:
 use std::collections::HashMap;
 use std::sync::Arc;
 use tokio::sync::RwLock;
-use tracing::{info, error};
+use tracing::{error, info};
 
 /// WebSocket连接管理器
 pub struct WsConnectionManager {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:26:
             connections: Arc::new(RwLock::new(HashMap::new())),
         }
     }
-    
+
     pub async fn add_connection(&self, id: String, tx: tokio::sync::mpsc::UnboundedSender<String>) {
         self.connections.write().await.insert(id, tx);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:33:
-    
+
     pub async fn remove_connection(&self, id: &str) {
         self.connections.write().await.remove(id);
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:37:
-    
+
     pub async fn send_message(&self, id: &str, message: String) -> Result<(), String> {
         if let Some(tx) = self.connections.read().await.get(id) {
             tx.send(message).map_err(|e| e.to_string())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:45:
 }
 
 impl Default for WsConnectionManager {
-    fn default() -> Self { Self::new() }
+    fn default() -> Self {
+        Self::new()
+    }
 }
 
 /// WebSocket查询参数
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:73:
     // 简单的令牌验证（实际应验证JWT）
     if query.token.is_empty() {
         return ws.on_upgrade(|mut socket| async move {
-            let _ = socket.send(Message::Text(
-                serde_json::to_string(&WsMessage::Error {
-                    message: "Invalid token".to_string(),
-                }).unwrap()
-            )).await;
+            let _ = socket
+                .send(Message::Text(
+                    serde_json::to_string(&WsMessage::Error {
+                        message: "Invalid token".to_string(),
+                    })
+                    .unwrap(),
+                ))
+                .await;
             let _ = socket.close().await;
         });
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:88:
 /// 处理WebSocket连接
 pub async fn handle_socket(socket: WebSocket, token: String, _pool: PgPool) {
     let (mut sender, mut receiver) = socket.split();
-    
+
     // 发送连接成功消息
     let connected_msg = WsMessage::Connected {
         user_id: "test-user".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:95:
     };
-    
+
     if let Ok(msg_str) = serde_json::to_string(&connected_msg) {
         let _ = sender.send(Message::Text(msg_str)).await;
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/ws.rs:100:
-    
+
     info!("WebSocket connected with token: {}", token);
-    
+
     // 处理消息循环
     while let Some(msg) = receiver.next().await {
         match msg {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:5:
     extract::{ws::WebSocketUpgrade, Query, State},
     http::StatusCode,
     response::{Json, Response},
-    routing::{get, post, put, delete},
+    routing::{delete, get, post, put},
     Router,
 };
+use redis::aio::ConnectionManager;
+use redis::Client as RedisClient;
 use serde::Deserialize;
 use serde_json::json;
 use sqlx::postgres::PgPoolOptions;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:16:
 use std::sync::Arc;
 use tokio::net::TcpListener;
 use tower::ServiceBuilder;
-use tower_http::{
-    services::ServeDir,
-    trace::TraceLayer,
-};
-use tracing::{info, warn, error};
+use tower_http::{services::ServeDir, trace::TraceLayer};
+use tracing::{error, info, warn};
 use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
-use redis::aio::ConnectionManager;
-use redis::Client as RedisClient;
 
 // 使用库中的模块
 use jive_money_api::{handlers, services, ws};
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:30:
 
 // 导入处理器
-use handlers::template_handler::*;
 use handlers::accounts::*;
-use handlers::banks;
-use handlers::transactions::*;
-use handlers::payees::*;
-use handlers::rules::*;
+#[cfg(feature = "demo_endpoints")]
+use handlers::audit_handler::{cleanup_audit_logs, export_audit_logs, get_audit_logs};
 use handlers::auth as auth_handlers;
-use handlers::enhanced_profile;
+use handlers::banks;
+use handlers::category_handler;
 use handlers::currency_handler;
 use handlers::currency_handler_enhanced;
+use handlers::enhanced_profile;
+use handlers::family_handler::{
+    create_family, delete_family, get_family, get_family_actions, get_family_statistics,
+    get_role_descriptions, join_family, leave_family, list_families, request_verification_code,
+    transfer_ownership, update_family,
+};
+use handlers::ledgers::{
+    create_ledger, delete_ledger, get_current_ledger, get_ledger, get_ledger_members,
+    get_ledger_statistics, list_ledgers, update_ledger,
+};
+use handlers::member_handler::{
+    add_member, get_family_members, remove_member, update_member_permissions, update_member_role,
+};
+use handlers::payees::*;
+#[cfg(feature = "demo_endpoints")]
+use handlers::placeholder::{activity_logs, advanced_settings, export_data, family_settings};
+use handlers::rules::*;
 use handlers::tag_handler;
-use handlers::category_handler;
+use handlers::template_handler::*;
+use handlers::transactions::*;
 use handlers::travel;
-use handlers::ledgers::{list_ledgers, create_ledger, get_current_ledger, get_ledger,
-                         update_ledger, delete_ledger, get_ledger_statistics, get_ledger_members};
-use handlers::family_handler::{list_families, create_family, get_family, update_family, delete_family, join_family, leave_family, request_verification_code, get_family_statistics, get_family_actions, get_role_descriptions, transfer_ownership};
-use handlers::member_handler::{get_family_members, add_member, remove_member, update_member_role, update_member_permissions};
-#[cfg(feature = "demo_endpoints")]
-use handlers::placeholder::{export_data, activity_logs, advanced_settings, family_settings};
-#[cfg(feature = "demo_endpoints")]
-use handlers::audit_handler::{get_audit_logs, export_audit_logs, cleanup_audit_logs};
 
 // 使用库中的 AppState
 use jive_money_api::AppState;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:75:
             .body("Unauthorized: Missing token".into())
             .unwrap();
     }
-    
-    info!("WebSocket connection request with token: {}", &token[..20.min(token.len())]);
-    
+
+    info!(
+        "WebSocket connection request with token: {}",
+        &token[..20.min(token.len())]
+    );
+
     // 升级为 WebSocket 连接
     ws.on_upgrade(move |socket| ws::handle_socket(socket, token, pool))
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:86:
 async fn main() -> Result<(), Box<dyn std::error::Error>> {
     // 加载环境变量
     dotenv::dotenv().ok();
-    
+
     // 初始化日志
     tracing_subscriber::registry()
         .with(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:93:
-            tracing_subscriber::EnvFilter::try_from_default_env()
-                .unwrap_or_else(|_| "info".into()),
+            tracing_subscriber::EnvFilter::try_from_default_env().unwrap_or_else(|_| "info".into()),
         )
         .with(tracing_subscriber::fmt::layer())
         .init();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:103:
     // DATABASE_URL 回退：开发脚本使用宿主 5433 端口映射容器 5432，这里同步保持一致，避免脚本外手动运行 API 时连接被拒绝
     let database_url = std::env::var("DATABASE_URL").unwrap_or_else(|_| {
         let db_port = std::env::var("DB_PORT").unwrap_or_else(|_| "5433".to_string());
-        format!("postgresql://postgres:postgres@localhost:{}/jive_money", db_port)
+        format!(
+            "postgresql://postgres:postgres@localhost:{}/jive_money",
+            db_port
+        )
     });
-    
+
     info!("📦 Connecting to database...");
-    
+
     let pool = match PgPoolOptions::new()
         .max_connections(20)
         .connect(&database_url)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:137:
     // 创建 WebSocket 管理器
     let ws_manager = Arc::new(ws::WsConnectionManager::new());
     info!("✅ WebSocket manager initialized");
-    
+
     // Redis 连接（可选）
     let redis_manager = match std::env::var("REDIS_URL") {
         Ok(redis_url) => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:182:
                             let mut conn = manager.clone();
                             match redis::cmd("PING").query_async::<String>(&mut conn).await {
                                 Ok(_) => {
-                                    info!("✅ Redis connected successfully (default localhost:6379)");
+                                    info!(
+                                        "✅ Redis connected successfully (default localhost:6379)"
+                                    );
                                     Some(manager)
                                 }
                                 Err(_) => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:204:
             }
         }
     };
-    
+
     // 创建应用状态
     let app_state = AppState {
         pool: pool.clone(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:212:
         redis: redis_manager,
         rate_limited_counter: std::sync::Arc::new(std::sync::atomic::AtomicU64::new(0)),
     };
-    
+
     // 启动定时任务（汇率更新等）
     info!("🕒 Starting scheduled tasks...");
     let pool_arc = Arc::new(pool.clone());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:228:
         // 健康检查
         .route("/health", get(health_check))
         .route("/", get(api_info))
-        
         // WebSocket 端点
         .route("/ws", get(handle_websocket))
-        
         // 分类模板 API
         .route("/api/v1/templates/list", get(get_templates))
         .route("/api/v1/icons/list", get(get_icons))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:238:
         .route("/api/v1/templates/updates", get(get_template_updates))
         .route("/api/v1/templates/usage", post(submit_usage))
-        
         // 超级管理员 API
         .route("/api/v1/admin/templates", post(create_template))
         .route("/api/v1/admin/templates/:template_id", put(update_template))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:244:
-        .route("/api/v1/admin/templates/:template_id", delete(delete_template))
-        
+        .route(
+            "/api/v1/admin/templates/:template_id",
+            delete(delete_template),
+        )
         // 账户管理 API
         .route("/api/v1/accounts", get(list_accounts))
         .route("/api/v1/accounts", post(create_account))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:250:
         .route("/api/v1/accounts/:id", put(update_account))
         .route("/api/v1/accounts/:id", delete(delete_account))
         .route("/api/v1/accounts/statistics", get(get_account_statistics))
-
         // 银行管理 API
         .route("/api/v1/banks", get(banks::list_banks))
         .route("/api/v1/banks/version", get(banks::get_banks_version))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:257:
-
         // 交易管理 API
         .route("/api/v1/transactions", get(list_transactions))
         .route("/api/v1/transactions", post(create_transaction))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:261:
         .route("/api/v1/transactions/export", post(export_transactions))
-        .route("/api/v1/transactions/export.csv", get(export_transactions_csv_stream))
+        .route(
+            "/api/v1/transactions/export.csv",
+            get(export_transactions_csv_stream),
+        )
         .route("/api/v1/transactions/:id", get(get_transaction))
         .route("/api/v1/transactions/:id", put(update_transaction))
         .route("/api/v1/transactions/:id", delete(delete_transaction))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:266:
-        .route("/api/v1/transactions/bulk", post(bulk_transaction_operations))
-        .route("/api/v1/transactions/statistics", get(get_transaction_statistics))
-
+        .route(
+            "/api/v1/transactions/bulk",
+            post(bulk_transaction_operations),
+        )
+        .route(
+            "/api/v1/transactions/statistics",
+            get(get_transaction_statistics),
+        )
         // 旅行模式 API
         .route("/api/v1/travel/events", get(travel::list_travel_events))
         .route("/api/v1/travel/events", post(travel::create_travel_event))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:272:
-        .route("/api/v1/travel/events/active", get(travel::get_active_travel))
+        .route(
+            "/api/v1/travel/events/active",
+            get(travel::get_active_travel),
+        )
         .route("/api/v1/travel/events/:id", get(travel::get_travel_event))
-        .route("/api/v1/travel/events/:id", put(travel::update_travel_event))
-        .route("/api/v1/travel/events/:id/activate", post(travel::activate_travel))
-        .route("/api/v1/travel/events/:id/complete", post(travel::complete_travel))
-        .route("/api/v1/travel/events/:id/cancel", post(travel::cancel_travel))
-        .route("/api/v1/travel/events/:id/transactions", post(travel::attach_transactions))
-        .route("/api/v1/travel/events/:travel_id/transactions/:transaction_id", delete(travel::detach_transaction))
-        .route("/api/v1/travel/events/:id/budgets", get(travel::get_travel_budgets))
-        .route("/api/v1/travel/events/:id/budgets", post(travel::upsert_travel_budget))
-        .route("/api/v1/travel/events/:id/statistics", get(travel::get_travel_statistics))
-
+        .route(
+            "/api/v1/travel/events/:id",
+            put(travel::update_travel_event),
+        )
+        .route(
+            "/api/v1/travel/events/:id/activate",
+            post(travel::activate_travel),
+        )
+        .route(
+            "/api/v1/travel/events/:id/complete",
+            post(travel::complete_travel),
+        )
+        .route(
+            "/api/v1/travel/events/:id/cancel",
+            post(travel::cancel_travel),
+        )
+        .route(
+            "/api/v1/travel/events/:id/transactions",
+            post(travel::attach_transactions),
+        )
+        .route(
+            "/api/v1/travel/events/:travel_id/transactions/:transaction_id",
+            delete(travel::detach_transaction),
+        )
+        .route(
+            "/api/v1/travel/events/:id/budgets",
+            get(travel::get_travel_budgets),
+        )
+        .route(
+            "/api/v1/travel/events/:id/budgets",
+            post(travel::upsert_travel_budget),
+        )
+        .route(
+            "/api/v1/travel/events/:id/statistics",
+            get(travel::get_travel_statistics),
+        )
         // 收款人管理 API
         .route("/api/v1/payees", get(list_payees))
         .route("/api/v1/payees", post(create_payee))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:290:
         .route("/api/v1/payees/suggestions", get(get_payee_suggestions))
         .route("/api/v1/payees/statistics", get(get_payee_statistics))
         .route("/api/v1/payees/merge", post(merge_payees))
-
         // 规则引擎 API
         .route("/api/v1/rules", get(list_rules))
         .route("/api/v1/rules", post(create_rule))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:298:
         .route("/api/v1/rules/:id", put(update_rule))
         .route("/api/v1/rules/:id", delete(delete_rule))
         .route("/api/v1/rules/execute", post(execute_rules))
-        
         // 认证 API
         .route("/api/v1/auth/register", post(auth_handlers::register))
         .route("/api/v1/auth/login", post(auth_handlers::login))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:305:
         .route("/api/v1/auth/refresh", post(auth_handlers::refresh_token))
         .route("/api/v1/auth/user", get(auth_handlers::get_current_user))
-        .route("/api/v1/auth/profile", get(auth_handlers::get_current_user))  // Alias for Flutter app
+        .route("/api/v1/auth/profile", get(auth_handlers::get_current_user)) // Alias for Flutter app
         .route("/api/v1/auth/user", put(auth_handlers::update_user))
         .route("/api/v1/auth/avatar", put(auth_handlers::update_avatar))
-        .route("/api/v1/auth/password", post(auth_handlers::change_password))
+        .route(
+            "/api/v1/auth/password",
+            post(auth_handlers::change_password),
+        )
         .route("/api/v1/auth/delete", delete(auth_handlers::delete_account))
-        
         // Enhanced Profile API
-        .route("/api/v1/auth/register-enhanced", post(enhanced_profile::register_with_preferences))
-        .route("/api/v1/auth/profile-enhanced", get(enhanced_profile::get_enhanced_profile))
-        .route("/api/v1/auth/preferences", put(enhanced_profile::update_preferences))
-        .route("/api/v1/locales", get(enhanced_profile::get_supported_locales))
-        
+        .route(
+            "/api/v1/auth/register-enhanced",
+            post(enhanced_profile::register_with_preferences),
+        )
+        .route(
+            "/api/v1/auth/profile-enhanced",
+            get(enhanced_profile::get_enhanced_profile),
+        )
+        .route(
+            "/api/v1/auth/preferences",
+            put(enhanced_profile::update_preferences),
+        )
+        .route(
+            "/api/v1/locales",
+            get(enhanced_profile::get_supported_locales),
+        )
         // 家庭管理 API
         .route("/api/v1/families", get(list_families))
         .route("/api/v1/families", post(create_family))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:324:
         .route("/api/v1/families/:id", get(get_family))
         .route("/api/v1/families/:id", put(update_family))
         .route("/api/v1/families/:id", delete(delete_family))
-        .route("/api/v1/families/:id/statistics", get(get_family_statistics))
+        .route(
+            "/api/v1/families/:id/statistics",
+            get(get_family_statistics),
+        )
         .route("/api/v1/families/:id/actions", get(get_family_actions))
-        .route("/api/v1/families/:id/transfer-ownership", post(transfer_ownership))
+        .route(
+            "/api/v1/families/:id/transfer-ownership",
+            post(transfer_ownership),
+        )
         .route("/api/v1/roles/descriptions", get(get_role_descriptions))
-        
         // 家庭成员管理 API
         .route("/api/v1/families/:id/members", get(get_family_members))
         .route("/api/v1/families/:id/members", post(add_member))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:335:
-        .route("/api/v1/families/:id/members/:user_id", delete(remove_member))
-        .route("/api/v1/families/:id/members/:user_id/role", put(update_member_role))
-        .route("/api/v1/families/:id/members/:user_id/permissions", put(update_member_permissions))
-        
+        .route(
+            "/api/v1/families/:id/members/:user_id",
+            delete(remove_member),
+        )
+        .route(
+            "/api/v1/families/:id/members/:user_id/role",
+            put(update_member_role),
+        )
+        .route(
+            "/api/v1/families/:id/members/:user_id/permissions",
+            put(update_member_permissions),
+        )
         // 验证码 API
-        .route("/api/v1/verification/request", post(request_verification_code))
-        
+        .route(
+            "/api/v1/verification/request",
+            post(request_verification_code),
+        )
         // 账本 API (Ledgers) - 完整版特有
         .route("/api/v1/ledgers", get(list_ledgers))
         .route("/api/v1/ledgers", post(create_ledger))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:348:
         .route("/api/v1/ledgers/:id", delete(delete_ledger))
         .route("/api/v1/ledgers/:id/statistics", get(get_ledger_statistics))
         .route("/api/v1/ledgers/:id/members", get(get_ledger_members))
-        
         // 货币管理 API - 基础功能
-        .route("/api/v1/currencies", get(currency_handler::get_supported_currencies))
-        .route("/api/v1/currencies/preferences", get(currency_handler::get_user_currency_preferences))
-        .route("/api/v1/currencies/preferences", post(currency_handler::set_user_currency_preferences))
-        .route("/api/v1/currencies/rate", get(currency_handler::get_exchange_rate))
-        .route("/api/v1/currencies/rates", post(currency_handler::get_batch_exchange_rates))
-        .route("/api/v1/currencies/rates/add", post(currency_handler::add_exchange_rate))
-        .route("/api/v1/currencies/rates/clear-manual", post(currency_handler::clear_manual_exchange_rate))
-        .route("/api/v1/currencies/rates/clear-manual-batch", post(currency_handler::clear_manual_exchange_rates_batch))
-        .route("/api/v1/currencies/convert", post(currency_handler::convert_amount))
-        .route("/api/v1/currencies/history", get(currency_handler::get_exchange_rate_history))
-        .route("/api/v1/currencies/popular-pairs", get(currency_handler::get_popular_exchange_pairs))
-        .route("/api/v1/currencies/refresh", post(currency_handler::refresh_exchange_rates))
-        .route("/api/v1/family/currency-settings", get(currency_handler::get_family_currency_settings))
-        .route("/api/v1/family/currency-settings", put(currency_handler::update_family_currency_settings))
-        
+        .route(
+            "/api/v1/currencies",
+            get(currency_handler::get_supported_currencies),
+        )
+        .route(
+            "/api/v1/currencies/preferences",
+            get(currency_handler::get_user_currency_preferences),
+        )
+        .route(
+            "/api/v1/currencies/preferences",
+            post(currency_handler::set_user_currency_preferences),
+        )
+        .route(
+            "/api/v1/currencies/rate",
+            get(currency_handler::get_exchange_rate),
+        )
+        .route(
+            "/api/v1/currencies/rates",
+            post(currency_handler::get_batch_exchange_rates),
+        )
+        .route(
+            "/api/v1/currencies/rates/add",
+            post(currency_handler::add_exchange_rate),
+        )
+        .route(
+            "/api/v1/currencies/rates/clear-manual",
+            post(currency_handler::clear_manual_exchange_rate),
+        )
+        .route(
+            "/api/v1/currencies/rates/clear-manual-batch",
+            post(currency_handler::clear_manual_exchange_rates_batch),
+        )
+        .route(
+            "/api/v1/currencies/convert",
+            post(currency_handler::convert_amount),
+        )
+        .route(
+            "/api/v1/currencies/history",
+            get(currency_handler::get_exchange_rate_history),
+        )
+        .route(
+            "/api/v1/currencies/popular-pairs",
+            get(currency_handler::get_popular_exchange_pairs),
+        )
+        .route(
+            "/api/v1/currencies/refresh",
+            post(currency_handler::refresh_exchange_rates),
+        )
+        .route(
+            "/api/v1/family/currency-settings",
+            get(currency_handler::get_family_currency_settings),
+        )
+        .route(
+            "/api/v1/family/currency-settings",
+            put(currency_handler::update_family_currency_settings),
+        )
         // 货币管理 API - 增强功能
-        .route("/api/v1/currencies/all", get(currency_handler_enhanced::get_all_currencies))
-        .route("/api/v1/currencies/user-settings", get(currency_handler_enhanced::get_user_currency_settings))
-        .route("/api/v1/currencies/user-settings", put(currency_handler_enhanced::update_user_currency_settings))
-        .route("/api/v1/currencies/realtime-rates", get(currency_handler_enhanced::get_realtime_exchange_rates))
-        .route("/api/v1/currencies/rates-detailed", post(currency_handler_enhanced::get_detailed_batch_rates))
-        .route("/api/v1/currencies/manual-overrides", get(currency_handler_enhanced::get_manual_overrides))
+        .route(
+            "/api/v1/currencies/all",
+            get(currency_handler_enhanced::get_all_currencies),
+        )
+        .route(
+            "/api/v1/currencies/user-settings",
+            get(currency_handler_enhanced::get_user_currency_settings),
+        )
+        .route(
+            "/api/v1/currencies/user-settings",
+            put(currency_handler_enhanced::update_user_currency_settings),
+        )
+        .route(
+            "/api/v1/currencies/realtime-rates",
+            get(currency_handler_enhanced::get_realtime_exchange_rates),
+        )
+        .route(
+            "/api/v1/currencies/rates-detailed",
+            post(currency_handler_enhanced::get_detailed_batch_rates),
+        )
+        .route(
+            "/api/v1/currencies/manual-overrides",
+            get(currency_handler_enhanced::get_manual_overrides),
+        )
         // 保留 GET 语义，去除临时 POST 兼容，前端统一改为 GET
-        .route("/api/v1/currencies/crypto-prices", get(currency_handler_enhanced::get_crypto_prices))
-        .route("/api/v1/currencies/convert-any", post(currency_handler_enhanced::convert_currency))
-        .route("/api/v1/currencies/manual-refresh", post(currency_handler_enhanced::manual_refresh_rates))
-
+        .route(
+            "/api/v1/currencies/crypto-prices",
+            get(currency_handler_enhanced::get_crypto_prices),
+        )
+        .route(
+            "/api/v1/currencies/convert-any",
+            post(currency_handler_enhanced::convert_currency),
+        )
+        .route(
+            "/api/v1/currencies/manual-refresh",
+            post(currency_handler_enhanced::manual_refresh_rates),
+        )
         // 标签管理 API（Phase 1 最小集）
         .route("/api/v1/tags", get(tag_handler::list_tags))
         .route("/api/v1/tags", post(tag_handler::create_tag))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:384:
         .route("/api/v1/tags/:id", delete(tag_handler::delete_tag))
         .route("/api/v1/tags/merge", post(tag_handler::merge_tags))
         .route("/api/v1/tags/summary", get(tag_handler::tag_summary))
-
         // 分类管理 API（最小可用）
         .route("/api/v1/categories", get(category_handler::list_categories))
-        .route("/api/v1/categories", post(category_handler::create_category))
-        .route("/api/v1/categories/:id", put(category_handler::update_category))
-        .route("/api/v1/categories/:id", delete(category_handler::delete_category))
-        .route("/api/v1/categories/reorder", post(category_handler::reorder_categories))
-        .route("/api/v1/categories/import-template", post(category_handler::import_template))
-        .route("/api/v1/categories/import", post(category_handler::batch_import_templates))
-
+        .route(
+            "/api/v1/categories",
+            post(category_handler::create_category),
+        )
+        .route(
+            "/api/v1/categories/:id",
+            put(category_handler::update_category),
+        )
+        .route(
+            "/api/v1/categories/:id",
+            delete(category_handler::delete_category),
+        )
+        .route(
+            "/api/v1/categories/reorder",
+            post(category_handler::reorder_categories),
+        )
+        .route(
+            "/api/v1/categories/import-template",
+            post(category_handler::import_template),
+        )
+        .route(
+            "/api/v1/categories/import",
+            post(category_handler::batch_import_templates),
+        )
         // 静态文件
         .route("/static/icons/*path", get(serve_icon))
         .nest_service("/static/bank_icons", ServeDir::new("static/bank_icons"));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:404:
         .route("/api/v1/families/:id/export", get(export_data))
         .route("/api/v1/families/:id/activity-logs", get(activity_logs))
         .route("/api/v1/families/:id/settings", get(family_settings))
-        .route("/api/v1/families/:id/advanced-settings", get(advanced_settings))
+        .route(
+            "/api/v1/families/:id/advanced-settings",
+            get(advanced_settings),
+        )
         .route("/api/v1/export/data", post(export_data))
         .route("/api/v1/activity/logs", get(activity_logs))
         // 简化演示入口
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:417:
     #[cfg(feature = "demo_endpoints")]
     let app = app
         .route("/api/v1/families/:id/audit-logs", get(get_audit_logs))
-        .route("/api/v1/families/:id/audit-logs/export", get(export_audit_logs))
-        .route("/api/v1/families/:id/audit-logs/cleanup", post(cleanup_audit_logs));
+        .route(
+            "/api/v1/families/:id/audit-logs/export",
+            get(export_audit_logs),
+        )
+        .route(
+            "/api/v1/families/:id/audit-logs/cleanup",
+            post(cleanup_audit_logs),
+        );
 
     let app = app
         .layer(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:433:
     let port = std::env::var("API_PORT").unwrap_or_else(|_| "8012".to_string());
     let addr: SocketAddr = format!("{}:{}", host, port).parse()?;
     let listener = TcpListener::bind(addr).await?;
-    
+
     info!("🌐 Server running at http://{}", addr);
     info!("🔌 WebSocket endpoint: ws://{}/ws?token=<jwt_token>", addr);
     info!("");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:461:
     info!("  - Use Authorization header with 'Bearer <token>' for authenticated requests");
     info!("  - WebSocket requires token in query parameter");
     info!("  - All timestamps are in UTC");
-    
+
     axum::serve(listener, app).await?;
-    
+
     Ok(())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main.rs:470:
 /// 健康检查接口（扩展：模式/近期指标）
 async fn health_check(State(state): State<AppState>) -> Json<serde_json::Value> {
     // 运行模式：从 PID 标记或环境变量推断（最佳努力）
-    let mode = std::fs::read_to_string(".pids/api.mode").ok().unwrap_or_else(|| {
-        std::env::var("CORS_DEV").map(|v| if v == "1" { "dev".into() } else { "safe".into() }).unwrap_or_else(|_| "safe".into())
-    });
+    let mode = std::fs::read_to_string(".pids/api.mode")
+        .ok()
+        .unwrap_or_else(|| {
+            std::env::var("CORS_DEV")
+                .map(|v| {
+                    if v == "1" {
+                        "dev".into()
+                    } else {
+                        "safe".into()
+                    }
+                })
+                .unwrap_or_else(|_| "safe".into())
+        });
     // 轻量指标（允许失败，不影响健康响应）
-    let latest_updated_at = sqlx::query(
-        r#"SELECT MAX(updated_at) AS ts FROM exchange_rates"#
-    )
-    .fetch_one(&state.pool)
-    .await
-    .ok()
-    .and_then(|row| row.try_get::<chrono::DateTime<chrono::Utc>, _>("ts").ok())
-    .map(|dt| dt.to_rfc3339());
+    let latest_updated_at = sqlx::query(r#"SELECT MAX(updated_at) AS ts FROM exchange_rates"#)
+        .fetch_one(&state.pool)
+        .await
+        .ok()
+        .and_then(|row| row.try_get::<chrono::DateTime<chrono::Utc>, _>("ts").ok())
+        .map(|dt| dt.to_rfc3339());
 
-    let todays_rows = sqlx::query(r#"SELECT COUNT(*) AS c FROM exchange_rates WHERE date = CURRENT_DATE"#)
-        .fetch_one(&state.pool).await.ok()
-        .and_then(|row| row.try_get::<i64, _>("c").ok())
-        .unwrap_or(0);
+    let todays_rows =
+        sqlx::query(r#"SELECT COUNT(*) AS c FROM exchange_rates WHERE date = CURRENT_DATE"#)
+            .fetch_one(&state.pool)
+            .await
+            .ok()
+            .and_then(|row| row.try_get::<i64, _>("c").ok())
+            .unwrap_or(0);
 
     let manual_active = sqlx::query(
         r#"SELECT COUNT(*) AS c FROM exchange_rates 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple.rs:1:
 //! Jive Money API Server - Simple Version
-//! 
+//!
 //! 测试版本，不连接数据库，返回模拟数据
 
 use axum::{response::Json, routing::get, Router};
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple.rs:6:
+use jive_money_api::middleware::cors::create_cors_layer;
 use serde_json::json;
 use std::net::SocketAddr;
 use tokio::net::TcpListener;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple.rs:9:
-use jive_money_api::middleware::cors::create_cors_layer;
 use tracing::info;
 // tracing_subscriber is used via fully-qualified path below
 // chrono is referenced via fully-qualified path below
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple.rs:33:
     let port = std::env::var("API_PORT").unwrap_or_else(|_| "8012".to_string());
     let addr: SocketAddr = format!("127.0.0.1:{}", port).parse()?;
     let listener = TcpListener::bind(addr).await?;
-    
+
     info!("🌐 Server running at http://{}", addr);
     info!("📋 API Endpoints:");
     info!("  GET  /health                   - 健康检查");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple.rs:40:
     info!("  GET  /api/v1/templates/list    - 获取模板列表");
     info!("  GET  /api/v1/icons/list        - 获取图标列表");
     info!("💡 Test with: curl http://{}/api/v1/templates/list", addr);
-    
+
     axum::serve(listener, app).await?;
-    
+
     Ok(())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:1:
 //! 简化的主程序，用于测试基础功能
 //! 不包含WebSocket，仅包含核心API
 
-use axum::{http::StatusCode, response::Json, routing::{get, post, put, delete}, Router};
+use axum::{
+    http::StatusCode,
+    response::Json,
+    routing::{delete, get, post, put},
+    Router,
+};
+use jive_money_api::middleware::cors::create_cors_layer;
 use serde_json::json;
 use sqlx::postgres::PgPoolOptions;
 use std::net::SocketAddr;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:8:
 use tokio::net::TcpListener;
 use tower::ServiceBuilder;
-use tower_http::{
-    trace::TraceLayer,
-};
-use jive_money_api::middleware::cors::create_cors_layer;
-use tracing::{info, warn, error};
+use tower_http::trace::TraceLayer;
+use tracing::{error, info, warn};
 use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
 
 use jive_money_api::handlers;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:18:
 // WebSocket模块暂时不包含，避免编译错误
 
-use handlers::template_handler::*;
 use handlers::accounts::*;
-use handlers::transactions::*;
+use handlers::auth as auth_handlers;
 use handlers::payees::*;
 use handlers::rules::*;
-use handlers::auth as auth_handlers;
+use handlers::template_handler::*;
+use handlers::transactions::*;
 
 #[tokio::main]
 async fn main() -> Result<(), Box<dyn std::error::Error>> {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:29:
     // 初始化日志
     tracing_subscriber::registry()
         .with(
-            tracing_subscriber::EnvFilter::try_from_default_env()
-                .unwrap_or_else(|_| "info".into()),
+            tracing_subscriber::EnvFilter::try_from_default_env().unwrap_or_else(|_| "info".into()),
         )
         .with(tracing_subscriber::fmt::layer())
         .init();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:40:
     // 数据库连接
     let database_url = std::env::var("DATABASE_URL")
         .unwrap_or_else(|_| "postgresql://jive:jive_password@localhost/jive_money".to_string());
-    
-    info!("📦 Connecting to database: {}", database_url.replace("jive_password", "***"));
-    
+
+    info!(
+        "📦 Connecting to database: {}",
+        database_url.replace("jive_password", "***")
+    );
+
     let pool = match PgPoolOptions::new()
         .max_connections(10)
         .connect(&database_url)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:77:
         // 健康检查
         .route("/health", get(health_check))
         .route("/", get(api_info))
-        
         // 分类模板API
         .route("/api/v1/templates/list", get(get_templates))
         .route("/api/v1/icons/list", get(get_icons))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:84:
         .route("/api/v1/templates/updates", get(get_template_updates))
         .route("/api/v1/templates/usage", post(submit_usage))
-        
         // 超级管理员API
         .route("/api/v1/admin/templates", post(create_template))
         .route("/api/v1/admin/templates/:template_id", put(update_template))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:90:
-        .route("/api/v1/admin/templates/:template_id", delete(delete_template))
-        
+        .route(
+            "/api/v1/admin/templates/:template_id",
+            delete(delete_template),
+        )
         // 账户管理API
         .route("/api/v1/accounts", get(list_accounts))
         .route("/api/v1/accounts", post(create_account))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:96:
         .route("/api/v1/accounts/:id", put(update_account))
         .route("/api/v1/accounts/:id", delete(delete_account))
         .route("/api/v1/accounts/statistics", get(get_account_statistics))
-        
         // 交易管理API
         .route("/api/v1/transactions", get(list_transactions))
         .route("/api/v1/transactions", post(create_transaction))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:103:
         .route("/api/v1/transactions/:id", get(get_transaction))
         .route("/api/v1/transactions/:id", put(update_transaction))
         .route("/api/v1/transactions/:id", delete(delete_transaction))
-        .route("/api/v1/transactions/bulk", post(bulk_transaction_operations))
-        .route("/api/v1/transactions/statistics", get(get_transaction_statistics))
-        
+        .route(
+            "/api/v1/transactions/bulk",
+            post(bulk_transaction_operations),
+        )
+        .route(
+            "/api/v1/transactions/statistics",
+            get(get_transaction_statistics),
+        )
         // 收款人管理API
         .route("/api/v1/payees", get(list_payees))
         .route("/api/v1/payees", post(create_payee))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:115:
         .route("/api/v1/payees/suggestions", get(get_payee_suggestions))
         .route("/api/v1/payees/statistics", get(get_payee_statistics))
         .route("/api/v1/payees/merge", post(merge_payees))
-        
         // 规则引擎API
         .route("/api/v1/rules", get(list_rules))
         .route("/api/v1/rules", post(create_rule))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:123:
         .route("/api/v1/rules/:id", put(update_rule))
         .route("/api/v1/rules/:id", delete(delete_rule))
         .route("/api/v1/rules/execute", post(execute_rules))
-        
         // 认证API
         .route("/api/v1/auth/register", post(auth_handlers::register))
         .route("/api/v1/auth/login", post(auth_handlers::login))
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:130:
         .route("/api/v1/auth/refresh", post(auth_handlers::refresh_token))
         .route("/api/v1/auth/user", get(auth_handlers::get_current_user))
         .route("/api/v1/auth/user", put(auth_handlers::update_user))
-        .route("/api/v1/auth/password", post(auth_handlers::change_password))
-        
+        .route(
+            "/api/v1/auth/password",
+            post(auth_handlers::change_password),
+        )
         // 静态文件
         .route("/static/icons/*path", get(serve_icon))
-        
         .layer(
             ServiceBuilder::new()
                 .layer(TraceLayer::new_for_http())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:146:
     let port = std::env::var("API_PORT").unwrap_or_else(|_| "8012".to_string());
     let addr: SocketAddr = format!("127.0.0.1:{}", port).parse()?;
     let listener = TcpListener::bind(addr).await?;
-    
+
     info!("🌐 Server running at http://{}", addr);
     info!("📋 API Documentation:");
     info!("  Authentication API:");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-api/src/main_simple_ws.rs:163:
     info!("    /api/v1/payees");
     info!("    /api/v1/rules");
     info!("    /api/v1/templates");
-    
+
     axum::serve(listener, app).await?;
-    
+
     Ok(())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:1:
 //! Export service - 数据导出服务
-//! 
+//!
 //! 基于 Maybe 的导出功能转换而来，支持多种导出格式和灵活的数据选择
 
-use std::collections::HashMap;
-use serde::{Serialize, Deserialize};
-use chrono::{DateTime, Utc, NaiveDate};
+use chrono::{DateTime, NaiveDate, Utc};
 use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use std::collections::HashMap;
 use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:12:
 use wasm_bindgen::prelude::*;
 
+use super::{PaginationParams, ServiceContext, ServiceResponse};
+use crate::domain::{Account, Category, Ledger, Transaction};
 use crate::error::{JiveError, Result};
-use crate::domain::{Account, Transaction, Category, Ledger};
-use super::{ServiceContext, ServiceResponse, PaginationParams};
 
 /// 导出格式
 #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:20:
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum ExportFormat {
-    CSV,            // CSV 格式
-    Excel,          // Excel 格式
-    JSON,           // JSON 格式
-    XML,            // XML 格式
-    PDF,            // PDF 格式
-    QIF,            // Quicken Interchange Format
-    OFX,            // Open Financial Exchange
-    Markdown,       // Markdown 格式
-    HTML,           // HTML 格式
+    CSV,      // CSV 格式
+    Excel,    // Excel 格式
+    JSON,     // JSON 格式
+    XML,      // XML 格式
+    PDF,      // PDF 格式
+    QIF,      // Quicken Interchange Format
+    OFX,      // Open Financial Exchange
+    Markdown, // Markdown 格式
+    HTML,     // HTML 格式
 }
 
 /// 导出范围
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:34:
 #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum ExportScope {
-    All,            // 所有数据
-    Ledger,         // 特定账本
-    Account,        // 特定账户
-    Category,       // 特定分类
-    DateRange,      // 日期范围
-    Custom,         // 自定义
+    All,       // 所有数据
+    Ledger,    // 特定账本
+    Account,   // 特定账户
+    Category,  // 特定分类
+    DateRange, // 日期范围
+    Custom,    // 自定义
 }
 
 /// 导出选项
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:109:
 #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum ExportStatus {
-    Pending,        // 待处理
-    Processing,     // 处理中
-    Generating,     // 生成中
-    Completed,      // 完成
-    Failed,         // 失败
-    Cancelled,      // 取消
+    Pending,    // 待处理
+    Processing, // 处理中
+    Generating, // 生成中
+    Completed,  // 完成
+    Failed,     // 失败
+    Cancelled,  // 取消
 }
 
 /// 导出模板
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:337:
         if cfg.include_header {
             out.push_str(&format!(
                 "Date{}Description{}Amount{}Category{}Account{}Payee{}Type\n",
-                cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter
             ));
         }
         for r in rows {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:344:
             let amount_str = r.amount.to_string().replace('.', &cfg.decimal_separator);
             out.push_str(&format!(
                 "{}{}{}{}{}{}{}{}{}{}{}{}{}\n",
-                r.date.format(&cfg.date_format), cfg.delimiter,
-                escape_csv_field(&sanitize_csv_cell(&r.description), cfg.delimiter), cfg.delimiter,
-                amount_str, cfg.delimiter,
-                escape_csv_field(r.category.as_deref().unwrap_or(""), cfg.delimiter), cfg.delimiter,
-                escape_csv_field(&r.account, cfg.delimiter), cfg.delimiter,
-                escape_csv_field(r.payee.as_deref().unwrap_or(""), cfg.delimiter), cfg.delimiter,
+                r.date.format(&cfg.date_format),
+                cfg.delimiter,
+                escape_csv_field(&sanitize_csv_cell(&r.description), cfg.delimiter),
+                cfg.delimiter,
+                amount_str,
+                cfg.delimiter,
+                escape_csv_field(r.category.as_deref().unwrap_or(""), cfg.delimiter),
+                cfg.delimiter,
+                escape_csv_field(&r.account, cfg.delimiter),
+                cfg.delimiter,
+                escape_csv_field(r.payee.as_deref().unwrap_or(""), cfg.delimiter),
+                cfg.delimiter,
                 escape_csv_field(&r.transaction_type, cfg.delimiter),
             ));
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:557:
         context: ServiceContext,
     ) -> Result<ExportResult> {
         // 获取任务
-        let mut task = self._get_export_status(task_id.clone(), context.clone()).await?;
-        
+        let mut task = self
+            ._get_export_status(task_id.clone(), context.clone())
+            .await?;
+
         // 更新状态为处理中
         task.status = ExportStatus::Processing;
-        
+
         // 收集数据
         let export_data = self.collect_export_data(&task.options, &context).await?;
-        
+
         // 计算总项数
-        task.total_items = export_data.transactions.len() as u32 
-            + export_data.accounts.len() as u32 
+        task.total_items = export_data.transactions.len() as u32
+            + export_data.accounts.len() as u32
             + export_data.categories.len() as u32;
-        
+
         // 根据格式导出
         let file_data = match task.options.format {
             ExportFormat::CSV => self.generate_csv(&export_data, &task.options)?,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:581:
                 });
             }
         };
-        
+
         // 保存文件
-        let file_name = format!("export_{}_{}.{}", 
-            context.user_id, 
+        let file_name = format!(
+            "export_{}_{}.{}",
+            context.user_id,
             Utc::now().timestamp(),
             self.get_file_extension(&task.options.format)
         );
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:591:
-        
+
         // 在实际实现中，这里会保存文件到存储服务
         let download_url = format!("/downloads/{}", file_name);
-        
+
         // 更新任务状态
         task.status = ExportStatus::Completed;
         task.exported_items = task.total_items;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:600:
         task.download_url = Some(download_url.clone());
         task.completed_at = Some(Utc::now());
         task.progress = 100;
-        
+
         // 创建导出结果
         let metadata = ExportMetadata {
             version: "1.0.0".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:614:
             tag_count: export_data.tags.len() as u32,
             date_range: None,
         };
-        
+
         Ok(ExportResult {
             task_id: task.id,
             status: task.status,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:657:
     }
 
     /// 取消导出的内部实现
-    async fn _cancel_export(
-        &self,
-        _task_id: String,
-        _context: ServiceContext,
-    ) -> Result<bool> {
+    async fn _cancel_export(&self, _task_id: String, _context: ServiceContext) -> Result<bool> {
         // 在实际实现中，取消正在进行的导出任务
         Ok(true)
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:673:
         context: ServiceContext,
     ) -> Result<Vec<ExportTask>> {
         // 在实际实现中，从数据库获取导出历史
-        let history = vec![
-            ExportTask {
-                id: Uuid::new_v4().to_string(),
-                user_id: context.user_id.clone(),
-                name: "Year 2024 Export".to_string(),
-                description: Some("Complete export for year 2024".to_string()),
-                options: ExportOptions::default(),
-                status: ExportStatus::Completed,
-                progress: 100,
-                total_items: 5000,
-                exported_items: 5000,
-                file_size: 2048000,
-                // 统一改为 JSON 示例文件名
-                file_path: Some("export_2024_full.json".to_string()),
-                download_url: Some("/downloads/export_2024_full.json".to_string()),
-                error_message: None,
-                started_at: Utc::now() - chrono::Duration::days(1),
-                completed_at: Some(Utc::now() - chrono::Duration::days(1) + chrono::Duration::minutes(10)),
-            },
-        ];
+        let history = vec![ExportTask {
+            id: Uuid::new_v4().to_string(),
+            user_id: context.user_id.clone(),
+            name: "Year 2024 Export".to_string(),
+            description: Some("Complete export for year 2024".to_string()),
+            options: ExportOptions::default(),
+            status: ExportStatus::Completed,
+            progress: 100,
+            total_items: 5000,
+            exported_items: 5000,
+            file_size: 2048000,
+            // 统一改为 JSON 示例文件名
+            file_path: Some("export_2024_full.json".to_string()),
+            download_url: Some("/downloads/export_2024_full.json".to_string()),
+            error_message: None,
+            started_at: Utc::now() - chrono::Duration::days(1),
+            completed_at: Some(
+                Utc::now() - chrono::Duration::days(1) + chrono::Duration::minutes(10),
+            ),
+        }];
 
         Ok(history.into_iter().take(limit as usize).collect())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:722:
     }
 
     /// 获取导出模板的内部实现
-    async fn _get_export_templates(
-        &self,
-        _context: ServiceContext,
-    ) -> Result<Vec<ExportTemplate>> {
+    async fn _get_export_templates(&self, _context: ServiceContext) -> Result<Vec<ExportTemplate>> {
         // 在实际实现中，从数据库获取模板
         Ok(Vec::new())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:759:
         context: ServiceContext,
     ) -> Result<String> {
         let export_data = self.collect_export_data(&options, &context).await?;
-        let json = serde_json::to_string_pretty(&export_data)
-            .map_err(|e| JiveError::SerializationError {
+        let json = serde_json::to_string_pretty(&export_data).map_err(|e| {
+            JiveError::SerializationError {
                 message: e.to_string(),
-            })?;
+            }
+        })?;
         Ok(json)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:840:
     /// 生成 CSV 数据
     fn generate_csv(&self, data: &ExportData, _options: &ExportOptions) -> Result<Vec<u8>> {
         let mut csv = String::new();
-        
+
         // 添加标题行
         csv.push_str("Date,Description,Amount,Category,Account\n");
-        
+
         // 添加交易数据
         for transaction in &data.transactions {
             csv.push_str(&format!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:855:
                 transaction.account_id
             ));
         }
-        
+
         Ok(csv.into_bytes())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:862:
     /// 生成带配置的 CSV 数据
-    fn generate_csv_with_config(&self, data: &ExportData, config: &CsvExportConfig) -> Result<Vec<u8>> {
+    fn generate_csv_with_config(
+        &self,
+        data: &ExportData,
+        config: &CsvExportConfig,
+    ) -> Result<Vec<u8>> {
         let mut csv = String::new();
-        
+
         // 添加标题行
         if config.include_header {
             csv.push_str(&format!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:870:
                 config.delimiter, config.delimiter, config.delimiter, config.delimiter
             ));
         }
-        
+
         // 添加交易数据
         for transaction in &data.transactions {
-            let amount_str = transaction.amount.to_string()
+            let amount_str = transaction
+                .amount
+                .to_string()
                 .replace('.', &config.decimal_separator);
-            
+
             csv.push_str(&format!(
                 "{}{}{}{}{}{}{}{}{}\n",
                 transaction.date.format(&config.date_format),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:889:
                 transaction.account_id
             ));
         }
-        
+
         Ok(csv.into_bytes())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:896:
     /// 生成 JSON 数据
     fn generate_json(&self, data: &ExportData) -> Result<Vec<u8>> {
-        let json = serde_json::to_vec_pretty(data)
-            .map_err(|e| JiveError::SerializationError {
-                message: e.to_string(),
-            })?;
+        let json = serde_json::to_vec_pretty(data).map_err(|e| JiveError::SerializationError {
+            message: e.to_string(),
+        })?;
         Ok(json)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:960:
         let context = ServiceContext::new("user-123".to_string());
         let options = ExportOptions::default();
 
-        let result = service._create_export_task(
-            "Test Export".to_string(),
-            options,
-            context
-        ).await;
+        let result = service
+            ._create_export_task("Test Export".to_string(), options, context)
+            .await;
 
         assert!(result.is_ok());
         let task = result.unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:9:
 
 use super::{PaginatedResult, PaginationParams, ServiceContext, ServiceResponse};
 use crate::domain::{
-    AttachTransactionsInput, CreateTravelEventInput, TravelBudget, TravelEvent,
-    TravelStatistics, TravelStatus, UpdateTravelEventInput, UpsertTravelBudgetInput,
+    AttachTransactionsInput, CreateTravelEventInput, TravelBudget, TravelEvent, TravelStatistics,
+    TravelStatus, UpdateTravelEventInput, UpsertTravelBudgetInput,
 };
 use crate::error::{JiveError, Result};
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:37:
         // Check if family already has an active travel
         let active_count: i64 = sqlx::query_scalar(
             "SELECT COUNT(*) FROM travel_events
-             WHERE family_id = $1 AND status = 'active'"
+             WHERE family_id = $1 AND status = 'active'",
         )
         .bind(self.context.family_id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:45:
 
         if active_count > 0 {
             return Err(JiveError::ValidationError(
-                "Family already has an active travel event".to_string()
+                "Family already has an active travel event".to_string(),
             ));
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:58:
                 total_budget, budget_currency_id, home_currency_id,
                 settings, created_by
             ) VALUES ($1, $2, 'planning', $3, $4, $5, $6, $7, $8, $9)
-            RETURNING *"
+            RETURNING *",
         )
         .bind(self.context.family_id)
         .bind(&input.trip_name)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:119:
                 settings = $7,
                 updated_at = NOW()
             WHERE id = $1
-            RETURNING *"
+            RETURNING *",
         )
         .bind(id)
         .bind(&event.trip_name)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:142:
     pub async fn get_travel_event(&self, id: Uuid) -> Result<ServiceResponse<TravelEvent>> {
         let event = sqlx::query_as::<_, TravelEvent>(
             "SELECT * FROM travel_events
-             WHERE id = $1 AND family_id = $2"
+             WHERE id = $1 AND family_id = $2",
         )
         .bind(id)
         .bind(self.context.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:163:
         status: Option<String>,
         pagination: PaginationParams,
     ) -> Result<ServiceResponse<PaginatedResult<TravelEvent>>> {
-        let mut query = String::from(
-            "SELECT * FROM travel_events WHERE family_id = $1"
-        );
-        let mut count_query = String::from(
-            "SELECT COUNT(*) FROM travel_events WHERE family_id = $1"
-        );
+        let mut query = String::from("SELECT * FROM travel_events WHERE family_id = $1");
+        let mut count_query =
+            String::from("SELECT COUNT(*) FROM travel_events WHERE family_id = $1");
 
         if let Some(status) = &status {
             query.push_str(" AND status = $2");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:176:
         }
 
         query.push_str(" ORDER BY created_at DESC");
-        query.push_str(&format!(" LIMIT {} OFFSET {}", pagination.page_size, pagination.offset()));
+        query.push_str(&format!(
+            " LIMIT {} OFFSET {}",
+            pagination.page_size,
+            pagination.offset()
+        ));
 
         // Get total count
         let total = if let Some(status) = &status {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:225:
             "SELECT * FROM travel_events
              WHERE family_id = $1 AND status = 'active'
              ORDER BY created_at DESC
-             LIMIT 1"
+             LIMIT 1",
         )
         .bind(self.context.family_id)
         .fetch_optional(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:244:
         let event = self.get_travel_event(id).await?.data;
         if !event.can_activate() {
             return Err(JiveError::ValidationError(
-                "Travel event cannot be activated from current status".to_string()
+                "Travel event cannot be activated from current status".to_string(),
             ));
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:252:
         sqlx::query(
             "UPDATE travel_events
              SET status = 'completed', updated_at = NOW()
-             WHERE family_id = $1 AND status = 'active' AND id != $2"
+             WHERE family_id = $1 AND status = 'active' AND id != $2",
         )
         .bind(self.context.family_id)
         .bind(id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:264:
             "UPDATE travel_events
              SET status = 'active', updated_at = NOW()
              WHERE id = $1
-             RETURNING *"
+             RETURNING *",
         )
         .bind(id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:285:
         let event = self.get_travel_event(id).await?.data;
         if !event.can_complete() {
             return Err(JiveError::ValidationError(
-                "Travel event cannot be completed from current status".to_string()
+                "Travel event cannot be completed from current status".to_string(),
             ));
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:293:
             "UPDATE travel_events
              SET status = 'completed', updated_at = NOW()
              WHERE id = $1
-             RETURNING *"
+             RETURNING *",
         )
         .bind(id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:312:
             "UPDATE travel_events
              SET status = 'cancelled', updated_at = NOW()
              WHERE id = $1 AND family_id = $2
-             RETURNING *"
+             RETURNING *",
         )
         .bind(id)
         .bind(self.context.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:344:
         // Or find transactions by filter
         else if let Some(filter) = input.filter {
             // Build query based on filter
-            let mut query = String::from(
-                "SELECT id FROM transactions WHERE family_id = $1"
-            );
+            let mut query = String::from("SELECT id FROM transactions WHERE family_id = $1");
 
             if let Some(start_date) = filter.start_date {
                 query.push_str(&format!(" AND date >= '{}'", start_date));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:371:
             let result = sqlx::query(
                 "INSERT INTO travel_transactions (travel_event_id, transaction_id, attached_by)
                  VALUES ($1, $2, $3)
-                 ON CONFLICT (travel_event_id, transaction_id) DO NOTHING"
+                 ON CONFLICT (travel_event_id, transaction_id) DO NOTHING",
             )
             .bind(travel_id)
             .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:403:
     ) -> Result<ServiceResponse<()>> {
         sqlx::query(
             "DELETE FROM travel_transactions
-             WHERE travel_event_id = $1 AND transaction_id = $2"
+             WHERE travel_event_id = $1 AND transaction_id = $2",
         )
         .bind(travel_id)
         .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:446:
                 budget_currency_id = EXCLUDED.budget_currency_id,
                 alert_threshold = EXCLUDED.alert_threshold,
                 updated_at = NOW()
-            RETURNING *"
+            RETURNING *",
         )
         .bind(travel_id)
         .bind(input.category_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:453:
         .bind(input.budget_amount)
         .bind(input.budget_currency_id)
-        .bind(input.alert_threshold.unwrap_or(rust_decimal::Decimal::new(8, 1))) // 0.8
+        .bind(
+            input
+                .alert_threshold
+                .unwrap_or(rust_decimal::Decimal::new(8, 1)),
+        ) // 0.8
         .fetch_one(&self.pool)
         .await?;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:471:
         let budgets = sqlx::query_as::<_, TravelBudget>(
             "SELECT * FROM travel_budgets
              WHERE travel_event_id = $1
-             ORDER BY category_id"
+             ORDER BY category_id",
         )
         .bind(travel_id)
         .fetch_all(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:517:
         .await?;
 
         let total = event.total_spent;
-        let categories = category_spending.into_iter().map(|row| {
-            let amount = rust_decimal::Decimal::from_i64_retain(row.amount.unwrap_or(0)).unwrap_or_default();
-            let percentage = if total.is_zero() {
-                rust_decimal::Decimal::ZERO
-            } else {
-                (amount / total) * rust_decimal::Decimal::from(100)
-            };
+        let categories = category_spending
+            .into_iter()
+            .map(|row| {
+                let amount = rust_decimal::Decimal::from_i64_retain(row.amount.unwrap_or(0))
+                    .unwrap_or_default();
+                let percentage = if total.is_zero() {
+                    rust_decimal::Decimal::ZERO
+                } else {
+                    (amount / total) * rust_decimal::Decimal::from(100)
+                };
 
-            crate::domain::CategorySpending {
-                category_id: row.category_id,
-                category_name: row.category_name,
-                amount,
-                percentage,
-                transaction_count: row.transaction_count.unwrap_or(0) as i32,
-            }
-        }).collect();
+                crate::domain::CategorySpending {
+                    category_id: row.category_id,
+                    category_name: row.category_name,
+                    amount,
+                    percentage,
+                    transaction_count: row.transaction_count.unwrap_or(0) as i32,
+                }
+            })
+            .collect();
 
         let daily_average = if event.duration_days() > 0 {
             event.total_spent / rust_decimal::Decimal::from(event.duration_days())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:577:
                 sqlx::query(
                     "UPDATE travel_budgets
                      SET alert_sent = true, alert_sent_at = NOW()
-                     WHERE id = $1"
+                     WHERE id = $1",
                 )
                 .bind(budget.id)
                 .execute(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:607:
         assert_eq!(1 + 1, 2);
     }
 }
+
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:1:
 //! Category domain model
 
 use chrono::{DateTime, Utc};
-use serde::{Serialize, Deserialize};
+use serde::{Deserialize, Serialize};
 
 #[cfg(feature = "wasm")]
 use wasm_bindgen::prelude::*;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:8:
 
+use super::{AccountClassification, Entity, SoftDeletable};
 use crate::error::{JiveError, Result};
-use super::{Entity, SoftDeletable, AccountClassification};
 
 /// 分类实体
 #[derive(Debug, Clone, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:23:
     icon: Option<String>,
     is_active: bool,
     is_system: bool, // 系统预置分类
-    position: u32, // 排序位置
+    position: u32,   // 排序位置
     // 统计信息
     transaction_count: u32,
     // 审计字段
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:365:
                     color.to_string(),
                     icon.map(|s| s.to_string()),
                     *position,
-                ).unwrap()
+                )
+                .unwrap()
             })
             .collect()
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:394:
                     color.to_string(),
                     icon.map(|s| s.to_string()),
                     *position,
-                ).unwrap()
+                )
+                .unwrap()
             })
             .collect()
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:417:
 }
 
 impl SoftDeletable for Category {
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 /// 分类构建器
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:505:
             message: "Category name is required".to_string(),
         })?;
 
-        let classification = self.classification.ok_or_else(|| JiveError::ValidationError {
-            message: "Classification is required".to_string(),
-        })?;
+        let classification = self
+            .classification
+            .ok_or_else(|| JiveError::ValidationError {
+                message: "Classification is required".to_string(),
+            })?;
 
         let color = self.color.unwrap_or_else(|| "#6B7280".to_string());
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:514:
         let mut category = Category::new(ledger_id, name, classification, color)?;
-        
+
         category.parent_id = self.parent_id;
         if let Some(description) = self.description {
             category.set_description(Some(description))?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:538:
             "Dining".to_string(),
             AccountClassification::Expense,
             "#EF4444".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(category.name(), "Dining");
-        assert!(matches!(category.classification(), AccountClassification::Expense));
+        assert!(matches!(
+            category.classification(),
+            AccountClassification::Expense
+        ));
         assert_eq!(category.color(), "#EF4444");
         assert!(!category.is_system());
         assert!(category.is_active());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:555:
             "Transportation".to_string(),
             AccountClassification::Expense,
             "#F97316".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         let mut child = Category::new(
             "ledger-123".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:562:
             "Gas".to_string(),
             AccountClassification::Expense,
             "#FB923C".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         child.set_parent_id(Some(parent.id()));
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:586:
 
         assert_eq!(category.name(), "Shopping");
         assert_eq!(category.icon(), Some("🛍️".to_string()));
-        assert_eq!(category.description(), Some("Shopping expenses".to_string()));
+        assert_eq!(
+            category.description(),
+            Some("Shopping expenses".to_string())
+        );
         assert_eq!(category.position(), 3);
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:593:
     #[test]
     fn test_system_categories() {
         let ledger_id = "ledger-123".to_string();
-        
+
         let income_categories = Category::default_income_categories(ledger_id.clone());
         let expense_categories = Category::default_expense_categories(ledger_id);
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:618:
             "Test Category".to_string(),
             AccountClassification::Expense,
             "#6B7280".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(category.transaction_count(), 0);
         assert!(category.can_be_deleted());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:640:
             "".to_string(),
             AccountClassification::Expense,
             "#EF4444".to_string(),
-        ).is_err());
+        )
+        .is_err());
 
         // 测试无效颜色
         assert!(Category::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:648:
             "Valid Name".to_string(),
             AccountClassification::Expense,
             "invalid-color".to_string(),
-        ).is_err());
+        )
+        .is_err());
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:1:
 //! Family domain model - 多用户协作核心模型
-//! 
+//!
 //! 基于 Maybe 的 Family 模型设计，支持多用户共享财务数据
 
 use chrono::{DateTime, Utc};
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:6:
-use serde::{Serialize, Deserialize};
-use uuid::Uuid;
 use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
 use wasm_bindgen::prelude::*;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:12:
 
-use crate::error::{JiveError, Result};
 use super::{Entity, SoftDeletable};
+use crate::error::{JiveError, Result};
 
 /// Family - 多用户协作的核心实体
 /// 对应 Maybe 的 Family 模型
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:37:
     pub smart_defaults_enabled: bool,
     pub auto_detect_merchants: bool,
     pub use_last_selected_category: bool,
-    
+
     // 审批设置
     pub require_approval_for_large_transactions: bool,
     pub large_transaction_threshold: Option<Decimal>,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:44:
-    
+
     // 共享设置
     pub shared_categories: bool,
     pub shared_tags: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:48:
     pub shared_payees: bool,
     pub shared_budgets: bool,
-    
+
     // 通知设置
     pub notification_preferences: NotificationPreferences,
-    
+
     // 货币设置
     pub multi_currency_enabled: bool,
     pub auto_update_exchange_rates: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:57:
-    
+
     // 隐私设置
     pub show_member_transactions: bool,
     pub allow_member_exports: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:128:
 #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum FamilyRole {
-    Owner,    // 创建者，拥有所有权限（类似 Maybe 的第一个用户）
-    Admin,    // 管理员，可以管理成员和设置（对应 Maybe 的 admin role）
-    Member,   // 普通成员，可以查看和编辑数据（对应 Maybe 的 member role）
-    Viewer,   // 只读成员，只能查看数据（扩展功能）
+    Owner,  // 创建者，拥有所有权限（类似 Maybe 的第一个用户）
+    Admin,  // 管理员，可以管理成员和设置（对应 Maybe 的 admin role）
+    Member, // 普通成员，可以查看和编辑数据（对应 Maybe 的 member role）
+    Viewer, // 只读成员，只能查看数据（扩展功能）
 }
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:167:
     CreateAccounts,
     EditAccounts,
     DeleteAccounts,
-    ConnectBankAccounts,  // 对应 Maybe 的 Plaid 连接
-    
+    ConnectBankAccounts, // 对应 Maybe 的 Plaid 连接
+
     // 交易权限
     ViewTransactions,
     CreateTransactions,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:177:
     BulkEditTransactions,
     ImportTransactions,
     ExportTransactions,
-    
+
     // 分类权限
     ViewCategories,
     ManageCategories,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:184:
-    
+
     // 商户/收款人权限
     ViewPayees,
     ManagePayees,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:188:
-    
+
     // 标签权限
     ViewTags,
     ManageTags,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:192:
-    
+
     // 预算权限
     ViewBudgets,
     CreateBudgets,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:196:
     EditBudgets,
     DeleteBudgets,
-    
+
     // 报表权限
     ViewReports,
     ExportReports,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:202:
-    
+
     // 规则权限
     ViewRules,
     ManageRules,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:206:
-    
+
     // 管理权限
     InviteMembers,
     RemoveMembers,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:211:
     ManageFamilySettings,
     ManageLedgers,
     ManageIntegrations,
-    
+
     // 高级权限
     ViewAuditLog,
     ManageSubscription,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:218:
-    ImpersonateMembers,  // 对应 Maybe 的 impersonation
+    ImpersonateMembers, // 对应 Maybe 的 impersonation
 }
 
 impl FamilyRole {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:226:
             FamilyRole::Owner => {
                 // Owner 拥有所有权限
                 vec![
-                    ViewAccounts, CreateAccounts, EditAccounts, DeleteAccounts, ConnectBankAccounts,
-                    ViewTransactions, CreateTransactions, EditTransactions, DeleteTransactions,
-                    BulkEditTransactions, ImportTransactions, ExportTransactions,
-                    ViewCategories, ManageCategories,
-                    ViewPayees, ManagePayees,
-                    ViewTags, ManageTags,
-                    ViewBudgets, CreateBudgets, EditBudgets, DeleteBudgets,
-                    ViewReports, ExportReports,
-                    ViewRules, ManageRules,
-                    InviteMembers, RemoveMembers, ManageRoles, ManageFamilySettings,
-                    ManageLedgers, ManageIntegrations,
-                    ViewAuditLog, ManageSubscription, ImpersonateMembers,
+                    ViewAccounts,
+                    CreateAccounts,
+                    EditAccounts,
+                    DeleteAccounts,
+                    ConnectBankAccounts,
+                    ViewTransactions,
+                    CreateTransactions,
+                    EditTransactions,
+                    DeleteTransactions,
+                    BulkEditTransactions,
+                    ImportTransactions,
+                    ExportTransactions,
+                    ViewCategories,
+                    ManageCategories,
+                    ViewPayees,
+                    ManagePayees,
+                    ViewTags,
+                    ManageTags,
+                    ViewBudgets,
+                    CreateBudgets,
+                    EditBudgets,
+                    DeleteBudgets,
+                    ViewReports,
+                    ExportReports,
+                    ViewRules,
+                    ManageRules,
+                    InviteMembers,
+                    RemoveMembers,
+                    ManageRoles,
+                    ManageFamilySettings,
+                    ManageLedgers,
+                    ManageIntegrations,
+                    ViewAuditLog,
+                    ManageSubscription,
+                    ImpersonateMembers,
                 ]
             }
             FamilyRole::Admin => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:244:
                 // Admin 拥有管理权限，但不能管理订阅和模拟用户
                 vec![
-                    ViewAccounts, CreateAccounts, EditAccounts, DeleteAccounts, ConnectBankAccounts,
-                    ViewTransactions, CreateTransactions, EditTransactions, DeleteTransactions,
-                    BulkEditTransactions, ImportTransactions, ExportTransactions,
-                    ViewCategories, ManageCategories,
-                    ViewPayees, ManagePayees,
-                    ViewTags, ManageTags,
-                    ViewBudgets, CreateBudgets, EditBudgets, DeleteBudgets,
-                    ViewReports, ExportReports,
-                    ViewRules, ManageRules,
-                    InviteMembers, RemoveMembers, ManageFamilySettings, ManageLedgers,
-                    ManageIntegrations, ViewAuditLog,
+                    ViewAccounts,
+                    CreateAccounts,
+                    EditAccounts,
+                    DeleteAccounts,
+                    ConnectBankAccounts,
+                    ViewTransactions,
+                    CreateTransactions,
+                    EditTransactions,
+                    DeleteTransactions,
+                    BulkEditTransactions,
+                    ImportTransactions,
+                    ExportTransactions,
+                    ViewCategories,
+                    ManageCategories,
+                    ViewPayees,
+                    ManagePayees,
+                    ViewTags,
+                    ManageTags,
+                    ViewBudgets,
+                    CreateBudgets,
+                    EditBudgets,
+                    DeleteBudgets,
+                    ViewReports,
+                    ExportReports,
+                    ViewRules,
+                    ManageRules,
+                    InviteMembers,
+                    RemoveMembers,
+                    ManageFamilySettings,
+                    ManageLedgers,
+                    ManageIntegrations,
+                    ViewAuditLog,
                 ]
             }
             FamilyRole::Member => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:260:
                 // Member 可以查看和编辑数据，但不能管理
                 vec![
-                    ViewAccounts, CreateAccounts, EditAccounts,
-                    ViewTransactions, CreateTransactions, EditTransactions,
-                    ImportTransactions, ExportTransactions,
+                    ViewAccounts,
+                    CreateAccounts,
+                    EditAccounts,
+                    ViewTransactions,
+                    CreateTransactions,
+                    EditTransactions,
+                    ImportTransactions,
+                    ExportTransactions,
                     ViewCategories,
                     ViewPayees,
                     ViewTags,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:268:
                     ViewBudgets,
-                    ViewReports, ExportReports,
+                    ViewReports,
+                    ExportReports,
                     ViewRules,
                 ]
             }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:298:
 
     /// 检查是否可以导出数据
     pub fn can_export(&self) -> bool {
-        matches!(self, FamilyRole::Owner | FamilyRole::Admin | FamilyRole::Member)
+        matches!(
+            self,
+            FamilyRole::Owner | FamilyRole::Admin | FamilyRole::Member
+        )
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:363:
     /// 接受邀请
     pub fn accept(&mut self) -> Result<()> {
         if !self.is_valid() {
-            return Err(JiveError::ValidationError { message: "Invalid or expired invitation".into() });
+            return Err(JiveError::ValidationError {
+                message: "Invalid or expired invitation".into(),
+            });
         }
-        
+
         self.status = InvitationStatus::Accepted;
         self.accepted_at = Some(Utc::now());
         Ok(())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:400:
     MemberJoined,
     MemberRemoved,
     MemberRoleChanged,
-    
+
     // 数据操作
     DataCreated,
     DataUpdated,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:407:
     DataDeleted,
     DataImported,
     DataExported,
-    
+
     // 设置变更
     SettingsUpdated,
     PermissionsChanged,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:414:
-    
+
     // 安全事件
     LoginAttempt,
     LoginSuccess,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:419:
     PasswordChanged,
     MfaEnabled,
     MfaDisabled,
-    
+
     // 集成操作
     IntegrationConnected,
     IntegrationDisconnected,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:464:
 impl Entity for Family {
     type Id = String;
 
-    fn id(&self) -> &Self::Id { &self.id }
-    fn created_at(&self) -> DateTime<Utc> { self.created_at }
-    fn updated_at(&self) -> DateTime<Utc> { self.updated_at }
+    fn id(&self) -> &Self::Id {
+        &self.id
+    }
+    fn created_at(&self) -> DateTime<Utc> {
+        self.created_at
+    }
+    fn updated_at(&self) -> DateTime<Utc> {
+        self.updated_at
+    }
 }
 
 impl SoftDeletable for Family {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:473:
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 #[cfg(test)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:534:
         );
 
         assert!(family.is_feature_enabled("auto_categorize"));
-        
+
         let mut settings = family.settings.clone();
         settings.auto_categorize_enabled = false;
         family.update_settings(settings);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:541:
-        
+
         assert!(!family.is_feature_enabled("auto_categorize"));
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:1:
 //! Ledger domain model
 
 use chrono::{DateTime, Utc};
-use serde::{Serialize, Deserialize};
+use serde::{Deserialize, Serialize};
 use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:8:
 use wasm_bindgen::prelude::*;
 
-use crate::error::{JiveError, Result};
 use super::{Entity, SoftDeletable};
+use crate::error::{JiveError, Result};
 
 /// 账本类型枚举
 #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:156:
     name: String,
     description: Option<String>,
     ledger_type: LedgerType,
-    color: String, // 十六进制颜色代码
+    color: String,        // 十六进制颜色代码
     icon: Option<String>, // 图标名称或表情符号
     is_default: bool,
     is_active: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:172:
     // 权限相关
     is_shared: bool,
     shared_with_users: Vec<String>, // 共享用户ID列表
-    permission_level: String, // "read", "write", "admin"
+    permission_level: String,       // "read", "write", "admin"
 }
 
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:457:
         if self.user_id == user_id {
             return true;
         }
-        self.shared_with_users.contains(&user_id) && 
-        (self.permission_level == "write" || self.permission_level == "admin")
+        self.shared_with_users.contains(&user_id)
+            && (self.permission_level == "write" || self.permission_level == "admin")
     }
 
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:530:
     }
 
     /// 创建账本的 builder 模式
-    pub fn builder() -> LedgerBuilder { LedgerBuilder::new() }
+    pub fn builder() -> LedgerBuilder {
+        LedgerBuilder::new()
+    }
 
     /// 复制账本（新ID）
     pub fn duplicate(&self, new_name: String) -> Result<Self> {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:566:
 }
 
 impl SoftDeletable for Ledger {
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 /// 账本构建器
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:647:
             message: "Ledger name is required".to_string(),
         })?;
 
-        let ledger_type = self.ledger_type.clone().ok_or_else(|| JiveError::ValidationError {
-            message: "Ledger type is required".to_string(),
-        })?;
+        let ledger_type = self
+            .ledger_type
+            .clone()
+            .ok_or_else(|| JiveError::ValidationError {
+                message: "Ledger type is required".to_string(),
+            })?;
 
         let color = self.color.clone().unwrap_or_else(|| "#3B82F6".to_string());
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:663:
         ledger.description = self.description.clone();
         ledger.icon = self.icon.clone();
         ledger.is_default = self.is_default;
-        
+
         if let Some(description) = self.description.clone() {
             ledger.set_description(Some(description))?;
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:693:
             "My Personal Ledger".to_string(),
             LedgerType::Personal,
             "#3B82F6".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(ledger.name(), "My Personal Ledger");
         assert!(matches!(ledger.ledger_type(), LedgerType::Personal));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:725:
             "Shared Ledger".to_string(),
             LedgerType::Family,
             "#FF6B6B".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert!(!ledger.is_shared());
-        
-        ledger.share_with_user("user-456".to_string(), "write".to_string()).unwrap();
+
+        ledger
+            .share_with_user("user-456".to_string(), "write".to_string())
+            .unwrap();
         assert!(ledger.is_shared());
         assert!(ledger.can_user_access("user-456".to_string()));
         assert!(ledger.can_user_write("user-456".to_string()));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:754:
 
         assert_eq!(ledger.name(), "Project Alpha");
         assert!(matches!(ledger.ledger_type(), LedgerType::Project));
-        assert_eq!(ledger.description(), Some("Project tracking ledger".to_string()));
+        assert_eq!(
+            ledger.description(),
+            Some("Project tracking ledger".to_string())
+        );
         assert_eq!(ledger.icon(), Some("📊".to_string()));
         assert!(ledger.is_default());
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:766:
             "Test Ledger".to_string(),
             LedgerType::Personal,
             "#3B82F6".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(ledger.transaction_count(), 0);
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:788:
             "".to_string(),
             LedgerType::Personal,
             "#3B82F6".to_string(),
-        ).is_err());
+        )
+        .is_err());
 
         // 测试无效颜色
         assert!(Ledger::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:796:
             "Valid Name".to_string(),
             LedgerType::Personal,
             "invalid-color".to_string(),
-        ).is_err());
+        )
+        .is_err());
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/mod.rs:3:
 //! 包含所有业务实体和领域模型
 
 pub mod account;
-pub mod transaction;
-pub mod ledger;
+pub mod base;
 pub mod category;
 pub mod category_template;
-pub mod user;
 pub mod family;
-pub mod base;
+pub mod ledger;
+pub mod transaction;
 pub mod travel;
+pub mod user;
 
 pub use account::*;
-pub use transaction::*;
-pub use ledger::*;
+pub use base::*;
 pub use category::*;
 pub use category_template::*;
-pub use user::*;
 pub use family::*;
-pub use base::*;
+pub use ledger::*;
+pub use transaction::*;
 pub use travel::*;
+pub use user::*;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:1:
 //! Transaction domain model
 
-use chrono::{DateTime, Utc, NaiveDate};
+use chrono::{DateTime, NaiveDate, Utc};
 use rust_decimal::Decimal;
-use serde::{Serialize, Deserialize};
+use serde::{Deserialize, Serialize};
 use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:9:
 use wasm_bindgen::prelude::*;
 
+use super::{Entity, SoftDeletable, TransactionStatus, TransactionType};
 use crate::error::{JiveError, Result};
-use super::{Entity, SoftDeletable, TransactionType, TransactionStatus};
 
 /// 交易实体
 #[derive(Debug, Clone, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:61:
     ) -> Result<Transaction> {
         let parsed_date = NaiveDate::parse_from_str(&date, "%Y-%m-%d")
             .map_err(|_| JiveError::InvalidDate { date })?;
-        
+
         // 验证金额
         crate::utils::Validator::validate_transaction_amount(&amount)?;
         crate::error::validate_currency(&currency)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:68:
-        
+
         // 验证名称
         if name.trim().is_empty() {
             return Err(JiveError::ValidationError {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:295:
                 message: "Tag cannot be empty".to_string(),
             });
         }
-        
+
         if !self.tags.contains(&cleaned_tag) {
             self.tags.push(cleaned_tag);
             self.updated_at = Utc::now();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:355:
     }
 
     #[wasm_bindgen]
-    pub fn set_multi_currency(&mut self, original_amount: String, original_currency: String, exchange_rate: String) -> Result<()> {
+    pub fn set_multi_currency(
+        &mut self,
+        original_amount: String,
+        original_currency: String,
+        exchange_rate: String,
+    ) -> Result<()> {
         crate::error::validate_currency(&original_currency)?;
         crate::utils::Validator::validate_transaction_amount(&original_amount)?;
         crate::utils::Validator::validate_transaction_amount(&exchange_rate)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:362:
-        
+
         self.original_amount = Some(original_amount);
         self.original_currency = Some(original_currency);
         self.exchange_rate = Some(exchange_rate);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:467:
     pub fn search_keywords(&self) -> Vec<String> {
         let mut keywords = Vec::new();
         keywords.push(self.name.to_lowercase());
-        
+
         if let Some(desc) = &self.description {
             keywords.push(desc.to_lowercase());
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:474:
-        
+
         if let Some(notes) = &self.notes {
             keywords.push(notes.to_lowercase());
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:478:
-        
+
         keywords.extend(self.tags.iter().map(|tag| tag.to_lowercase()));
         keywords
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:498:
 }
 
 impl SoftDeletable for Transaction {
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 /// 交易构建器
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:649:
             message: "Date is required".to_string(),
         })?;
 
-        let transaction_type = self.transaction_type.ok_or_else(|| JiveError::ValidationError {
-            message: "Transaction type is required".to_string(),
-        })?;
+        let transaction_type = self
+            .transaction_type
+            .ok_or_else(|| JiveError::ValidationError {
+                message: "Transaction type is required".to_string(),
+            })?;
 
         // 验证输入
         crate::utils::Validator::validate_transaction_amount(&amount)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:710:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(transaction.name(), "Test Transaction");
         assert_eq!(transaction.amount(), "100.50");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:729:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         transaction.add_tag("food".to_string()).unwrap();
         transaction.add_tag("restaurant".to_string()).unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:736:
-        
+
         assert!(transaction.has_tag("food".to_string()));
         assert!(transaction.has_tag("restaurant".to_string()));
         assert!(!transaction.has_tag("travel".to_string()));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:774:
             "CNY".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
-        transaction.set_multi_currency(
-            "100.00".to_string(),
-            "USD".to_string(),
-            "7.20".to_string(),
-        ).unwrap();
+        transaction
+            .set_multi_currency("100.00".to_string(), "USD".to_string(), "7.20".to_string())
+            .unwrap();
 
         assert!(transaction.is_multi_currency());
-        
+
         transaction.clear_multi_currency();
         assert!(!transaction.is_multi_currency());
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:798:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Income,
-        ).unwrap();
+        )
+        .unwrap();
 
         let expense = Transaction::new(
             "account-123".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:808:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(income.signed_amount(), "1000.00");
         assert_eq!(expense.signed_amount(), "-500.00");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:824:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(transaction.month_key(), "2023-12");
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/travel.rs:175:
         }
 
         if let Some(usage_percent) = self.budget_usage_percent() {
-            let threshold = Decimal::from_f32_retain(settings.reminder_settings.alert_threshold * 100.0)
-                .unwrap_or(Decimal::from(80));
+            let threshold =
+                Decimal::from_f32_retain(settings.reminder_settings.alert_threshold * 100.0)
+                    .unwrap_or(Decimal::from(80));
             usage_percent >= threshold
         } else {
             false
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/travel.rs:412:
         assert!(event.should_alert());
     }
 }
+
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:3:
 
 use sqlx::{postgres::PgPoolOptions, PgPool};
 use std::time::Duration;
-use tracing::{info, error};
+use tracing::{error, info};
 
 /// 数据库配置
 #[derive(Debug, Clone)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:39:
     /// 创建新的数据库连接池
     pub async fn new(config: DatabaseConfig) -> Result<Self, sqlx::Error> {
         info!("Initializing database connection pool...");
-        
+
         let pool = PgPoolOptions::new()
             .max_connections(config.max_connections)
             .min_connections(config.min_connections)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:48:
             .max_lifetime(Some(config.max_lifetime))
             .connect(&config.url)
             .await?;
-        
+
         info!("Database connection pool initialized successfully");
         Ok(Self { pool })
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:60:
 
     /// 健康检查
     pub async fn health_check(&self) -> Result<(), sqlx::Error> {
-        sqlx::query("SELECT 1")
-            .fetch_one(&self.pool)
-            .await?;
+        sqlx::query("SELECT 1").fetch_one(&self.pool).await?;
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:72:
         #[cfg(feature = "embed_migrations")]
         {
             info!("Running database migrations (embedded)...");
-            sqlx::migrate!("../../migrations")
-                .run(&self.pool)
-                .await?;
+            sqlx::migrate!("../../migrations").run(&self.pool).await?;
             info!("Database migrations completed");
         }
         // 默认情况下不执行嵌入式迁移，以避免构建期需要本地 migrations 目录
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:82:
     }
 
     /// 开始事务
-    pub async fn begin_transaction(&self) -> Result<sqlx::Transaction<'_, sqlx::Postgres>, sqlx::Error> {
+    pub async fn begin_transaction(
+        &self,
+    ) -> Result<sqlx::Transaction<'_, sqlx::Postgres>, sqlx::Error> {
         self.pool.begin().await
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:111:
     pub async fn start_monitoring(self) {
         tokio::spawn(async move {
             let mut interval = tokio::time::interval(self.check_interval);
-            
+
             loop {
                 interval.tick().await;
-                
+
                 match self.database.health_check().await {
                     Ok(_) => {
                         info!("Database health check passed");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:138:
         let config = DatabaseConfig::default();
         let db = Database::new(config).await;
         assert!(db.is_ok());
-        
+
         if let Ok(database) = db {
             let health_check = database.health_check().await;
             assert!(health_check.is_ok());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:149:
     async fn test_transaction() {
         let config = DatabaseConfig::default();
         let db = Database::new(config).await.unwrap();
-        
+
         let tx = db.begin_transaction().await;
         assert!(tx.is_ok());
-        
+
         if let Ok(mut transaction) = tx {
             // 测试事务操作
-            let result = sqlx::query("SELECT 1")
-                .fetch_one(&mut *transaction)
-                .await;
+            let result = sqlx::query("SELECT 1").fetch_one(&mut *transaction).await;
             assert!(result.is_ok());
-            
+
             transaction.rollback().await.unwrap();
         }
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:2:
 // Based on Maybe's database structure
 
 #[cfg(feature = "db")]
-pub mod family;
-#[cfg(feature = "db")]
-pub mod user;
-#[cfg(feature = "db")]
 pub mod account;
-#[cfg(feature = "db")]
-pub mod transaction;
-pub mod budget;
 pub mod balance;
+pub mod budget;
+#[cfg(feature = "db")]
+pub mod family;
 pub mod import;
 pub mod rule;
+#[cfg(feature = "db")]
+pub mod transaction;
+#[cfg(feature = "db")]
+pub mod user;
 
 use chrono::{DateTime, NaiveDate, Utc};
 use rust_decimal::Decimal;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:23:
 // Common trait for all entities
 pub trait Entity {
     type Id;
-    
+
     fn id(&self) -> Self::Id;
     fn created_at(&self) -> DateTime<Utc>;
     fn updated_at(&self) -> DateTime<Utc>;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:32:
 // For polymorphic associations (Rails delegated_type pattern)
 pub trait Accountable: Send + Sync {
     const TYPE_NAME: &'static str;
-    
+
     async fn save(&self, tx: &mut sqlx::PgConnection) -> Result<Uuid, sqlx::Error>;
     async fn load(id: Uuid, conn: &sqlx::PgPool) -> Result<Self, sqlx::Error>
     where
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:42:
 // For transaction entries (Rails single table inheritance pattern)
 pub trait Entryable: Send + Sync {
     const TYPE_NAME: &'static str;
-    
+
     fn to_entry(&self) -> Entry;
     fn from_entry(entry: Entry) -> Result<Self, String>
     where
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:144:
     pub fn new(start: NaiveDate, end: NaiveDate) -> Self {
         Self { start, end }
     }
-    
+
     pub fn current_month() -> Self {
         let now = chrono::Local::now().naive_local().date();
         let start = NaiveDate::from_ymd_opt(now.year(), now.month(), 1).unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:151:
         let end = if now.month() == 12 {
             NaiveDate::from_ymd_opt(now.year() + 1, 1, 1).unwrap() - chrono::Duration::days(1)
         } else {
-            NaiveDate::from_ymd_opt(now.year(), now.month() + 1, 1).unwrap() - chrono::Duration::days(1)
+            NaiveDate::from_ymd_opt(now.year(), now.month() + 1, 1).unwrap()
+                - chrono::Duration::days(1)
         };
         Self { start, end }
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:158:
-    
+
     pub fn current_year() -> Self {
         let now = chrono::Local::now().naive_local().date();
         let start = NaiveDate::from_ymd_opt(now.year(), 1, 1).unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:1:
 //! Utility functions for Jive Core
 
-use chrono::{DateTime, Utc, NaiveDate, Datelike};
-use uuid::Uuid;
-use rust_decimal::Decimal;
-use serde::{Serialize, Deserialize};
 use crate::error::{JiveError, Result};
+use chrono::{DateTime, Datelike, NaiveDate, Utc};
+use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
 use wasm_bindgen::prelude::*;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:58:
 /// 计算两个金额的加法
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub fn add_amounts(amount1: &str, amount2: &str) -> Result<String> {
-    let a1 = amount1.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount1.to_string() })?;
-    let a2 = amount2.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount2.to_string() })?;
-    
+    let a1 = amount1
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount1.to_string(),
+        })?;
+    let a2 = amount2
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount2.to_string(),
+        })?;
+
     Ok((a1 + a2).to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:69:
 /// 计算两个金额的减法
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub fn subtract_amounts(amount1: &str, amount2: &str) -> Result<String> {
-    let a1 = amount1.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount1.to_string() })?;
-    let a2 = amount2.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount2.to_string() })?;
-    
+    let a1 = amount1
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount1.to_string(),
+        })?;
+    let a2 = amount2
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount2.to_string(),
+        })?;
+
     Ok((a1 - a2).to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:80:
 /// 计算两个金额的乘法
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub fn multiply_amounts(amount: &str, multiplier: &str) -> Result<String> {
-    let a = amount.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount.to_string() })?;
-    let m = multiplier.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: multiplier.to_string() })?;
-    
+    let a = amount
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount.to_string(),
+        })?;
+    let m = multiplier
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: multiplier.to_string(),
+        })?;
+
     Ok((a * m).to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:107:
         if from_currency == to_currency {
             return Ok(amount.to_string());
         }
-        
-        let decimal_amount = amount.parse::<Decimal>()
-            .map_err(|_| JiveError::InvalidAmount { amount: amount.to_string() })?;
-        
+
+        let decimal_amount = amount
+            .parse::<Decimal>()
+            .map_err(|_| JiveError::InvalidAmount {
+                amount: amount.to_string(),
+            })?;
+
         let rate = self.get_exchange_rate(from_currency, to_currency)?;
         let converted = decimal_amount * rate;
-        
+
         Ok(converted.to_string())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:120:
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn get_supported_currencies(&self) -> Vec<String> {
         vec![
-            "USD".to_string(), "EUR".to_string(), "GBP".to_string(),
-            "JPY".to_string(), "CNY".to_string(), "CAD".to_string(),
-            "AUD".to_string(), "CHF".to_string(), "SEK".to_string(),
-            "NOK".to_string(), "DKK".to_string(), "KRW".to_string(),
-            "SGD".to_string(), "HKD".to_string(), "INR".to_string(),
-            "BRL".to_string(), "MXN".to_string(), "RUB".to_string(),
-            "ZAR".to_string(), "TRY".to_string(),
+            "USD".to_string(),
+            "EUR".to_string(),
+            "GBP".to_string(),
+            "JPY".to_string(),
+            "CNY".to_string(),
+            "CAD".to_string(),
+            "AUD".to_string(),
+            "CHF".to_string(),
+            "SEK".to_string(),
+            "NOK".to_string(),
+            "DKK".to_string(),
+            "KRW".to_string(),
+            "SGD".to_string(),
+            "HKD".to_string(),
+            "INR".to_string(),
+            "BRL".to_string(),
+            "MXN".to_string(),
+            "RUB".to_string(),
+            "ZAR".to_string(),
+            "TRY".to_string(),
         ]
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:133:
     fn get_exchange_rate(&self, from: &str, to: &str) -> Result<Decimal> {
         // 简化的汇率表，实际应该从外部 API 获取
         let rates = [
-            ("USD", "CNY", Decimal::new(720, 2)), // 7.20
-            ("EUR", "CNY", Decimal::new(780, 2)), // 7.80
-            ("GBP", "CNY", Decimal::new(890, 2)), // 8.90
-            ("USD", "EUR", Decimal::new(92, 2)),  // 0.92
-            ("USD", "GBP", Decimal::new(80, 2)),  // 0.80
-            ("USD", "JPY", Decimal::new(15000, 2)), // 150.00
+            ("USD", "CNY", Decimal::new(720, 2)),    // 7.20
+            ("EUR", "CNY", Decimal::new(780, 2)),    // 7.80
+            ("GBP", "CNY", Decimal::new(890, 2)),    // 8.90
+            ("USD", "EUR", Decimal::new(92, 2)),     // 0.92
+            ("USD", "GBP", Decimal::new(80, 2)),     // 0.80
+            ("USD", "JPY", Decimal::new(15000, 2)),  // 150.00
             ("USD", "KRW", Decimal::new(133000, 2)), // 1330.00
         ];
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:178:
     /// 解析日期字符串
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn parse_date(date_str: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
         Ok(date.to_string())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:186:
     /// 格式化日期
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn format_date(date_str: &str, format: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
         Ok(date.format(format).to_string())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:194:
     /// 获取月初日期
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn get_month_start(date_str: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
         let month_start = date.with_day(1).unwrap();
         Ok(month_start.to_string())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:203:
     /// 获取月末日期
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn get_month_end(date_str: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
-        
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
+
         let next_month = if date.month() == 12 {
             NaiveDate::from_ymd_opt(date.year() + 1, 1, 1).unwrap()
         } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:212:
             NaiveDate::from_ymd_opt(date.year(), date.month() + 1, 1).unwrap()
         };
-        
+
         let month_end = next_month.pred_opt().unwrap();
         Ok(month_end.to_string())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:244:
 
     /// 验证交易金额
     pub fn validate_transaction_amount(amount: &str) -> Result<Decimal> {
-        let decimal = amount.parse::<Decimal>()
-            .map_err(|_| JiveError::InvalidAmount { amount: amount.to_string() })?;
-        
+        let decimal = amount
+            .parse::<Decimal>()
+            .map_err(|_| JiveError::InvalidAmount {
+                amount: amount.to_string(),
+            })?;
+
         if decimal.is_zero() {
             return Err(JiveError::ValidationError {
                 message: "Transaction amount cannot be zero".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:253:
             });
         }
-        
+
         // 检查金额是否过大
-        if decimal.abs() > Decimal::new(999999999999i64, 2) { // 9,999,999,999.99
+        if decimal.abs() > Decimal::new(999999999999i64, 2) {
+            // 9,999,999,999.99
             return Err(JiveError::ValidationError {
                 message: "Transaction amount too large".to_string(),
             });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:261:
         }
-        
+
         Ok(decimal)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:271:
                 message: "Email cannot be empty".to_string(),
             });
         }
-        
+
         if !trimmed.contains('@') || !trimmed.contains('.') {
             return Err(JiveError::ValidationError {
                 message: "Invalid email format".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:278:
             });
         }
-        
+
         if trimmed.len() > 254 {
             return Err(JiveError::ValidationError {
                 message: "Email too long".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:284:
             });
         }
-        
+
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:294:
                 message: "Password must be at least 8 characters long".to_string(),
             });
         }
-        
+
         if password.len() > 128 {
             return Err(JiveError::ValidationError {
                 message: "Password too long (max 128 characters)".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:301:
             });
         }
-        
+
         let has_upper = password.chars().any(|c| c.is_uppercase());
         let has_lower = password.chars().any(|c| c.is_lowercase());
         let has_digit = password.chars().any(|c| c.is_numeric());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:307:
-        
+
         if !has_upper || !has_lower || !has_digit {
             return Err(JiveError::ValidationError {
                 message: "Password must contain uppercase, lowercase, and numbers".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:311:
             });
         }
-        
+
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:331:
 impl StringUtils {
     /// 清理和标准化文本
     pub fn clean_text(text: &str) -> String {
-        text.trim().chars()
+        text.trim()
+            .chars()
             .filter(|c| !c.is_control() || c.is_whitespace())
             .collect::<String>()
             .split_whitespace()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:351:
     /// 生成简短的显示ID（用于UI）
     pub fn short_id(full_id: &str) -> String {
         if full_id.len() > 8 {
-            format!("{}...{}", &full_id[..4], &full_id[full_id.len()-4..])
+            format!("{}...{}", &full_id[..4], &full_id[full_id.len() - 4..])
         } else {
             full_id.to_string()
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:438:
     #[test]
     fn test_string_utils() {
         assert_eq!(StringUtils::clean_text("  hello   world  "), "hello world");
-        assert_eq!(StringUtils::truncate("This is a long text", 10), "This is...");
+        assert_eq!(
+            StringUtils::truncate("This is a long text", 10),
+            "This is..."
+        );
         assert_eq!(StringUtils::truncate("Short", 10), "Short");
         assert_eq!(StringUtils::short_id("123456789012345678"), "1234...5678");
         assert_eq!(StringUtils::short_id("12345678"), "12345678");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/wasm.rs:13:
 pub fn ping() -> String {
     "ok".to_string()
 }
-
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:1:
 //! Export service - 数据导出服务
-//! 
+//!
 //! 基于 Maybe 的导出功能转换而来，支持多种导出格式和灵活的数据选择
 
-use std::collections::HashMap;
-use serde::{Serialize, Deserialize};
-use chrono::{DateTime, Utc, NaiveDate};
+use chrono::{DateTime, NaiveDate, Utc};
 use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use std::collections::HashMap;
 use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:12:
 use wasm_bindgen::prelude::*;
 
+use super::{PaginationParams, ServiceContext, ServiceResponse};
+use crate::domain::{Account, Category, Ledger, Transaction};
 use crate::error::{JiveError, Result};
-use crate::domain::{Account, Transaction, Category, Ledger};
-use super::{ServiceContext, ServiceResponse, PaginationParams};
 
 /// 导出格式
 #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:20:
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum ExportFormat {
-    CSV,            // CSV 格式
-    Excel,          // Excel 格式
-    JSON,           // JSON 格式
-    XML,            // XML 格式
-    PDF,            // PDF 格式
-    QIF,            // Quicken Interchange Format
-    OFX,            // Open Financial Exchange
-    Markdown,       // Markdown 格式
-    HTML,           // HTML 格式
+    CSV,      // CSV 格式
+    Excel,    // Excel 格式
+    JSON,     // JSON 格式
+    XML,      // XML 格式
+    PDF,      // PDF 格式
+    QIF,      // Quicken Interchange Format
+    OFX,      // Open Financial Exchange
+    Markdown, // Markdown 格式
+    HTML,     // HTML 格式
 }
 
 /// 导出范围
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:34:
 #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum ExportScope {
-    All,            // 所有数据
-    Ledger,         // 特定账本
-    Account,        // 特定账户
-    Category,       // 特定分类
-    DateRange,      // 日期范围
-    Custom,         // 自定义
+    All,       // 所有数据
+    Ledger,    // 特定账本
+    Account,   // 特定账户
+    Category,  // 特定分类
+    DateRange, // 日期范围
+    Custom,    // 自定义
 }
 
 /// 导出选项
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:109:
 #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum ExportStatus {
-    Pending,        // 待处理
-    Processing,     // 处理中
-    Generating,     // 生成中
-    Completed,      // 完成
-    Failed,         // 失败
-    Cancelled,      // 取消
+    Pending,    // 待处理
+    Processing, // 处理中
+    Generating, // 生成中
+    Completed,  // 完成
+    Failed,     // 失败
+    Cancelled,  // 取消
 }
 
 /// 导出模板
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:337:
         if cfg.include_header {
             out.push_str(&format!(
                 "Date{}Description{}Amount{}Category{}Account{}Payee{}Type\n",
-                cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter, cfg.delimiter
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter,
+                cfg.delimiter
             ));
         }
         for r in rows {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:344:
             let amount_str = r.amount.to_string().replace('.', &cfg.decimal_separator);
             out.push_str(&format!(
                 "{}{}{}{}{}{}{}{}{}{}{}{}{}\n",
-                r.date.format(&cfg.date_format), cfg.delimiter,
-                escape_csv_field(&sanitize_csv_cell(&r.description), cfg.delimiter), cfg.delimiter,
-                amount_str, cfg.delimiter,
-                escape_csv_field(r.category.as_deref().unwrap_or(""), cfg.delimiter), cfg.delimiter,
-                escape_csv_field(&r.account, cfg.delimiter), cfg.delimiter,
-                escape_csv_field(r.payee.as_deref().unwrap_or(""), cfg.delimiter), cfg.delimiter,
+                r.date.format(&cfg.date_format),
+                cfg.delimiter,
+                escape_csv_field(&sanitize_csv_cell(&r.description), cfg.delimiter),
+                cfg.delimiter,
+                amount_str,
+                cfg.delimiter,
+                escape_csv_field(r.category.as_deref().unwrap_or(""), cfg.delimiter),
+                cfg.delimiter,
+                escape_csv_field(&r.account, cfg.delimiter),
+                cfg.delimiter,
+                escape_csv_field(r.payee.as_deref().unwrap_or(""), cfg.delimiter),
+                cfg.delimiter,
                 escape_csv_field(&r.transaction_type, cfg.delimiter),
             ));
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:557:
         context: ServiceContext,
     ) -> Result<ExportResult> {
         // 获取任务
-        let mut task = self._get_export_status(task_id.clone(), context.clone()).await?;
-        
+        let mut task = self
+            ._get_export_status(task_id.clone(), context.clone())
+            .await?;
+
         // 更新状态为处理中
         task.status = ExportStatus::Processing;
-        
+
         // 收集数据
         let export_data = self.collect_export_data(&task.options, &context).await?;
-        
+
         // 计算总项数
-        task.total_items = export_data.transactions.len() as u32 
-            + export_data.accounts.len() as u32 
+        task.total_items = export_data.transactions.len() as u32
+            + export_data.accounts.len() as u32
             + export_data.categories.len() as u32;
-        
+
         // 根据格式导出
         let file_data = match task.options.format {
             ExportFormat::CSV => self.generate_csv(&export_data, &task.options)?,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:581:
                 });
             }
         };
-        
+
         // 保存文件
-        let file_name = format!("export_{}_{}.{}", 
-            context.user_id, 
+        let file_name = format!(
+            "export_{}_{}.{}",
+            context.user_id,
             Utc::now().timestamp(),
             self.get_file_extension(&task.options.format)
         );
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:591:
-        
+
         // 在实际实现中，这里会保存文件到存储服务
         let download_url = format!("/downloads/{}", file_name);
-        
+
         // 更新任务状态
         task.status = ExportStatus::Completed;
         task.exported_items = task.total_items;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:600:
         task.download_url = Some(download_url.clone());
         task.completed_at = Some(Utc::now());
         task.progress = 100;
-        
+
         // 创建导出结果
         let metadata = ExportMetadata {
             version: "1.0.0".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:614:
             tag_count: export_data.tags.len() as u32,
             date_range: None,
         };
-        
+
         Ok(ExportResult {
             task_id: task.id,
             status: task.status,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:657:
     }
 
     /// 取消导出的内部实现
-    async fn _cancel_export(
-        &self,
-        _task_id: String,
-        _context: ServiceContext,
-    ) -> Result<bool> {
+    async fn _cancel_export(&self, _task_id: String, _context: ServiceContext) -> Result<bool> {
         // 在实际实现中，取消正在进行的导出任务
         Ok(true)
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:673:
         context: ServiceContext,
     ) -> Result<Vec<ExportTask>> {
         // 在实际实现中，从数据库获取导出历史
-        let history = vec![
-            ExportTask {
-                id: Uuid::new_v4().to_string(),
-                user_id: context.user_id.clone(),
-                name: "Year 2024 Export".to_string(),
-                description: Some("Complete export for year 2024".to_string()),
-                options: ExportOptions::default(),
-                status: ExportStatus::Completed,
-                progress: 100,
-                total_items: 5000,
-                exported_items: 5000,
-                file_size: 2048000,
-                // 统一改为 JSON 示例文件名
-                file_path: Some("export_2024_full.json".to_string()),
-                download_url: Some("/downloads/export_2024_full.json".to_string()),
-                error_message: None,
-                started_at: Utc::now() - chrono::Duration::days(1),
-                completed_at: Some(Utc::now() - chrono::Duration::days(1) + chrono::Duration::minutes(10)),
-            },
-        ];
+        let history = vec![ExportTask {
+            id: Uuid::new_v4().to_string(),
+            user_id: context.user_id.clone(),
+            name: "Year 2024 Export".to_string(),
+            description: Some("Complete export for year 2024".to_string()),
+            options: ExportOptions::default(),
+            status: ExportStatus::Completed,
+            progress: 100,
+            total_items: 5000,
+            exported_items: 5000,
+            file_size: 2048000,
+            // 统一改为 JSON 示例文件名
+            file_path: Some("export_2024_full.json".to_string()),
+            download_url: Some("/downloads/export_2024_full.json".to_string()),
+            error_message: None,
+            started_at: Utc::now() - chrono::Duration::days(1),
+            completed_at: Some(
+                Utc::now() - chrono::Duration::days(1) + chrono::Duration::minutes(10),
+            ),
+        }];
 
         Ok(history.into_iter().take(limit as usize).collect())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:722:
     }
 
     /// 获取导出模板的内部实现
-    async fn _get_export_templates(
-        &self,
-        _context: ServiceContext,
-    ) -> Result<Vec<ExportTemplate>> {
+    async fn _get_export_templates(&self, _context: ServiceContext) -> Result<Vec<ExportTemplate>> {
         // 在实际实现中，从数据库获取模板
         Ok(Vec::new())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:759:
         context: ServiceContext,
     ) -> Result<String> {
         let export_data = self.collect_export_data(&options, &context).await?;
-        let json = serde_json::to_string_pretty(&export_data)
-            .map_err(|e| JiveError::SerializationError {
+        let json = serde_json::to_string_pretty(&export_data).map_err(|e| {
+            JiveError::SerializationError {
                 message: e.to_string(),
-            })?;
+            }
+        })?;
         Ok(json)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:840:
     /// 生成 CSV 数据
     fn generate_csv(&self, data: &ExportData, _options: &ExportOptions) -> Result<Vec<u8>> {
         let mut csv = String::new();
-        
+
         // 添加标题行
         csv.push_str("Date,Description,Amount,Category,Account\n");
-        
+
         // 添加交易数据
         for transaction in &data.transactions {
             csv.push_str(&format!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:855:
                 transaction.account_id
             ));
         }
-        
+
         Ok(csv.into_bytes())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:862:
     /// 生成带配置的 CSV 数据
-    fn generate_csv_with_config(&self, data: &ExportData, config: &CsvExportConfig) -> Result<Vec<u8>> {
+    fn generate_csv_with_config(
+        &self,
+        data: &ExportData,
+        config: &CsvExportConfig,
+    ) -> Result<Vec<u8>> {
         let mut csv = String::new();
-        
+
         // 添加标题行
         if config.include_header {
             csv.push_str(&format!(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:870:
                 config.delimiter, config.delimiter, config.delimiter, config.delimiter
             ));
         }
-        
+
         // 添加交易数据
         for transaction in &data.transactions {
-            let amount_str = transaction.amount.to_string()
+            let amount_str = transaction
+                .amount
+                .to_string()
                 .replace('.', &config.decimal_separator);
-            
+
             csv.push_str(&format!(
                 "{}{}{}{}{}{}{}{}{}\n",
                 transaction.date.format(&config.date_format),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:889:
                 transaction.account_id
             ));
         }
-        
+
         Ok(csv.into_bytes())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:896:
     /// 生成 JSON 数据
     fn generate_json(&self, data: &ExportData) -> Result<Vec<u8>> {
-        let json = serde_json::to_vec_pretty(data)
-            .map_err(|e| JiveError::SerializationError {
-                message: e.to_string(),
-            })?;
+        let json = serde_json::to_vec_pretty(data).map_err(|e| JiveError::SerializationError {
+            message: e.to_string(),
+        })?;
         Ok(json)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/export_service.rs:960:
         let context = ServiceContext::new("user-123".to_string());
         let options = ExportOptions::default();
 
-        let result = service._create_export_task(
-            "Test Export".to_string(),
-            options,
-            context
-        ).await;
+        let result = service
+            ._create_export_task("Test Export".to_string(), options, context)
+            .await;
 
         assert!(result.is_ok());
         let task = result.unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:9:
 
 use super::{PaginatedResult, PaginationParams, ServiceContext, ServiceResponse};
 use crate::domain::{
-    AttachTransactionsInput, CreateTravelEventInput, TravelBudget, TravelEvent,
-    TravelStatistics, TravelStatus, UpdateTravelEventInput, UpsertTravelBudgetInput,
+    AttachTransactionsInput, CreateTravelEventInput, TravelBudget, TravelEvent, TravelStatistics,
+    TravelStatus, UpdateTravelEventInput, UpsertTravelBudgetInput,
 };
 use crate::error::{JiveError, Result};
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:37:
         // Check if family already has an active travel
         let active_count: i64 = sqlx::query_scalar(
             "SELECT COUNT(*) FROM travel_events
-             WHERE family_id = $1 AND status = 'active'"
+             WHERE family_id = $1 AND status = 'active'",
         )
         .bind(self.context.family_id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:45:
 
         if active_count > 0 {
             return Err(JiveError::ValidationError(
-                "Family already has an active travel event".to_string()
+                "Family already has an active travel event".to_string(),
             ));
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:58:
                 total_budget, budget_currency_id, home_currency_id,
                 settings, created_by
             ) VALUES ($1, $2, 'planning', $3, $4, $5, $6, $7, $8, $9)
-            RETURNING *"
+            RETURNING *",
         )
         .bind(self.context.family_id)
         .bind(&input.trip_name)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:119:
                 settings = $7,
                 updated_at = NOW()
             WHERE id = $1
-            RETURNING *"
+            RETURNING *",
         )
         .bind(id)
         .bind(&event.trip_name)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:142:
     pub async fn get_travel_event(&self, id: Uuid) -> Result<ServiceResponse<TravelEvent>> {
         let event = sqlx::query_as::<_, TravelEvent>(
             "SELECT * FROM travel_events
-             WHERE id = $1 AND family_id = $2"
+             WHERE id = $1 AND family_id = $2",
         )
         .bind(id)
         .bind(self.context.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:163:
         status: Option<String>,
         pagination: PaginationParams,
     ) -> Result<ServiceResponse<PaginatedResult<TravelEvent>>> {
-        let mut query = String::from(
-            "SELECT * FROM travel_events WHERE family_id = $1"
-        );
-        let mut count_query = String::from(
-            "SELECT COUNT(*) FROM travel_events WHERE family_id = $1"
-        );
+        let mut query = String::from("SELECT * FROM travel_events WHERE family_id = $1");
+        let mut count_query =
+            String::from("SELECT COUNT(*) FROM travel_events WHERE family_id = $1");
 
         if let Some(status) = &status {
             query.push_str(" AND status = $2");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:176:
         }
 
         query.push_str(" ORDER BY created_at DESC");
-        query.push_str(&format!(" LIMIT {} OFFSET {}", pagination.page_size, pagination.offset()));
+        query.push_str(&format!(
+            " LIMIT {} OFFSET {}",
+            pagination.page_size,
+            pagination.offset()
+        ));
 
         // Get total count
         let total = if let Some(status) = &status {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:225:
             "SELECT * FROM travel_events
              WHERE family_id = $1 AND status = 'active'
              ORDER BY created_at DESC
-             LIMIT 1"
+             LIMIT 1",
         )
         .bind(self.context.family_id)
         .fetch_optional(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:244:
         let event = self.get_travel_event(id).await?.data;
         if !event.can_activate() {
             return Err(JiveError::ValidationError(
-                "Travel event cannot be activated from current status".to_string()
+                "Travel event cannot be activated from current status".to_string(),
             ));
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:252:
         sqlx::query(
             "UPDATE travel_events
              SET status = 'completed', updated_at = NOW()
-             WHERE family_id = $1 AND status = 'active' AND id != $2"
+             WHERE family_id = $1 AND status = 'active' AND id != $2",
         )
         .bind(self.context.family_id)
         .bind(id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:264:
             "UPDATE travel_events
              SET status = 'active', updated_at = NOW()
              WHERE id = $1
-             RETURNING *"
+             RETURNING *",
         )
         .bind(id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:285:
         let event = self.get_travel_event(id).await?.data;
         if !event.can_complete() {
             return Err(JiveError::ValidationError(
-                "Travel event cannot be completed from current status".to_string()
+                "Travel event cannot be completed from current status".to_string(),
             ));
         }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:293:
             "UPDATE travel_events
              SET status = 'completed', updated_at = NOW()
              WHERE id = $1
-             RETURNING *"
+             RETURNING *",
         )
         .bind(id)
         .fetch_one(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:312:
             "UPDATE travel_events
              SET status = 'cancelled', updated_at = NOW()
              WHERE id = $1 AND family_id = $2
-             RETURNING *"
+             RETURNING *",
         )
         .bind(id)
         .bind(self.context.family_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:344:
         // Or find transactions by filter
         else if let Some(filter) = input.filter {
             // Build query based on filter
-            let mut query = String::from(
-                "SELECT id FROM transactions WHERE family_id = $1"
-            );
+            let mut query = String::from("SELECT id FROM transactions WHERE family_id = $1");
 
             if let Some(start_date) = filter.start_date {
                 query.push_str(&format!(" AND date >= '{}'", start_date));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:371:
             let result = sqlx::query(
                 "INSERT INTO travel_transactions (travel_event_id, transaction_id, attached_by)
                  VALUES ($1, $2, $3)
-                 ON CONFLICT (travel_event_id, transaction_id) DO NOTHING"
+                 ON CONFLICT (travel_event_id, transaction_id) DO NOTHING",
             )
             .bind(travel_id)
             .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:403:
     ) -> Result<ServiceResponse<()>> {
         sqlx::query(
             "DELETE FROM travel_transactions
-             WHERE travel_event_id = $1 AND transaction_id = $2"
+             WHERE travel_event_id = $1 AND transaction_id = $2",
         )
         .bind(travel_id)
         .bind(transaction_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:446:
                 budget_currency_id = EXCLUDED.budget_currency_id,
                 alert_threshold = EXCLUDED.alert_threshold,
                 updated_at = NOW()
-            RETURNING *"
+            RETURNING *",
         )
         .bind(travel_id)
         .bind(input.category_id)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:453:
         .bind(input.budget_amount)
         .bind(input.budget_currency_id)
-        .bind(input.alert_threshold.unwrap_or(rust_decimal::Decimal::new(8, 1))) // 0.8
+        .bind(
+            input
+                .alert_threshold
+                .unwrap_or(rust_decimal::Decimal::new(8, 1)),
+        ) // 0.8
         .fetch_one(&self.pool)
         .await?;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:471:
         let budgets = sqlx::query_as::<_, TravelBudget>(
             "SELECT * FROM travel_budgets
              WHERE travel_event_id = $1
-             ORDER BY category_id"
+             ORDER BY category_id",
         )
         .bind(travel_id)
         .fetch_all(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:517:
         .await?;
 
         let total = event.total_spent;
-        let categories = category_spending.into_iter().map(|row| {
-            let amount = rust_decimal::Decimal::from_i64_retain(row.amount.unwrap_or(0)).unwrap_or_default();
-            let percentage = if total.is_zero() {
-                rust_decimal::Decimal::ZERO
-            } else {
-                (amount / total) * rust_decimal::Decimal::from(100)
-            };
+        let categories = category_spending
+            .into_iter()
+            .map(|row| {
+                let amount = rust_decimal::Decimal::from_i64_retain(row.amount.unwrap_or(0))
+                    .unwrap_or_default();
+                let percentage = if total.is_zero() {
+                    rust_decimal::Decimal::ZERO
+                } else {
+                    (amount / total) * rust_decimal::Decimal::from(100)
+                };
 
-            crate::domain::CategorySpending {
-                category_id: row.category_id,
-                category_name: row.category_name,
-                amount,
-                percentage,
-                transaction_count: row.transaction_count.unwrap_or(0) as i32,
-            }
-        }).collect();
+                crate::domain::CategorySpending {
+                    category_id: row.category_id,
+                    category_name: row.category_name,
+                    amount,
+                    percentage,
+                    transaction_count: row.transaction_count.unwrap_or(0) as i32,
+                }
+            })
+            .collect();
 
         let daily_average = if event.duration_days() > 0 {
             event.total_spent / rust_decimal::Decimal::from(event.duration_days())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:577:
                 sqlx::query(
                     "UPDATE travel_budgets
                      SET alert_sent = true, alert_sent_at = NOW()
-                     WHERE id = $1"
+                     WHERE id = $1",
                 )
                 .bind(budget.id)
                 .execute(&self.pool)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/application/travel_service.rs:607:
         assert_eq!(1 + 1, 2);
     }
 }
+
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:1:
 //! Category domain model
 
 use chrono::{DateTime, Utc};
-use serde::{Serialize, Deserialize};
+use serde::{Deserialize, Serialize};
 
 #[cfg(feature = "wasm")]
 use wasm_bindgen::prelude::*;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:8:
 
+use super::{AccountClassification, Entity, SoftDeletable};
 use crate::error::{JiveError, Result};
-use super::{Entity, SoftDeletable, AccountClassification};
 
 /// 分类实体
 #[derive(Debug, Clone, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:23:
     icon: Option<String>,
     is_active: bool,
     is_system: bool, // 系统预置分类
-    position: u32, // 排序位置
+    position: u32,   // 排序位置
     // 统计信息
     transaction_count: u32,
     // 审计字段
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:365:
                     color.to_string(),
                     icon.map(|s| s.to_string()),
                     *position,
-                ).unwrap()
+                )
+                .unwrap()
             })
             .collect()
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:394:
                     color.to_string(),
                     icon.map(|s| s.to_string()),
                     *position,
-                ).unwrap()
+                )
+                .unwrap()
             })
             .collect()
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:417:
 }
 
 impl SoftDeletable for Category {
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 /// 分类构建器
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:505:
             message: "Category name is required".to_string(),
         })?;
 
-        let classification = self.classification.ok_or_else(|| JiveError::ValidationError {
-            message: "Classification is required".to_string(),
-        })?;
+        let classification = self
+            .classification
+            .ok_or_else(|| JiveError::ValidationError {
+                message: "Classification is required".to_string(),
+            })?;
 
         let color = self.color.unwrap_or_else(|| "#6B7280".to_string());
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:514:
         let mut category = Category::new(ledger_id, name, classification, color)?;
-        
+
         category.parent_id = self.parent_id;
         if let Some(description) = self.description {
             category.set_description(Some(description))?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:538:
             "Dining".to_string(),
             AccountClassification::Expense,
             "#EF4444".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(category.name(), "Dining");
-        assert!(matches!(category.classification(), AccountClassification::Expense));
+        assert!(matches!(
+            category.classification(),
+            AccountClassification::Expense
+        ));
         assert_eq!(category.color(), "#EF4444");
         assert!(!category.is_system());
         assert!(category.is_active());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:555:
             "Transportation".to_string(),
             AccountClassification::Expense,
             "#F97316".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         let mut child = Category::new(
             "ledger-123".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:562:
             "Gas".to_string(),
             AccountClassification::Expense,
             "#FB923C".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         child.set_parent_id(Some(parent.id()));
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:586:
 
         assert_eq!(category.name(), "Shopping");
         assert_eq!(category.icon(), Some("🛍️".to_string()));
-        assert_eq!(category.description(), Some("Shopping expenses".to_string()));
+        assert_eq!(
+            category.description(),
+            Some("Shopping expenses".to_string())
+        );
         assert_eq!(category.position(), 3);
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:593:
     #[test]
     fn test_system_categories() {
         let ledger_id = "ledger-123".to_string();
-        
+
         let income_categories = Category::default_income_categories(ledger_id.clone());
         let expense_categories = Category::default_expense_categories(ledger_id);
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:618:
             "Test Category".to_string(),
             AccountClassification::Expense,
             "#6B7280".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(category.transaction_count(), 0);
         assert!(category.can_be_deleted());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:640:
             "".to_string(),
             AccountClassification::Expense,
             "#EF4444".to_string(),
-        ).is_err());
+        )
+        .is_err());
 
         // 测试无效颜色
         assert!(Category::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/category.rs:648:
             "Valid Name".to_string(),
             AccountClassification::Expense,
             "invalid-color".to_string(),
-        ).is_err());
+        )
+        .is_err());
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:1:
 //! Family domain model - 多用户协作核心模型
-//! 
+//!
 //! 基于 Maybe 的 Family 模型设计，支持多用户共享财务数据
 
 use chrono::{DateTime, Utc};
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:6:
-use serde::{Serialize, Deserialize};
-use uuid::Uuid;
 use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
 use wasm_bindgen::prelude::*;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:12:
 
-use crate::error::{JiveError, Result};
 use super::{Entity, SoftDeletable};
+use crate::error::{JiveError, Result};
 
 /// Family - 多用户协作的核心实体
 /// 对应 Maybe 的 Family 模型
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:37:
     pub smart_defaults_enabled: bool,
     pub auto_detect_merchants: bool,
     pub use_last_selected_category: bool,
-    
+
     // 审批设置
     pub require_approval_for_large_transactions: bool,
     pub large_transaction_threshold: Option<Decimal>,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:44:
-    
+
     // 共享设置
     pub shared_categories: bool,
     pub shared_tags: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:48:
     pub shared_payees: bool,
     pub shared_budgets: bool,
-    
+
     // 通知设置
     pub notification_preferences: NotificationPreferences,
-    
+
     // 货币设置
     pub multi_currency_enabled: bool,
     pub auto_update_exchange_rates: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:57:
-    
+
     // 隐私设置
     pub show_member_transactions: bool,
     pub allow_member_exports: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:128:
 #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub enum FamilyRole {
-    Owner,    // 创建者，拥有所有权限（类似 Maybe 的第一个用户）
-    Admin,    // 管理员，可以管理成员和设置（对应 Maybe 的 admin role）
-    Member,   // 普通成员，可以查看和编辑数据（对应 Maybe 的 member role）
-    Viewer,   // 只读成员，只能查看数据（扩展功能）
+    Owner,  // 创建者，拥有所有权限（类似 Maybe 的第一个用户）
+    Admin,  // 管理员，可以管理成员和设置（对应 Maybe 的 admin role）
+    Member, // 普通成员，可以查看和编辑数据（对应 Maybe 的 member role）
+    Viewer, // 只读成员，只能查看数据（扩展功能）
 }
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:167:
     CreateAccounts,
     EditAccounts,
     DeleteAccounts,
-    ConnectBankAccounts,  // 对应 Maybe 的 Plaid 连接
-    
+    ConnectBankAccounts, // 对应 Maybe 的 Plaid 连接
+
     // 交易权限
     ViewTransactions,
     CreateTransactions,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:177:
     BulkEditTransactions,
     ImportTransactions,
     ExportTransactions,
-    
+
     // 分类权限
     ViewCategories,
     ManageCategories,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:184:
-    
+
     // 商户/收款人权限
     ViewPayees,
     ManagePayees,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:188:
-    
+
     // 标签权限
     ViewTags,
     ManageTags,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:192:
-    
+
     // 预算权限
     ViewBudgets,
     CreateBudgets,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:196:
     EditBudgets,
     DeleteBudgets,
-    
+
     // 报表权限
     ViewReports,
     ExportReports,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:202:
-    
+
     // 规则权限
     ViewRules,
     ManageRules,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:206:
-    
+
     // 管理权限
     InviteMembers,
     RemoveMembers,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:211:
     ManageFamilySettings,
     ManageLedgers,
     ManageIntegrations,
-    
+
     // 高级权限
     ViewAuditLog,
     ManageSubscription,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:218:
-    ImpersonateMembers,  // 对应 Maybe 的 impersonation
+    ImpersonateMembers, // 对应 Maybe 的 impersonation
 }
 
 impl FamilyRole {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:226:
             FamilyRole::Owner => {
                 // Owner 拥有所有权限
                 vec![
-                    ViewAccounts, CreateAccounts, EditAccounts, DeleteAccounts, ConnectBankAccounts,
-                    ViewTransactions, CreateTransactions, EditTransactions, DeleteTransactions,
-                    BulkEditTransactions, ImportTransactions, ExportTransactions,
-                    ViewCategories, ManageCategories,
-                    ViewPayees, ManagePayees,
-                    ViewTags, ManageTags,
-                    ViewBudgets, CreateBudgets, EditBudgets, DeleteBudgets,
-                    ViewReports, ExportReports,
-                    ViewRules, ManageRules,
-                    InviteMembers, RemoveMembers, ManageRoles, ManageFamilySettings,
-                    ManageLedgers, ManageIntegrations,
-                    ViewAuditLog, ManageSubscription, ImpersonateMembers,
+                    ViewAccounts,
+                    CreateAccounts,
+                    EditAccounts,
+                    DeleteAccounts,
+                    ConnectBankAccounts,
+                    ViewTransactions,
+                    CreateTransactions,
+                    EditTransactions,
+                    DeleteTransactions,
+                    BulkEditTransactions,
+                    ImportTransactions,
+                    ExportTransactions,
+                    ViewCategories,
+                    ManageCategories,
+                    ViewPayees,
+                    ManagePayees,
+                    ViewTags,
+                    ManageTags,
+                    ViewBudgets,
+                    CreateBudgets,
+                    EditBudgets,
+                    DeleteBudgets,
+                    ViewReports,
+                    ExportReports,
+                    ViewRules,
+                    ManageRules,
+                    InviteMembers,
+                    RemoveMembers,
+                    ManageRoles,
+                    ManageFamilySettings,
+                    ManageLedgers,
+                    ManageIntegrations,
+                    ViewAuditLog,
+                    ManageSubscription,
+                    ImpersonateMembers,
                 ]
             }
             FamilyRole::Admin => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:244:
                 // Admin 拥有管理权限，但不能管理订阅和模拟用户
                 vec![
-                    ViewAccounts, CreateAccounts, EditAccounts, DeleteAccounts, ConnectBankAccounts,
-                    ViewTransactions, CreateTransactions, EditTransactions, DeleteTransactions,
-                    BulkEditTransactions, ImportTransactions, ExportTransactions,
-                    ViewCategories, ManageCategories,
-                    ViewPayees, ManagePayees,
-                    ViewTags, ManageTags,
-                    ViewBudgets, CreateBudgets, EditBudgets, DeleteBudgets,
-                    ViewReports, ExportReports,
-                    ViewRules, ManageRules,
-                    InviteMembers, RemoveMembers, ManageFamilySettings, ManageLedgers,
-                    ManageIntegrations, ViewAuditLog,
+                    ViewAccounts,
+                    CreateAccounts,
+                    EditAccounts,
+                    DeleteAccounts,
+                    ConnectBankAccounts,
+                    ViewTransactions,
+                    CreateTransactions,
+                    EditTransactions,
+                    DeleteTransactions,
+                    BulkEditTransactions,
+                    ImportTransactions,
+                    ExportTransactions,
+                    ViewCategories,
+                    ManageCategories,
+                    ViewPayees,
+                    ManagePayees,
+                    ViewTags,
+                    ManageTags,
+                    ViewBudgets,
+                    CreateBudgets,
+                    EditBudgets,
+                    DeleteBudgets,
+                    ViewReports,
+                    ExportReports,
+                    ViewRules,
+                    ManageRules,
+                    InviteMembers,
+                    RemoveMembers,
+                    ManageFamilySettings,
+                    ManageLedgers,
+                    ManageIntegrations,
+                    ViewAuditLog,
                 ]
             }
             FamilyRole::Member => {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:260:
                 // Member 可以查看和编辑数据，但不能管理
                 vec![
-                    ViewAccounts, CreateAccounts, EditAccounts,
-                    ViewTransactions, CreateTransactions, EditTransactions,
-                    ImportTransactions, ExportTransactions,
+                    ViewAccounts,
+                    CreateAccounts,
+                    EditAccounts,
+                    ViewTransactions,
+                    CreateTransactions,
+                    EditTransactions,
+                    ImportTransactions,
+                    ExportTransactions,
                     ViewCategories,
                     ViewPayees,
                     ViewTags,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:268:
                     ViewBudgets,
-                    ViewReports, ExportReports,
+                    ViewReports,
+                    ExportReports,
                     ViewRules,
                 ]
             }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:298:
 
     /// 检查是否可以导出数据
     pub fn can_export(&self) -> bool {
-        matches!(self, FamilyRole::Owner | FamilyRole::Admin | FamilyRole::Member)
+        matches!(
+            self,
+            FamilyRole::Owner | FamilyRole::Admin | FamilyRole::Member
+        )
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:363:
     /// 接受邀请
     pub fn accept(&mut self) -> Result<()> {
         if !self.is_valid() {
-            return Err(JiveError::ValidationError { message: "Invalid or expired invitation".into() });
+            return Err(JiveError::ValidationError {
+                message: "Invalid or expired invitation".into(),
+            });
         }
-        
+
         self.status = InvitationStatus::Accepted;
         self.accepted_at = Some(Utc::now());
         Ok(())
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:400:
     MemberJoined,
     MemberRemoved,
     MemberRoleChanged,
-    
+
     // 数据操作
     DataCreated,
     DataUpdated,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:407:
     DataDeleted,
     DataImported,
     DataExported,
-    
+
     // 设置变更
     SettingsUpdated,
     PermissionsChanged,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:414:
-    
+
     // 安全事件
     LoginAttempt,
     LoginSuccess,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:419:
     PasswordChanged,
     MfaEnabled,
     MfaDisabled,
-    
+
     // 集成操作
     IntegrationConnected,
     IntegrationDisconnected,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:464:
 impl Entity for Family {
     type Id = String;
 
-    fn id(&self) -> &Self::Id { &self.id }
-    fn created_at(&self) -> DateTime<Utc> { self.created_at }
-    fn updated_at(&self) -> DateTime<Utc> { self.updated_at }
+    fn id(&self) -> &Self::Id {
+        &self.id
+    }
+    fn created_at(&self) -> DateTime<Utc> {
+        self.created_at
+    }
+    fn updated_at(&self) -> DateTime<Utc> {
+        self.updated_at
+    }
 }
 
 impl SoftDeletable for Family {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:473:
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 #[cfg(test)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:534:
         );
 
         assert!(family.is_feature_enabled("auto_categorize"));
-        
+
         let mut settings = family.settings.clone();
         settings.auto_categorize_enabled = false;
         family.update_settings(settings);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/family.rs:541:
-        
+
         assert!(!family.is_feature_enabled("auto_categorize"));
     }
 }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:1:
 //! Ledger domain model
 
 use chrono::{DateTime, Utc};
-use serde::{Serialize, Deserialize};
+use serde::{Deserialize, Serialize};
 use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:8:
 use wasm_bindgen::prelude::*;
 
-use crate::error::{JiveError, Result};
 use super::{Entity, SoftDeletable};
+use crate::error::{JiveError, Result};
 
 /// 账本类型枚举
 #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:156:
     name: String,
     description: Option<String>,
     ledger_type: LedgerType,
-    color: String, // 十六进制颜色代码
+    color: String,        // 十六进制颜色代码
     icon: Option<String>, // 图标名称或表情符号
     is_default: bool,
     is_active: bool,
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:172:
     // 权限相关
     is_shared: bool,
     shared_with_users: Vec<String>, // 共享用户ID列表
-    permission_level: String, // "read", "write", "admin"
+    permission_level: String,       // "read", "write", "admin"
 }
 
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:457:
         if self.user_id == user_id {
             return true;
         }
-        self.shared_with_users.contains(&user_id) && 
-        (self.permission_level == "write" || self.permission_level == "admin")
+        self.shared_with_users.contains(&user_id)
+            && (self.permission_level == "write" || self.permission_level == "admin")
     }
 
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:530:
     }
 
     /// 创建账本的 builder 模式
-    pub fn builder() -> LedgerBuilder { LedgerBuilder::new() }
+    pub fn builder() -> LedgerBuilder {
+        LedgerBuilder::new()
+    }
 
     /// 复制账本（新ID）
     pub fn duplicate(&self, new_name: String) -> Result<Self> {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:566:
 }
 
 impl SoftDeletable for Ledger {
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 /// 账本构建器
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:647:
             message: "Ledger name is required".to_string(),
         })?;
 
-        let ledger_type = self.ledger_type.clone().ok_or_else(|| JiveError::ValidationError {
-            message: "Ledger type is required".to_string(),
-        })?;
+        let ledger_type = self
+            .ledger_type
+            .clone()
+            .ok_or_else(|| JiveError::ValidationError {
+                message: "Ledger type is required".to_string(),
+            })?;
 
         let color = self.color.clone().unwrap_or_else(|| "#3B82F6".to_string());
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:663:
         ledger.description = self.description.clone();
         ledger.icon = self.icon.clone();
         ledger.is_default = self.is_default;
-        
+
         if let Some(description) = self.description.clone() {
             ledger.set_description(Some(description))?;
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:693:
             "My Personal Ledger".to_string(),
             LedgerType::Personal,
             "#3B82F6".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(ledger.name(), "My Personal Ledger");
         assert!(matches!(ledger.ledger_type(), LedgerType::Personal));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:725:
             "Shared Ledger".to_string(),
             LedgerType::Family,
             "#FF6B6B".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert!(!ledger.is_shared());
-        
-        ledger.share_with_user("user-456".to_string(), "write".to_string()).unwrap();
+
+        ledger
+            .share_with_user("user-456".to_string(), "write".to_string())
+            .unwrap();
         assert!(ledger.is_shared());
         assert!(ledger.can_user_access("user-456".to_string()));
         assert!(ledger.can_user_write("user-456".to_string()));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:754:
 
         assert_eq!(ledger.name(), "Project Alpha");
         assert!(matches!(ledger.ledger_type(), LedgerType::Project));
-        assert_eq!(ledger.description(), Some("Project tracking ledger".to_string()));
+        assert_eq!(
+            ledger.description(),
+            Some("Project tracking ledger".to_string())
+        );
         assert_eq!(ledger.icon(), Some("📊".to_string()));
         assert!(ledger.is_default());
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:766:
             "Test Ledger".to_string(),
             LedgerType::Personal,
             "#3B82F6".to_string(),
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(ledger.transaction_count(), 0);
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:788:
             "".to_string(),
             LedgerType::Personal,
             "#3B82F6".to_string(),
-        ).is_err());
+        )
+        .is_err());
 
         // 测试无效颜色
         assert!(Ledger::new(
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/ledger.rs:796:
             "Valid Name".to_string(),
             LedgerType::Personal,
             "invalid-color".to_string(),
-        ).is_err());
+        )
+        .is_err());
     }
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/mod.rs:3:
 //! 包含所有业务实体和领域模型
 
 pub mod account;
-pub mod transaction;
-pub mod ledger;
+pub mod base;
 pub mod category;
 pub mod category_template;
-pub mod user;
 pub mod family;
-pub mod base;
+pub mod ledger;
+pub mod transaction;
 pub mod travel;
+pub mod user;
 
 pub use account::*;
-pub use transaction::*;
-pub use ledger::*;
+pub use base::*;
 pub use category::*;
 pub use category_template::*;
-pub use user::*;
 pub use family::*;
-pub use base::*;
+pub use ledger::*;
+pub use transaction::*;
 pub use travel::*;
+pub use user::*;
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:1:
 //! Transaction domain model
 
-use chrono::{DateTime, Utc, NaiveDate};
+use chrono::{DateTime, NaiveDate, Utc};
 use rust_decimal::Decimal;
-use serde::{Serialize, Deserialize};
+use serde::{Deserialize, Serialize};
 use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:9:
 use wasm_bindgen::prelude::*;
 
+use super::{Entity, SoftDeletable, TransactionStatus, TransactionType};
 use crate::error::{JiveError, Result};
-use super::{Entity, SoftDeletable, TransactionType, TransactionStatus};
 
 /// 交易实体
 #[derive(Debug, Clone, Serialize, Deserialize)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:61:
     ) -> Result<Transaction> {
         let parsed_date = NaiveDate::parse_from_str(&date, "%Y-%m-%d")
             .map_err(|_| JiveError::InvalidDate { date })?;
-        
+
         // 验证金额
         crate::utils::Validator::validate_transaction_amount(&amount)?;
         crate::error::validate_currency(&currency)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:68:
-        
+
         // 验证名称
         if name.trim().is_empty() {
             return Err(JiveError::ValidationError {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:295:
                 message: "Tag cannot be empty".to_string(),
             });
         }
-        
+
         if !self.tags.contains(&cleaned_tag) {
             self.tags.push(cleaned_tag);
             self.updated_at = Utc::now();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:355:
     }
 
     #[wasm_bindgen]
-    pub fn set_multi_currency(&mut self, original_amount: String, original_currency: String, exchange_rate: String) -> Result<()> {
+    pub fn set_multi_currency(
+        &mut self,
+        original_amount: String,
+        original_currency: String,
+        exchange_rate: String,
+    ) -> Result<()> {
         crate::error::validate_currency(&original_currency)?;
         crate::utils::Validator::validate_transaction_amount(&original_amount)?;
         crate::utils::Validator::validate_transaction_amount(&exchange_rate)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:362:
-        
+
         self.original_amount = Some(original_amount);
         self.original_currency = Some(original_currency);
         self.exchange_rate = Some(exchange_rate);
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:467:
     pub fn search_keywords(&self) -> Vec<String> {
         let mut keywords = Vec::new();
         keywords.push(self.name.to_lowercase());
-        
+
         if let Some(desc) = &self.description {
             keywords.push(desc.to_lowercase());
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:474:
-        
+
         if let Some(notes) = &self.notes {
             keywords.push(notes.to_lowercase());
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:478:
-        
+
         keywords.extend(self.tags.iter().map(|tag| tag.to_lowercase()));
         keywords
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:498:
 }
 
 impl SoftDeletable for Transaction {
-    fn is_deleted(&self) -> bool { self.deleted_at.is_some() }
-    fn deleted_at(&self) -> Option<DateTime<Utc>> { self.deleted_at }
-    fn soft_delete(&mut self) { self.deleted_at = Some(Utc::now()); }
-    fn restore(&mut self) { self.deleted_at = None; }
+    fn is_deleted(&self) -> bool {
+        self.deleted_at.is_some()
+    }
+    fn deleted_at(&self) -> Option<DateTime<Utc>> {
+        self.deleted_at
+    }
+    fn soft_delete(&mut self) {
+        self.deleted_at = Some(Utc::now());
+    }
+    fn restore(&mut self) {
+        self.deleted_at = None;
+    }
 }
 
 /// 交易构建器
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:649:
             message: "Date is required".to_string(),
         })?;
 
-        let transaction_type = self.transaction_type.ok_or_else(|| JiveError::ValidationError {
-            message: "Transaction type is required".to_string(),
-        })?;
+        let transaction_type = self
+            .transaction_type
+            .ok_or_else(|| JiveError::ValidationError {
+                message: "Transaction type is required".to_string(),
+            })?;
 
         // 验证输入
         crate::utils::Validator::validate_transaction_amount(&amount)?;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:710:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(transaction.name(), "Test Transaction");
         assert_eq!(transaction.amount(), "100.50");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:729:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         transaction.add_tag("food".to_string()).unwrap();
         transaction.add_tag("restaurant".to_string()).unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:736:
-        
+
         assert!(transaction.has_tag("food".to_string()));
         assert!(transaction.has_tag("restaurant".to_string()));
         assert!(!transaction.has_tag("travel".to_string()));
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:774:
             "CNY".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
-        transaction.set_multi_currency(
-            "100.00".to_string(),
-            "USD".to_string(),
-            "7.20".to_string(),
-        ).unwrap();
+        transaction
+            .set_multi_currency("100.00".to_string(), "USD".to_string(), "7.20".to_string())
+            .unwrap();
 
         assert!(transaction.is_multi_currency());
-        
+
         transaction.clear_multi_currency();
         assert!(!transaction.is_multi_currency());
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:798:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Income,
-        ).unwrap();
+        )
+        .unwrap();
 
         let expense = Transaction::new(
             "account-123".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:808:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(income.signed_amount(), "1000.00");
         assert_eq!(expense.signed_amount(), "-500.00");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/transaction.rs:824:
             "USD".to_string(),
             "2023-12-25".to_string(),
             TransactionType::Expense,
-        ).unwrap();
+        )
+        .unwrap();
 
         assert_eq!(transaction.month_key(), "2023-12");
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/travel.rs:175:
         }
 
         if let Some(usage_percent) = self.budget_usage_percent() {
-            let threshold = Decimal::from_f32_retain(settings.reminder_settings.alert_threshold * 100.0)
-                .unwrap_or(Decimal::from(80));
+            let threshold =
+                Decimal::from_f32_retain(settings.reminder_settings.alert_threshold * 100.0)
+                    .unwrap_or(Decimal::from(80));
             usage_percent >= threshold
         } else {
             false
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/domain/travel.rs:412:
         assert!(event.should_alert());
     }
 }
+
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:3:
 
 use sqlx::{postgres::PgPoolOptions, PgPool};
 use std::time::Duration;
-use tracing::{info, error};
+use tracing::{error, info};
 
 /// 数据库配置
 #[derive(Debug, Clone)]
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:39:
     /// 创建新的数据库连接池
     pub async fn new(config: DatabaseConfig) -> Result<Self, sqlx::Error> {
         info!("Initializing database connection pool...");
-        
+
         let pool = PgPoolOptions::new()
             .max_connections(config.max_connections)
             .min_connections(config.min_connections)
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:48:
             .max_lifetime(Some(config.max_lifetime))
             .connect(&config.url)
             .await?;
-        
+
         info!("Database connection pool initialized successfully");
         Ok(Self { pool })
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:60:
 
     /// 健康检查
     pub async fn health_check(&self) -> Result<(), sqlx::Error> {
-        sqlx::query("SELECT 1")
-            .fetch_one(&self.pool)
-            .await?;
+        sqlx::query("SELECT 1").fetch_one(&self.pool).await?;
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:72:
         #[cfg(feature = "embed_migrations")]
         {
             info!("Running database migrations (embedded)...");
-            sqlx::migrate!("../../migrations")
-                .run(&self.pool)
-                .await?;
+            sqlx::migrate!("../../migrations").run(&self.pool).await?;
             info!("Database migrations completed");
         }
         // 默认情况下不执行嵌入式迁移，以避免构建期需要本地 migrations 目录
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:82:
     }
 
     /// 开始事务
-    pub async fn begin_transaction(&self) -> Result<sqlx::Transaction<'_, sqlx::Postgres>, sqlx::Error> {
+    pub async fn begin_transaction(
+        &self,
+    ) -> Result<sqlx::Transaction<'_, sqlx::Postgres>, sqlx::Error> {
         self.pool.begin().await
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:111:
     pub async fn start_monitoring(self) {
         tokio::spawn(async move {
             let mut interval = tokio::time::interval(self.check_interval);
-            
+
             loop {
                 interval.tick().await;
-                
+
                 match self.database.health_check().await {
                     Ok(_) => {
                         info!("Database health check passed");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:138:
         let config = DatabaseConfig::default();
         let db = Database::new(config).await;
         assert!(db.is_ok());
-        
+
         if let Ok(database) = db {
             let health_check = database.health_check().await;
             assert!(health_check.is_ok());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/database/connection.rs:149:
     async fn test_transaction() {
         let config = DatabaseConfig::default();
         let db = Database::new(config).await.unwrap();
-        
+
         let tx = db.begin_transaction().await;
         assert!(tx.is_ok());
-        
+
         if let Ok(mut transaction) = tx {
             // 测试事务操作
-            let result = sqlx::query("SELECT 1")
-                .fetch_one(&mut *transaction)
-                .await;
+            let result = sqlx::query("SELECT 1").fetch_one(&mut *transaction).await;
             assert!(result.is_ok());
-            
+
             transaction.rollback().await.unwrap();
         }
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:2:
 // Based on Maybe's database structure
 
 #[cfg(feature = "db")]
-pub mod family;
-#[cfg(feature = "db")]
-pub mod user;
-#[cfg(feature = "db")]
 pub mod account;
-#[cfg(feature = "db")]
-pub mod transaction;
-pub mod budget;
 pub mod balance;
+pub mod budget;
+#[cfg(feature = "db")]
+pub mod family;
 pub mod import;
 pub mod rule;
+#[cfg(feature = "db")]
+pub mod transaction;
+#[cfg(feature = "db")]
+pub mod user;
 
 use chrono::{DateTime, NaiveDate, Utc};
 use rust_decimal::Decimal;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:23:
 // Common trait for all entities
 pub trait Entity {
     type Id;
-    
+
     fn id(&self) -> Self::Id;
     fn created_at(&self) -> DateTime<Utc>;
     fn updated_at(&self) -> DateTime<Utc>;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:32:
 // For polymorphic associations (Rails delegated_type pattern)
 pub trait Accountable: Send + Sync {
     const TYPE_NAME: &'static str;
-    
+
     async fn save(&self, tx: &mut sqlx::PgConnection) -> Result<Uuid, sqlx::Error>;
     async fn load(id: Uuid, conn: &sqlx::PgPool) -> Result<Self, sqlx::Error>
     where
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:42:
 // For transaction entries (Rails single table inheritance pattern)
 pub trait Entryable: Send + Sync {
     const TYPE_NAME: &'static str;
-    
+
     fn to_entry(&self) -> Entry;
     fn from_entry(entry: Entry) -> Result<Self, String>
     where
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:144:
     pub fn new(start: NaiveDate, end: NaiveDate) -> Self {
         Self { start, end }
     }
-    
+
     pub fn current_month() -> Self {
         let now = chrono::Local::now().naive_local().date();
         let start = NaiveDate::from_ymd_opt(now.year(), now.month(), 1).unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:151:
         let end = if now.month() == 12 {
             NaiveDate::from_ymd_opt(now.year() + 1, 1, 1).unwrap() - chrono::Duration::days(1)
         } else {
-            NaiveDate::from_ymd_opt(now.year(), now.month() + 1, 1).unwrap() - chrono::Duration::days(1)
+            NaiveDate::from_ymd_opt(now.year(), now.month() + 1, 1).unwrap()
+                - chrono::Duration::days(1)
         };
         Self { start, end }
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/infrastructure/entities/mod.rs:158:
-    
+
     pub fn current_year() -> Self {
         let now = chrono::Local::now().naive_local().date();
         let start = NaiveDate::from_ymd_opt(now.year(), 1, 1).unwrap();
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:1:
 //! Utility functions for Jive Core
 
-use chrono::{DateTime, Utc, NaiveDate, Datelike};
-use uuid::Uuid;
-use rust_decimal::Decimal;
-use serde::{Serialize, Deserialize};
 use crate::error::{JiveError, Result};
+use chrono::{DateTime, Datelike, NaiveDate, Utc};
+use rust_decimal::Decimal;
+use serde::{Deserialize, Serialize};
+use uuid::Uuid;
 
 #[cfg(feature = "wasm")]
 use wasm_bindgen::prelude::*;
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:58:
 /// 计算两个金额的加法
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub fn add_amounts(amount1: &str, amount2: &str) -> Result<String> {
-    let a1 = amount1.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount1.to_string() })?;
-    let a2 = amount2.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount2.to_string() })?;
-    
+    let a1 = amount1
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount1.to_string(),
+        })?;
+    let a2 = amount2
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount2.to_string(),
+        })?;
+
     Ok((a1 + a2).to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:69:
 /// 计算两个金额的减法
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub fn subtract_amounts(amount1: &str, amount2: &str) -> Result<String> {
-    let a1 = amount1.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount1.to_string() })?;
-    let a2 = amount2.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount2.to_string() })?;
-    
+    let a1 = amount1
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount1.to_string(),
+        })?;
+    let a2 = amount2
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount2.to_string(),
+        })?;
+
     Ok((a1 - a2).to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:80:
 /// 计算两个金额的乘法
 #[cfg_attr(feature = "wasm", wasm_bindgen)]
 pub fn multiply_amounts(amount: &str, multiplier: &str) -> Result<String> {
-    let a = amount.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: amount.to_string() })?;
-    let m = multiplier.parse::<Decimal>()
-        .map_err(|_| JiveError::InvalidAmount { amount: multiplier.to_string() })?;
-    
+    let a = amount
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: amount.to_string(),
+        })?;
+    let m = multiplier
+        .parse::<Decimal>()
+        .map_err(|_| JiveError::InvalidAmount {
+            amount: multiplier.to_string(),
+        })?;
+
     Ok((a * m).to_string())
 }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:107:
         if from_currency == to_currency {
             return Ok(amount.to_string());
         }
-        
-        let decimal_amount = amount.parse::<Decimal>()
-            .map_err(|_| JiveError::InvalidAmount { amount: amount.to_string() })?;
-        
+
+        let decimal_amount = amount
+            .parse::<Decimal>()
+            .map_err(|_| JiveError::InvalidAmount {
+                amount: amount.to_string(),
+            })?;
+
         let rate = self.get_exchange_rate(from_currency, to_currency)?;
         let converted = decimal_amount * rate;
-        
+
         Ok(converted.to_string())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:120:
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn get_supported_currencies(&self) -> Vec<String> {
         vec![
-            "USD".to_string(), "EUR".to_string(), "GBP".to_string(),
-            "JPY".to_string(), "CNY".to_string(), "CAD".to_string(),
-            "AUD".to_string(), "CHF".to_string(), "SEK".to_string(),
-            "NOK".to_string(), "DKK".to_string(), "KRW".to_string(),
-            "SGD".to_string(), "HKD".to_string(), "INR".to_string(),
-            "BRL".to_string(), "MXN".to_string(), "RUB".to_string(),
-            "ZAR".to_string(), "TRY".to_string(),
+            "USD".to_string(),
+            "EUR".to_string(),
+            "GBP".to_string(),
+            "JPY".to_string(),
+            "CNY".to_string(),
+            "CAD".to_string(),
+            "AUD".to_string(),
+            "CHF".to_string(),
+            "SEK".to_string(),
+            "NOK".to_string(),
+            "DKK".to_string(),
+            "KRW".to_string(),
+            "SGD".to_string(),
+            "HKD".to_string(),
+            "INR".to_string(),
+            "BRL".to_string(),
+            "MXN".to_string(),
+            "RUB".to_string(),
+            "ZAR".to_string(),
+            "TRY".to_string(),
         ]
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:133:
     fn get_exchange_rate(&self, from: &str, to: &str) -> Result<Decimal> {
         // 简化的汇率表，实际应该从外部 API 获取
         let rates = [
-            ("USD", "CNY", Decimal::new(720, 2)), // 7.20
-            ("EUR", "CNY", Decimal::new(780, 2)), // 7.80
-            ("GBP", "CNY", Decimal::new(890, 2)), // 8.90
-            ("USD", "EUR", Decimal::new(92, 2)),  // 0.92
-            ("USD", "GBP", Decimal::new(80, 2)),  // 0.80
-            ("USD", "JPY", Decimal::new(15000, 2)), // 150.00
+            ("USD", "CNY", Decimal::new(720, 2)),    // 7.20
+            ("EUR", "CNY", Decimal::new(780, 2)),    // 7.80
+            ("GBP", "CNY", Decimal::new(890, 2)),    // 8.90
+            ("USD", "EUR", Decimal::new(92, 2)),     // 0.92
+            ("USD", "GBP", Decimal::new(80, 2)),     // 0.80
+            ("USD", "JPY", Decimal::new(15000, 2)),  // 150.00
             ("USD", "KRW", Decimal::new(133000, 2)), // 1330.00
         ];
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:178:
     /// 解析日期字符串
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn parse_date(date_str: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
         Ok(date.to_string())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:186:
     /// 格式化日期
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn format_date(date_str: &str, format: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
         Ok(date.format(format).to_string())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:194:
     /// 获取月初日期
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn get_month_start(date_str: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
         let month_start = date.with_day(1).unwrap();
         Ok(month_start.to_string())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:203:
     /// 获取月末日期
     #[cfg_attr(feature = "wasm", wasm_bindgen)]
     pub fn get_month_end(date_str: &str) -> Result<String> {
-        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d")
-            .map_err(|_| JiveError::InvalidDate { date: date_str.to_string() })?;
-        
+        let date = NaiveDate::parse_from_str(date_str, "%Y-%m-%d").map_err(|_| {
+            JiveError::InvalidDate {
+                date: date_str.to_string(),
+            }
+        })?;
+
         let next_month = if date.month() == 12 {
             NaiveDate::from_ymd_opt(date.year() + 1, 1, 1).unwrap()
         } else {
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:212:
             NaiveDate::from_ymd_opt(date.year(), date.month() + 1, 1).unwrap()
         };
-        
+
         let month_end = next_month.pred_opt().unwrap();
         Ok(month_end.to_string())
     }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:244:
 
     /// 验证交易金额
     pub fn validate_transaction_amount(amount: &str) -> Result<Decimal> {
-        let decimal = amount.parse::<Decimal>()
-            .map_err(|_| JiveError::InvalidAmount { amount: amount.to_string() })?;
-        
+        let decimal = amount
+            .parse::<Decimal>()
+            .map_err(|_| JiveError::InvalidAmount {
+                amount: amount.to_string(),
+            })?;
+
         if decimal.is_zero() {
             return Err(JiveError::ValidationError {
                 message: "Transaction amount cannot be zero".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:253:
             });
         }
-        
+
         // 检查金额是否过大
-        if decimal.abs() > Decimal::new(999999999999i64, 2) { // 9,999,999,999.99
+        if decimal.abs() > Decimal::new(999999999999i64, 2) {
+            // 9,999,999,999.99
             return Err(JiveError::ValidationError {
                 message: "Transaction amount too large".to_string(),
             });
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:261:
         }
-        
+
         Ok(decimal)
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:271:
                 message: "Email cannot be empty".to_string(),
             });
         }
-        
+
         if !trimmed.contains('@') || !trimmed.contains('.') {
             return Err(JiveError::ValidationError {
                 message: "Invalid email format".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:278:
             });
         }
-        
+
         if trimmed.len() > 254 {
             return Err(JiveError::ValidationError {
                 message: "Email too long".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:284:
             });
         }
-        
+
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:294:
                 message: "Password must be at least 8 characters long".to_string(),
             });
         }
-        
+
         if password.len() > 128 {
             return Err(JiveError::ValidationError {
                 message: "Password too long (max 128 characters)".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:301:
             });
         }
-        
+
         let has_upper = password.chars().any(|c| c.is_uppercase());
         let has_lower = password.chars().any(|c| c.is_lowercase());
         let has_digit = password.chars().any(|c| c.is_numeric());
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:307:
-        
+
         if !has_upper || !has_lower || !has_digit {
             return Err(JiveError::ValidationError {
                 message: "Password must contain uppercase, lowercase, and numbers".to_string(),
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:311:
             });
         }
-        
+
         Ok(())
     }
 
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:331:
 impl StringUtils {
     /// 清理和标准化文本
     pub fn clean_text(text: &str) -> String {
-        text.trim().chars()
+        text.trim()
+            .chars()
             .filter(|c| !c.is_control() || c.is_whitespace())
             .collect::<String>()
             .split_whitespace()
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:351:
     /// 生成简短的显示ID（用于UI）
     pub fn short_id(full_id: &str) -> String {
         if full_id.len() > 8 {
-            format!("{}...{}", &full_id[..4], &full_id[full_id.len()-4..])
+            format!("{}...{}", &full_id[..4], &full_id[full_id.len() - 4..])
         } else {
             full_id.to_string()
         }
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/utils.rs:438:
     #[test]
     fn test_string_utils() {
         assert_eq!(StringUtils::clean_text("  hello   world  "), "hello world");
-        assert_eq!(StringUtils::truncate("This is a long text", 10), "This is...");
+        assert_eq!(
+            StringUtils::truncate("This is a long text", 10),
+            "This is..."
+        );
         assert_eq!(StringUtils::truncate("Short", 10), "Short");
         assert_eq!(StringUtils::short_id("123456789012345678"), "1234...5678");
         assert_eq!(StringUtils::short_id("12345678"), "12345678");
Diff in /home/runner/work/jive-flutter-rust/jive-flutter-rust/jive-core/src/wasm.rs:13:
 pub fn ping() -> String {
     "ok".to_string()
 }
-
 
