# Ubuntu (AMD64/x86_64) 专用Dockerfile
# 在Ubuntu系统上使用

FROM rust:latest AS builder

# 安装构建依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 复制源代码
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY .env.example ./

# Ubuntu上构建时的环境变量
# 如果有本地PostgreSQL，使用它；否则禁用SQLx检查
ENV SQLX_OFFLINE=false

# 构建应用
RUN cargo build --release --bin jive-api || \
    (echo "如果编译失败，尝试设置SQLX_OFFLINE=true" && \
     SQLX_OFFLINE=true cargo build --release --bin jive-api)

# 运行阶段
FROM debian:bookworm-slim

RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

RUN useradd -m -u 1001 -s /bin/bash jive

WORKDIR /app

COPY --from=builder /app/target/release/jive-api /app/jive-api
COPY --from=builder /app/.env.example /app/.env.example

RUN mkdir -p /app/logs /app/static && \
    chown -R jive:jive /app

USER jive

# Ubuntu环境变量
ENV RUST_LOG=info \
    API_PORT=8012 \
    HOST=0.0.0.0 \
    DATABASE_URL=postgresql://postgres:postgres@localhost:5432/jive_money \
    REDIS_URL=redis://localhost:6379

EXPOSE 8012

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8012/health || exit 1

CMD ["./jive-api"]