version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: jive-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: jive_money
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - jive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: jive-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jive-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jive API 服务
  jive-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jive-api
    restart: unless-stopped
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/jive_money
      DATABASE_MAX_CONNECTIONS: 25
      # Redis配置
      REDIS_URL: redis://redis:6379
      # API配置
      API_PORT: 8012
      HOST: 0.0.0.0
      RUST_LOG: info
      # JWT配置
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}
      JWT_EXPIRY: 86400
      # CORS配置
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3021}
      CORS_ALLOW_CREDENTIALS: "true"
      # 环境模式
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "8012:8012"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jive-network
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  jive-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local