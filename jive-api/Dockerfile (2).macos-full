# MacOS M4完全容器化方案
# 在容器内编译和运行，避免交叉编译问题

FROM rust:latest AS builder

# 安装依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 复制Cargo文件（利用Docker缓存）
COPY Cargo.toml Cargo.lock ./

# 创建虚拟源文件，先编译依赖
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    echo "fn main() {}" > src/main_simple.rs && \
    echo "fn main() {}" > src/main_simple_ws.rs && \
    echo "fn main() {}" > src/main_with_ws.rs

# 预编译依赖（这一步会被缓存）
RUN cargo build --release --bin jive-api 2>&1 || true
RUN rm -rf src

# 复制实际源代码
COPY src ./src
COPY .env.example ./

# 最终编译（跳过SQLx编译时检查）
ENV SQLX_OFFLINE=true
RUN cargo build --release --bin jive-api

# 运行阶段
FROM debian:bookworm-slim

RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

RUN useradd -m -u 1001 -s /bin/bash jive

WORKDIR /app

# 从构建阶段复制
COPY --from=builder /app/target/release/jive-api /app/jive-api
COPY --from=builder /app/.env.example /app/.env

RUN mkdir -p /app/logs /app/static && \
    chown -R jive:jive /app

USER jive

ENV RUST_LOG=info \
    API_PORT=8012 \
    HOST=0.0.0.0

EXPOSE 8012

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8012/health || exit 1

CMD ["./jive-api"]