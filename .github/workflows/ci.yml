name: Core CI (Strict)

on:
  push:
    branches: [ main, develop, macos ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode'
        required: false
        default: false

permissions:
  contents: read
  pull-requests: write

env:
  FLUTTER_VERSION: '3.35.3'
  RUST_VERSION: '1.89.0'

concurrency:
  group: core-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.out.outputs.docs_only }}
    steps:
    - uses: actions/checkout@v4
    - name: Paths filter
      id: filter
      uses: dorny/paths-filter@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        filters: |
          docs:
            - '**/*.md'
            - 'docs/**'
            - 'README.md'
            - 'AGENTS.md'
            - '.github/*.md'
            - 'PR_DESCRIPTIONS/**'
          code:
            - '!**/*.md'
    - name: Set outputs
      id: out
      run: |
        if [ "${{ steps.filter.outputs.docs }}" = "true" ] && [ "${{ steps.filter.outputs.code }}" != "true" ]; then
          echo "docs_only=true" >> "$GITHUB_OUTPUT"
        else
          echo "docs_only=false" >> "$GITHUB_OUTPUT"
        fi
  rustfmt-check:
    name: Rustfmt Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: false
    needs: [changes]
    env:
      DOCS_ONLY: ${{ needs.changes.outputs.docs_only }}

    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt
    - name: Check formatting (jive-api)
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-api
      run: |
        cargo fmt --all -- --check

    - name: Check formatting (jive-core)
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-core
      run: |
        cargo fmt --all -- --check

  cargo-deny:
    name: Cargo Deny Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: false
    needs: [changes]
    env:
      DOCS_ONLY: ${{ needs.changes.outputs.docs_only }}

    steps:
    - uses: actions/checkout@v4
    - name: Install cargo-deny
      if: env.DOCS_ONLY != 'true'
      run: |
        curl -sSfL https://github.com/EmbarkStudios/cargo-deny/releases/download/0.14.24/cargo-deny-0.14.24-x86_64-unknown-linux-musl.tar.gz | tar xz
        sudo mv cargo-deny*/cargo-deny /usr/local/bin/cargo-deny
        cargo-deny --version
    - name: Run cargo-deny (API)
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-api
      run: |
        set -o pipefail
        cargo-deny check -c ../deny.toml 2>&1 | tee ../cargo-deny-output.txt || true

    - name: Upload cargo-deny output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cargo-deny-output
        path: cargo-deny-output.txt
  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: false
    needs: [changes]
    env:
      DOCS_ONLY: ${{ needs.changes.outputs.docs_only }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      if: env.DOCS_ONLY != 'true'
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Cache Flutter dependencies
      if: env.DOCS_ONLY != 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          jive-flutter/.dart_tool
          jive-flutter/build
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Install dependencies
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-flutter
      run: flutter pub get

    - name: Generate code (build_runner)
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-flutter
      run: |
        flutter pub run build_runner build --delete-conflicting-outputs || true

    - name: Analyze code (non-fatal for now)
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-flutter
      run: |
        set -o pipefail
        # Temporarily non-fatal due to high analyzer warnings; see CI_TEST_RESULT_REPORT.md
        flutter analyze --no-fatal-warnings 2>&1 | tee ../flutter-analyze-output.txt || true

    - name: Upload analyzer output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: flutter-analyze-output
        path: flutter-analyze-output.txt

    - name: Run tests
      if: env.DOCS_ONLY != 'true'
      working-directory: jive-flutter
      run: |
        # Generate machine-readable test results (non-fatal for reporting)
        flutter test --coverage --machine > test-results.json || echo "Machine format failed"
        # Run tests normally (this should pass)
        flutter test --coverage
        # Explicitly run manual overrides navigation test for visibility
        flutter test test/settings_manual_overrides_navigation_test.dart || true
        # Also capture machine output for summary (optional)
        flutter test test/settings_manual_overrides_navigation_test.dart --machine > ../flutter-widget-manual-overrides.json || true

    - name: Upload manual-overrides widget test output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: flutter-manual-overrides-widget
        path: flutter-widget-manual-overrides.json
        if-no-files-found: ignore

    - name: Generate test report
      if: always()
      working-directory: jive-flutter
      run: |
        echo "# Flutter Test Report" > ../test-report.md
        echo "## Test Summary" >> ../test-report.md
        echo "- Date: $(date)" >> ../test-report.md
        echo "- Flutter Version: ${{ env.FLUTTER_VERSION }}" >> ../test-report.md
        echo "" >> ../test-report.md

        if [ -f test-results.json ]; then
          echo "## Test Results" >> ../test-report.md
          echo '```json' >> ../test-report.md
          cat test-results.json >> ../test-report.md
          echo '```' >> ../test-report.md
        fi

        if [ -d coverage ]; then
          echo "## Coverage Summary" >> ../test-report.md
          if [ -f coverage/lcov.info ]; then
            echo "Coverage data generated successfully" >> ../test-report.md
          fi
        fi

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md

  rust-test:
    name: Rust API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [changes]
    env:
      DOCS_ONLY: ${{ needs.changes.outputs.docs_only }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jive_money_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      if: env.DOCS_ONLY != 'true'
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      if: env.DOCS_ONLY != 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          jive-api/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Setup database (migrate via scripts)
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        psql "$DATABASE_URL" -c 'SELECT 1' || (echo "DB not ready" && exit 1)
        ./scripts/migrate_local.sh --force

    - name: Validate SQLx offline cache (strict)
      id: sqlx_check
      continue-on-error: true
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        cargo install sqlx-cli --no-default-features --features postgres || true
        # Require offline cache to match queries
        SQLX_OFFLINE=true cargo sqlx prepare --check

    - name: Produce SQLx cache diff
      if: steps.sqlx_check.outcome == 'failure'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        set -euxo pipefail
        mkdir -p api-sqlx-diff
        echo "SQLx cache mismatch detected. Generating diff..." > api-sqlx-diff/README.txt
        # Work inside jive-api
        pushd jive-api
        cargo install sqlx-cli --no-default-features --features postgres || true
        # Backup existing cache (if present)
        if [ -d .sqlx ]; then cp -r .sqlx /tmp/sqlx-old; else mkdir -p /tmp/sqlx-old; fi
        # Regenerate cache using live DB (write to current .sqlx)
        rm -rf .sqlx || true
        SQLX_OFFLINE=false cargo sqlx prepare || true
        # Copy new cache aside
        rm -rf /tmp/sqlx-new || true
        cp -r .sqlx /tmp/sqlx-new || mkdir -p /tmp/sqlx-new
        # Create a unified diff and tarballs for inspection at repo root
        popd
        diff -ruN /tmp/sqlx-old /tmp/sqlx-new > api-sqlx-diff/api-sqlx-diff.patch || true
        tar -C /tmp -czf api-sqlx-diff/api-sqlx-old.tar.gz sqlx-old || true
        tar -C /tmp -czf api-sqlx-diff/api-sqlx-new.tar.gz sqlx-new || true

    - name: Upload SQLx diff artifact
      if: steps.sqlx_check.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: api-sqlx-diff
        path: api-sqlx-diff
        if-no-files-found: warn

    - name: Fail job due to SQLx cache mismatch
      if: steps.sqlx_check.outcome == 'failure'
      run: |
        echo "SQLx offline cache mismatch detected. See api-sqlx-diff artifact." >&2
        exit 1

    - name: Comment SQLx diff summary to PR
      if: steps.sqlx_check.outcome == 'failure' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const pr = context.payload.pull_request?.number;
          if (!pr) { core.info('No PR context; skip comment'); return; }
          let body = 'SQLx offline cache mismatch detected.\\n\\n';
          try {
            const patch = fs.readFileSync('api-sqlx-diff/api-sqlx-diff.patch','utf8');
            const lines = patch.split('\n').slice(0, 80).join('\n');
            body += 'Patch preview (first 80 lines):\\n\\n```diff\n' + lines + '\n```\\n';
          } catch (e) {
            body += 'No patch preview available.\\n';
          }
          body += '\\nArtifact: api-sqlx-diff (see Actions artifacts).';
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr,
            body,
          });

    - name: Run tests (SQLx offline)
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_secret_key_for_ci
        API_PORT: 8012
        SQLX_OFFLINE: 'true'
      run: |
        # Build jive-core (server features only, no wasm) — can be skipped
        if [ "${SKIP_CORE_CHECK:-true}" = "true" ]; then
          echo "Skipping jive-core server check (SKIP_CORE_CHECK=true)"
        else
          cargo check -p jive-core --no-default-features --features server
        fi
        # 先编译避免冷启动对输出影响 (不使用 core_export 功能，因为 jive-core 尚未准备好)
        cargo test --no-run --no-default-features --features demo_endpoints
        # 运行手动汇率相关测试（单对 + 批量）
        cargo test --test currency_manual_rate_test --no-default-features --features demo_endpoints -- --nocapture || true
        cargo test --test currency_manual_rate_batch_test --no-default-features --features demo_endpoints -- --nocapture || true
        # 运行交易导出及审计清理相关测试
        cargo test --test transactions_export_test --no-default-features --features demo_endpoints -- --nocapture || true
        # 其余测试
        cargo test --no-default-features --features demo_endpoints -- --nocapture > ../rust-test-results.txt 2>&1 || true
        cargo test --no-default-features --features demo_endpoints || true

    - name: Future-incompatibility report (non-fatal)
      working-directory: jive-api
      run: |
        # Generate a future-incompatibility report in logs for visibility
        cargo check --future-incompat-report || true

    - name: Dump export-related indexes
      if: always()
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        echo "# Export Indexes Report" > ../export-indexes-report.md
        echo "Generated at: $(date)" >> ../export-indexes-report.md
        echo "" >> ../export-indexes-report.md
        psql "$DATABASE_URL" -c "\d+ transactions" >> ../export-indexes-report.md 2>/dev/null || true
        echo "" >> ../export-indexes-report.md
        psql "$DATABASE_URL" -c "SELECT indexname, indexdef FROM pg_indexes WHERE tablename='transactions' ORDER BY indexname;" >> ../export-indexes-report.md 2>/dev/null || true
        echo "" >> ../export-indexes-report.md
        echo "## Audit Indexes" >> ../export-indexes-report.md
        psql "$DATABASE_URL" -c "SELECT indexname, indexdef FROM pg_indexes WHERE tablename='family_audit_logs' ORDER BY indexname;" >> ../export-indexes-report.md 2>/dev/null || true

    - name: Upload export indexes report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: export-indexes-report
        path: export-indexes-report.md

    - name: Check code (SQLx offline)
      working-directory: jive-api
      env:
        SQLX_OFFLINE: 'true'
      run: |
        # Ensure default build compiles (demo_endpoints on, but not core_export)
        cargo check --no-default-features --features demo_endpoints
        # Run strict clippy without default features to exclude demo endpoints
        cargo clippy --no-default-features -- -D warnings

    - name: Generate schema report
      if: always()
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        echo "# Database Schema Report" > ../schema-report.md
        echo "## Schema Information" >> ../schema-report.md
        echo "- Date: $(date)" >> ../schema-report.md
        echo "- Database: PostgreSQL" >> ../schema-report.md
        echo "" >> ../schema-report.md

        if [ -d migrations ]; then
          echo "## Migrations" >> ../schema-report.md
          echo '```' >> ../schema-report.md
          ls -la migrations/ >> ../schema-report.md
          echo '```' >> ../schema-report.md
        fi

        echo "## Tables" >> ../schema-report.md
        psql $DATABASE_URL -c "\dt" >> ../schema-report.md || true

    - name: Upload schema report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: schema-report
        path: schema-report.md

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: rust-test-results
        path: rust-test-results.txt

  rust-core-check:
    name: Rust Core Dual Mode Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Restored to blocking mode (fail-fast: true)
    continue-on-error: false
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: jive
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        # Disable core server-db for now; keep default + server only
        mode: [default, server]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          jive-core/target/
        key: ${{ runner.os }}-cargo-core-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-core-

    # jive-core no longer prepares SQLx in this job; handled in API job if needed

    - name: Check jive-core (${{ matrix.mode }})
      working-directory: jive-core
      env:
        SKIP_CORE_CHECK: 'false'
      run: |
        case "${{ matrix.mode }}" in
          default)
            echo "Checking jive-core (default)";
            cargo check || (echo "jive-core default mode failed" && exit 1);
            ;;
          server)
            echo "Checking jive-core (server)";
            cargo check --features server || (echo "jive-core server mode failed" && exit 1);
            ;;
        esac

    - name: Report status
      if: always()
      run: |
        echo "jive-core check completed with mode=${{ matrix.mode }}"
        echo "Status: ${{ job.status }}"

  field-compare:
    name: Field Comparison Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [flutter-test, rust-test]

    steps:
    - uses: actions/checkout@v4

    - name: Download Flutter test report
      uses: actions/download-artifact@v4
      with:
        name: test-report
        path: .

    - name: Download Flutter analyzer output
      uses: actions/download-artifact@v4
      with:
        name: flutter-analyze-output
        path: .

    - name: Upload analyzer output for comparison
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: flutter-analyze-output-comparison
        path: flutter-analyze-output.txt

    - name: Setup tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Compare Flutter and Rust fields
      run: |
        echo "# Field Comparison Report" > field-compare-report.md
        echo "## Flutter vs Rust Model Comparison" >> field-compare-report.md
        echo "- Date: $(date)" >> field-compare-report.md
        echo "" >> field-compare-report.md

        echo "### Tag Model" >> field-compare-report.md
        echo "#### Flutter (lib/models/tag.dart)" >> field-compare-report.md
        if [ -f jive-flutter/lib/models/tag.dart ]; then
          echo '```dart' >> field-compare-report.md
          grep -E "final|String|int|bool|DateTime" jive-flutter/lib/models/tag.dart | head -20 >> field-compare-report.md
          echo '```' >> field-compare-report.md
        fi

        echo "#### Rust (src/models/tag.rs)" >> field-compare-report.md
        if [ -f jive-api/src/models/tag.rs ]; then
          echo '```rust' >> field-compare-report.md
          grep -E "pub|String|i32|i64|bool|DateTime" jive-api/src/models/tag.rs | head -20 >> field-compare-report.md 2>/dev/null || echo "File not found"
          echo '```' >> field-compare-report.md
        fi

        echo "" >> field-compare-report.md
        echo "### Currency Model" >> field-compare-report.md
        echo "#### Flutter (lib/models/currency.dart)" >> field-compare-report.md
        if [ -f jive-flutter/lib/models/currency.dart ]; then
          echo '```dart' >> field-compare-report.md
          grep -E "final|String|double|bool|DateTime" jive-flutter/lib/models/currency.dart | head -20 >> field-compare-report.md
          echo '```' >> field-compare-report.md
        fi

        echo "#### Rust (src/models/currency.rs)" >> field-compare-report.md
        if [ -f jive-api/src/models/currency.rs ]; then
          echo '```rust' >> field-compare-report.md
          grep -E "pub|String|f64|bool|DateTime" jive-api/src/models/currency.rs | head -20 >> field-compare-report.md 2>/dev/null || echo "File not found"
          echo '```' >> field-compare-report.md
        fi

    - name: Upload field comparison report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: field-compare-report
        path: field-compare-report.md
        if-no-files-found: ignore

  

  rust-api-clippy:
    name: Rust API Clippy (blocking)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Now blocking with -D warnings since we achieved 0 clippy warnings
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          jive-api/target/
        key: ${{ runner.os }}-cargo-clippy-api-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-api-

    - name: Run clippy (SQLx offline)
      working-directory: jive-api
      env:
        SQLX_OFFLINE: 'true'
      run: |
        # Now blocking with -D warnings since we have 0 clippy warnings
        cargo clippy --all-features -- -D warnings 2>&1 | tee ../api-clippy-output.txt

    - name: Upload clippy output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-clippy-output
        path: api-clippy-output.txt

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [changes, flutter-test, rust-test, rust-core-check, field-compare, rust-api-clippy, cargo-deny, rustfmt-check]
    if: always()
    env:
      DOCS_ONLY: ${{ needs.changes.outputs.docs_only }}

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate summary report
      run: |
        echo "# CI Summary Report" > ci-summary.md
        echo "## Build Status" >> ci-summary.md
        echo "- Date: $(date)" >> ci-summary.md
        echo "- Branch: ${{ github.ref_name }}" >> ci-summary.md
        echo "- Commit: ${{ github.sha }}" >> ci-summary.md
        echo "" >> ci-summary.md
        echo "## Optimization" >> ci-summary.md
        echo "- Docs-only fast path: ${DOCS_ONLY}" >> ci-summary.md
        echo "" >> ci-summary.md

        echo "## Test Results" >> ci-summary.md
        echo "- Flutter Tests: ${{ needs.flutter-test.result }}" >> ci-summary.md
        echo "- Rust Tests: ${{ needs.rust-test.result }}" >> ci-summary.md
        echo "- Rust Core Check: ${{ needs.rust-core-check.result }}" >> ci-summary.md
        echo "- Rust API Clippy: ${{ needs.rust-api-clippy.result }}" >> ci-summary.md
        echo "- Cargo Deny: ${{ needs.cargo-deny.result }}" >> ci-summary.md
        echo "- Rustfmt Check: ${{ needs.rustfmt-check.result }}" >> ci-summary.md
        echo "- Field Comparison: ${{ needs.field-compare.result }}" >> ci-summary.md
        echo "" >> ci-summary.md

        if [ -f test-report/test-report.md ]; then
          echo "## Flutter Test Details" >> ci-summary.md
          cat test-report/test-report.md >> ci-summary.md
        fi

        if [ -f rust-test-results/rust-test-results.txt ]; then
          echo "## Rust Test Details" >> ci-summary.md
          echo '```' >> ci-summary.md
          tail -50 rust-test-results/rust-test-results.txt >> ci-summary.md
          echo '```' >> ci-summary.md
        fi

        echo "" >> ci-summary.md
        echo "## Job Durations (approx)" >> ci-summary.md
        echo "- Flutter Tests: ${{ needs.flutter-test.result }}" >> ci-summary.md
        echo "- Rust API Tests: ${{ needs.rust-test.result }}" >> ci-summary.md
        echo "- Rust Core Check: ${{ needs.rust-core-check.result }}" >> ci-summary.md
        echo "- Rust API Clippy: ${{ needs.rust-api-clippy.result }}" >> ci-summary.md
        echo "- Cargo Deny: ${{ needs.cargo-deny.result }}" >> ci-summary.md
        echo "- Rustfmt Check: ${{ needs.rustfmt-check.result }}" >> ci-summary.md

        # Manual overrides tests summary
        echo "" >> ci-summary.md
        echo "## Manual Overrides Tests" >> ci-summary.md
        echo "- HTTP endpoint test (manual_overrides_http_test): executed in CI (see Rust Test Details)" >> ci-summary.md
        if [ -f flutter-manual-overrides-widget/flutter-widget-manual-overrides.json ]; then
          echo "- Flutter widget navigation test: executed (artifact present)" >> ci-summary.md
        else
          echo "- Flutter widget navigation test: attempted (no machine artifact found)" >> ci-summary.md
        fi

        # 手动汇率测试简要结果
        echo "" >> ci-summary.md
        echo "## Manual Exchange Rate Tests" >> ci-summary.md
        echo "- currency_manual_rate_test: executed in CI" >> ci-summary.md
        echo "- currency_manual_rate_batch_test: executed in CI" >> ci-summary.md

        # jive-core 双模式检查结果
        echo "" >> ci-summary.md
        echo "## Rust Core Dual Mode Check" >> ci-summary.md
        echo "- jive-core default mode: tested" >> ci-summary.md
        echo "- jive-core server mode: tested" >> ci-summary.md
        echo "- Overall status: ${{ needs.rust-core-check.result }}" >> ci-summary.md

        # Rust API Clippy 结果
        echo "" >> ci-summary.md
        echo "## Rust API Clippy" >> ci-summary.md
        echo "- Status: ${{ needs.rust-api-clippy.result }}" >> ci-summary.md
        echo "- Artifact: api-clippy-output.txt" >> ci-summary.md

    - name: Install psql client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Append recent EXPORT audits to summary
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        echo "" >> ci-summary.md
        echo "## Recent EXPORT Audits (top 3)" >> ci-summary.md
        psql "$DATABASE_URL" -c "COPY (SELECT action, entity_type, to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at FROM family_audit_logs WHERE action='EXPORT' ORDER BY created_at DESC LIMIT 3) TO STDOUT WITH CSV HEADER" >> ci-summary.md 2>/dev/null || echo "(no audit data)" >> ci-summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: ci-summary
        path: ci-summary.md
