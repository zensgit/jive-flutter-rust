name: Core CI (Strict)

on:
  push:
    branches: [ main, develop, macos ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode'
        required: false
        default: false

env:
  FLUTTER_VERSION: '3.35.3'
  RUST_VERSION: '1.89.0'

jobs:
  routing-smoke-tests:
    name: Routing Smoke Tests (PR verify)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.RUST_VERSION }}
        override: true
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          jive-api/target/
        key: ${{ runner.os }}-cargo-routing-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-routing-
    - name: Run routing smoke tests (no DB)
      working-directory: jive-api
      env:
        SQLX_OFFLINE: 'true'
      run: |
        set +e
        mkdir -p ../routing-tests
        SUMMARY=../routing-tests/routing-tests-summary.txt
        LOG1=../routing-tests/routing_methods_smoke_test.log
        LOG2=../routing-tests/rest_resource_methods_test.log

        echo "# Routing Smoke Tests" > "$SUMMARY"
        echo "Date: $(date)" >> "$SUMMARY"
        echo "" >> "$SUMMARY"

        echo "## routing_methods_smoke_test" >> "$SUMMARY"
        cargo test --test routing_methods_smoke_test -- --nocapture > "$LOG1" 2>&1
        if [ $? -eq 0 ]; then
          echo "- Result: PASS" >> "$SUMMARY"
        else
          echo "- Result: FAIL" >> "$SUMMARY"
          echo "- Last 50 lines:" >> "$SUMMARY"
          tail -50 "$LOG1" >> "$SUMMARY" || true
        fi

        echo "" >> "$SUMMARY"
        echo "## rest_resource_methods_test" >> "$SUMMARY"
        cargo test --test rest_resource_methods_test -- --nocapture > "$LOG2" 2>&1
        if [ $? -eq 0 ]; then
          echo "- Result: PASS" >> "$SUMMARY"
        else
          echo "- Result: FAIL" >> "$SUMMARY"
          echo "- Last 50 lines:" >> "$SUMMARY"
          tail -50 "$LOG2" >> "$SUMMARY" || true
        fi

    - name: Upload routing tests summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: routing-tests-summary
        path: routing-tests

    - name: Comment routing tests summary to PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'routing-tests/routing-tests-summary.txt';
          let body = '## Routing Smoke Tests\n';
          if (fs.existsSync(path)) {
            body += '\n```\n' + fs.readFileSync(path, 'utf8') + '\n```\n';
          } else {
            body += '\n(summary file not found)\n';
          }
          const prNumber = context.payload.pull_request?.number;
          if (prNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body,
            });
          }
  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          jive-flutter/.dart_tool
          jive-flutter/build
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Install dependencies
      working-directory: jive-flutter
      run: flutter pub get

    - name: Generate code (build_runner)
      working-directory: jive-flutter
      run: |
        flutter pub run build_runner build --delete-conflicting-outputs || true

    - name: Analyze code
      working-directory: jive-flutter
      run: |
        flutter analyze --no-fatal-warnings || true
        # Save analyzer output for review
        flutter analyze > ../flutter-analyze-output.txt || true

    - name: Upload analyzer output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: flutter-analyze-output
        path: flutter-analyze-output.txt

    - name: Run tests
      working-directory: jive-flutter
      run: |
        flutter test --coverage --machine > test-results.json || true
        flutter test --coverage || true

    - name: Generate test report
      if: always()
      working-directory: jive-flutter
      run: |
        echo "# Flutter Test Report" > ../test-report.md
        echo "## Test Summary" >> ../test-report.md
        echo "- Date: $(date)" >> ../test-report.md
        echo "- Flutter Version: ${{ env.FLUTTER_VERSION }}" >> ../test-report.md
        echo "" >> ../test-report.md

        if [ -f test-results.json ]; then
          echo "## Test Results" >> ../test-report.md
          echo '```json' >> ../test-report.md
          cat test-results.json >> ../test-report.md
          echo '```' >> ../test-report.md
        fi

        if [ -d coverage ]; then
          echo "## Coverage Summary" >> ../test-report.md
          if [ -f coverage/lcov.info ]; then
            echo "Coverage data generated successfully" >> ../test-report.md
          fi
        fi

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md

  rust-test:
    name: Rust API Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jive_money_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.RUST_VERSION }}
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          jive-api/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Setup database (migrate via scripts)
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        psql "$DATABASE_URL" -c 'SELECT 1' || (echo "DB not ready" && exit 1)
        ./scripts/migrate_local.sh --force --db-url "$DATABASE_URL"

    - name: Prepare SQLx offline cache
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        cargo install sqlx-cli --no-default-features --features postgres || true
        ./prepare-sqlx.sh
        SQLX_OFFLINE=true cargo sqlx prepare --check || echo "Warning: SQLx cache validation failed"

    - name: Run tests (SQLx offline)
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_secret_key_for_ci
        API_PORT: 8012
        SQLX_OFFLINE: 'true'
      run: |
        cargo test -- --nocapture > ../rust-test-results.txt 2>&1 || true
        cargo test || true

    # (routing smoke tests moved to dedicated job)

    - name: Check code (SQLx offline)
      working-directory: jive-api
      env:
        SQLX_OFFLINE: 'true'
      run: |
        cargo check
        cargo clippy -- -D warnings || true

    - name: Generate schema report
      if: always()
      working-directory: jive-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jive_money_test
      run: |
        echo "# Database Schema Report" > ../schema-report.md
        echo "## Schema Information" >> ../schema-report.md
        echo "- Date: $(date)" >> ../schema-report.md
        echo "- Database: PostgreSQL" >> ../schema-report.md
        echo "" >> ../schema-report.md

        if [ -d migrations ]; then
          echo "## Migrations" >> ../schema-report.md
          echo '```' >> ../schema-report.md
          ls -la migrations/ >> ../schema-report.md
          echo '```' >> ../schema-report.md
        fi

        echo "## Tables" >> ../schema-report.md
        psql $DATABASE_URL -c "\dt" >> ../schema-report.md || true

    - name: Upload schema report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: schema-report
        path: schema-report.md

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: rust-test-results
        path: rust-test-results.txt

  field-compare:
    name: Field Comparison Check
    runs-on: ubuntu-latest
    needs: [flutter-test, rust-test]

    steps:
    - uses: actions/checkout@v4

    - name: Download analyzer output
      uses: actions/download-artifact@v4
      with:
        name: test-report
        path: .

    - name: Upload analyzer output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: flutter-analyze-output
        path: flutter-analyze-output.txt

    - name: Setup tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Compare Flutter and Rust fields
      run: |
        echo "# Field Comparison Report" > field-compare-report.md
        echo "## Flutter vs Rust Model Comparison" >> field-compare-report.md
        echo "- Date: $(date)" >> field-compare-report.md
        echo "" >> field-compare-report.md

        echo "### Tag Model" >> field-compare-report.md
        echo "#### Flutter (lib/models/tag.dart)" >> field-compare-report.md
        if [ -f jive-flutter/lib/models/tag.dart ]; then
          echo '```dart' >> field-compare-report.md
          grep -E "final|String|int|bool|DateTime" jive-flutter/lib/models/tag.dart | head -20 >> field-compare-report.md
          echo '```' >> field-compare-report.md
        fi

        echo "#### Rust (src/models/tag.rs)" >> field-compare-report.md
        if [ -f jive-api/src/models/tag.rs ]; then
          echo '```rust' >> field-compare-report.md
          grep -E "pub|String|i32|i64|bool|DateTime" jive-api/src/models/tag.rs | head -20 >> field-compare-report.md 2>/dev/null || echo "File not found"
          echo '```' >> field-compare-report.md
        fi

        echo "" >> field-compare-report.md
        echo "### Currency Model" >> field-compare-report.md
        echo "#### Flutter (lib/models/currency.dart)" >> field-compare-report.md
        if [ -f jive-flutter/lib/models/currency.dart ]; then
          echo '```dart' >> field-compare-report.md
          grep -E "final|String|double|bool|DateTime" jive-flutter/lib/models/currency.dart | head -20 >> field-compare-report.md
          echo '```' >> field-compare-report.md
        fi

        echo "#### Rust (src/models/currency.rs)" >> field-compare-report.md
        if [ -f jive-api/src/models/currency.rs ]; then
          echo '```rust' >> field-compare-report.md
          grep -E "pub|String|f64|bool|DateTime" jive-api/src/models/currency.rs | head -20 >> field-compare-report.md 2>/dev/null || echo "File not found"
          echo '```' >> field-compare-report.md
        fi

    - name: Upload field comparison report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: field-compare-report
        path: field-compare-report.md

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [flutter-test, rust-test, field-compare]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate summary report
      run: |
        echo "# CI Summary Report" > ci-summary.md
        echo "## Build Status" >> ci-summary.md
        echo "- Date: $(date)" >> ci-summary.md
        echo "- Branch: ${{ github.ref_name }}" >> ci-summary.md
        echo "- Commit: ${{ github.sha }}" >> ci-summary.md
        echo "" >> ci-summary.md

        echo "## Test Results" >> ci-summary.md
        echo "- Flutter Tests: ${{ needs.flutter-test.result }}" >> ci-summary.md
        echo "- Rust Tests: ${{ needs.rust-test.result }}" >> ci-summary.md
        echo "- Field Comparison: ${{ needs.field-compare.result }}" >> ci-summary.md
        echo "" >> ci-summary.md

        if [ -f test-report/test-report.md ]; then
          echo "## Flutter Test Details" >> ci-summary.md
          cat test-report/test-report.md >> ci-summary.md
        fi

        if [ -f rust-test-results/rust-test-results.txt ]; then
          echo "## Rust Test Details" >> ci-summary.md
          echo '```' >> ci-summary.md
          tail -50 rust-test-results/rust-test-results.txt >> ci-summary.md
          echo '```' >> ci-summary.md
        fi

        if [ -f routing-tests-summary/routing-tests-summary.txt ]; then
          echo "" >> ci-summary.md
          echo "## Routing Smoke Tests" >> ci-summary.md
          cat routing-tests-summary/routing-tests-summary.txt >> ci-summary.md
        fi

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: ci-summary
        path: ci-summary.md
