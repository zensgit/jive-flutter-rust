// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$RuleImpl _$$RuleImplFromJson(Map<String, dynamic> json) => _$RuleImpl(
      id: json['id'] as String?,
      name: json['name'] as String,
      description: json['description'] as String?,
      resourceType: $enumDecode(_$ResourceTypeEnumMap, json['resourceType']),
      active: json['active'] as bool? ?? true,
      priority: (json['priority'] as num?)?.toInt(),
      createdAt: json['createdAt'] == null
          ? null
          : DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      conditions: (json['conditions'] as List<dynamic>?)
              ?.map((e) => RuleCondition.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      actions: (json['actions'] as List<dynamic>?)
              ?.map((e) => RuleAction.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      executionCount: (json['executionCount'] as num?)?.toInt() ?? 0,
      lastExecutedAt: json['lastExecutedAt'] == null
          ? null
          : DateTime.parse(json['lastExecutedAt'] as String),
    );

Map<String, dynamic> _$$RuleImplToJson(_$RuleImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'description': instance.description,
      'resourceType': _$ResourceTypeEnumMap[instance.resourceType]!,
      'active': instance.active,
      'priority': instance.priority,
      'createdAt': instance.createdAt?.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'conditions': instance.conditions,
      'actions': instance.actions,
      'executionCount': instance.executionCount,
      'lastExecutedAt': instance.lastExecutedAt?.toIso8601String(),
    };

const _$ResourceTypeEnumMap = {
  ResourceType.transaction: 'transaction',
  ResourceType.account: 'account',
  ResourceType.budget: 'budget',
};

_$RuleConditionImpl _$$RuleConditionImplFromJson(Map<String, dynamic> json) =>
    _$RuleConditionImpl(
      id: json['id'] as String?,
      type: $enumDecode(_$ConditionTypeEnumMap, json['type']),
      operator: $enumDecode(_$ConditionOperatorEnumMap, json['operator']),
      value: json['value'],
      isCompound: json['isCompound'] as bool? ?? false,
      logicalOperator: $enumDecodeNullable(
          _$LogicalOperatorEnumMap, json['logicalOperator']),
      subConditions: (json['subConditions'] as List<dynamic>?)
              ?.map((e) => RuleCondition.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
    );

Map<String, dynamic> _$$RuleConditionImplToJson(_$RuleConditionImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'type': _$ConditionTypeEnumMap[instance.type]!,
      'operator': _$ConditionOperatorEnumMap[instance.operator]!,
      'value': instance.value,
      'isCompound': instance.isCompound,
      'logicalOperator': _$LogicalOperatorEnumMap[instance.logicalOperator],
      'subConditions': instance.subConditions,
    };

const _$ConditionTypeEnumMap = {
  ConditionType.amount: 'amount',
  ConditionType.description: 'description',
  ConditionType.category: 'category',
  ConditionType.payee: 'payee',
  ConditionType.tag: 'tag',
  ConditionType.date: 'date',
  ConditionType.accountType: 'accountType',
  ConditionType.transactionType: 'transactionType',
};

const _$ConditionOperatorEnumMap = {
  ConditionOperator.equals: 'equals',
  ConditionOperator.notEquals: 'not_equals',
  ConditionOperator.contains: 'contains',
  ConditionOperator.notContains: 'not_contains',
  ConditionOperator.startsWith: 'starts_with',
  ConditionOperator.endsWith: 'ends_with',
  ConditionOperator.greaterThan: 'greater_than',
  ConditionOperator.lessThan: 'less_than',
  ConditionOperator.between: 'between',
  ConditionOperator.inList: 'in',
  ConditionOperator.notInList: 'not_in',
};

const _$LogicalOperatorEnumMap = {
  LogicalOperator.and: 'and',
  LogicalOperator.or: 'or',
};

_$RuleActionImpl _$$RuleActionImplFromJson(Map<String, dynamic> json) =>
    _$RuleActionImpl(
      id: json['id'] as String?,
      type: $enumDecode(_$ActionTypeEnumMap, json['type']),
      value: json['value'],
      params: json['params'] as Map<String, dynamic>?,
    );

Map<String, dynamic> _$$RuleActionImplToJson(_$RuleActionImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'type': _$ActionTypeEnumMap[instance.type]!,
      'value': instance.value,
      'params': instance.params,
    };

const _$ActionTypeEnumMap = {
  ActionType.setCategory: 'setCategory',
  ActionType.addTag: 'addTag',
  ActionType.removeTag: 'removeTag',
  ActionType.setPayee: 'setPayee',
  ActionType.setDescription: 'setDescription',
  ActionType.markAsTransfer: 'markAsTransfer',
  ActionType.hide: 'hide',
  ActionType.notify: 'notify',
  ActionType.autoApprove: 'autoApprove',
  ActionType.autoCategorize: 'autoCategorize',
};

_$RuleLogImpl _$$RuleLogImplFromJson(Map<String, dynamic> json) =>
    _$RuleLogImpl(
      id: json['id'] as String?,
      ruleId: json['ruleId'] as String,
      resourceId: json['resourceId'] as String,
      resourceType: $enumDecode(_$ResourceTypeEnumMap, json['resourceType']),
      success: json['success'] as bool,
      error: json['error'] as String?,
      details: json['details'] as Map<String, dynamic>?,
      executedAt: json['executedAt'] == null
          ? null
          : DateTime.parse(json['executedAt'] as String),
    );

Map<String, dynamic> _$$RuleLogImplToJson(_$RuleLogImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'ruleId': instance.ruleId,
      'resourceId': instance.resourceId,
      'resourceType': _$ResourceTypeEnumMap[instance.resourceType]!,
      'success': instance.success,
      'error': instance.error,
      'details': instance.details,
      'executedAt': instance.executedAt?.toIso8601String(),
    };
