version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: jive-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-jive}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jive_password}
      POSTGRES_DB: ${DB_NAME:-jive_money}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount the entire database init directory to avoid OneDrive file bind issues
      - ./database:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - jive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-jive} -d ${DB_NAME:-jive_money}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for sessions and caching)
  redis:
    image: redis:7-alpine
    container_name: jive-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - jive-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Rust API Server
  api:
    build:
      context: ./jive-api
      dockerfile: Dockerfile
    container_name: jive-api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-jive}:${DB_PASSWORD:-jive_password}@postgres:5432/${DB_NAME:-jive_money}
      REDIS_URL: redis://redis:6379
      API_PORT: ${API_PORT:-8012}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-86400}
      RUST_LOG: ${RUST_LOG:-info}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    ports:
      - "${API_PORT:-8012}:8012"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jive-network
    volumes:
      - ./logs:/app/logs

  # Flutter Web Server (production build)
  web:
    build:
      context: ./jive-flutter
      dockerfile: Dockerfile
      target: web
    container_name: jive-web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8080}:80"
    environment:
      API_URL: http://api:8012
    depends_on:
      - api
    networks:
      - jive-network

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: jive-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - api
      - web
    networks:
      - jive-network
    profiles:
      - production

  # Backup Service (runs periodically)
  backup:
    image: postgres:16-alpine
    container_name: jive-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-jive_password}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h postgres -U ${DB_USER:-jive} -d ${DB_NAME:-jive_money} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name 'backup_*.sql' -mtime +7 -delete;
        sleep 86400;
      done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - jive-network
    profiles:
      - backup

networks:
  jive-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
